{"id":"abe70ce48ce55b79136c0e4da43cd32b","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"@openzeppelin/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"contracts/ReserveContract.sol":{"content":"// SPDX-License-Identifier: MIT LICENSE\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\ncontract ReserveContract is Ownable, ReentrancyGuard, AccessControl {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public currentReserveId;\r\n\r\n    struct ReserveVault {\r\n        IERC20 collateral;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(uint256 => ReserveVault) public _rsvVault;\r\n\r\n    event Withdraw(uint256 indexed vid, uint256 amount);\r\n    event deposit(uint256 indexed vid, uint256 amount);\r\n\r\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\r\n\r\n    constructor() {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(MANAGER_ROLE, _msgSender());\r\n    }\r\n\r\n    function checkReserveContract(IERC20 _collateral) internal view {\r\n        for (uint256 i; i < currentReserveId; i++) {\r\n            require(\r\n                _rsvVault[i].collateral != _collateral,\r\n                \"Collateral Address Already Added\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function addReserveVault(IERC20 _collateral) external {\r\n        require(hasRole(MANAGER_ROLE, _msgSender()), \"Not allowed\");\r\n        checkReserveContract(_collateral);\r\n        _rsvVault[currentReserveId].collateral = _collateral;\r\n        currentReserveId++;\r\n    }\r\n\r\n    function depositCollateral(uint256 vid, uint256 amount) external {\r\n        require(hasRole(MANAGER_ROLE, _msgSender()), \"Not allowed\");\r\n        IERC20 reserves = _rsvVault[vid].collateral;\r\n        reserves.safeTransferFrom(address(msg.sender), address(this), amount);\r\n        uint256 currentVaultBalance = _rsvVault[vid].amount;\r\n        _rsvVault[vid].amount = currentVaultBalance.add(amount);\r\n        emit deposit(vid, amount);\r\n    }\r\n\r\n    function withdrawCollateral(uint256 vid, uint256 amount) external {\r\n        require(hasRole(MANAGER_ROLE, _msgSender()), \"Not allowed\");\r\n        IERC20 reserves = _rsvVault[vid].collateral;\r\n        uint256 currentVaultBalance = _rsvVault[vid].amount;\r\n        if (currentVaultBalance >= amount) {\r\n            reserves.safeTransfer(address(msg.sender), amount);\r\n            _rsvVault[vid].amount = currentVaultBalance.sub(amount);\r\n            emit Withdraw(vid, amount);\r\n        }\r\n    }\r\n}\r\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[285],"Address":[1343],"Context":[1366],"EnumerableSet":[1881]},"id":286,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/EnumerableSet.sol","file":"../utils/EnumerableSet.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":286,"sourceUnit":1882,"src":"58:36:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../utils/Address.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":286,"sourceUnit":1344,"src":"95:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":286,"sourceUnit":1367,"src":"126:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":6,"name":"Context","nameLocations":["1470:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1366,"src":"1470:7:0"},"id":7,"nodeType":"InheritanceSpecifier","src":"1470:7:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"158:1276:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":285,"linearizedBaseContracts":[285,1366],"name":"AccessControl","nameLocation":"1453:13:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":11,"libraryName":{"id":8,"name":"EnumerableSet","nameLocations":["1490:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":1881,"src":"1490:13:0"},"nodeType":"UsingForDirective","src":"1484:49:0","typeName":{"id":10,"nodeType":"UserDefinedTypeName","pathNode":{"id":9,"name":"EnumerableSet.AddressSet","nameLocations":["1508:13:0","1522:10:0"],"nodeType":"IdentifierPath","referencedDeclaration":1654,"src":"1508:24:0"},"referencedDeclaration":1654,"src":"1508:24:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},{"global":false,"id":14,"libraryName":{"id":12,"name":"Address","nameLocations":["1544:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1343,"src":"1544:7:0"},"nodeType":"UsingForDirective","src":"1538:26:0","typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"1556:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"canonicalName":"AccessControl.RoleData","id":20,"members":[{"constant":false,"id":17,"mutability":"mutable","name":"members","nameLocation":"1621:7:0","nodeType":"VariableDeclaration","scope":20,"src":"1596:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":16,"nodeType":"UserDefinedTypeName","pathNode":{"id":15,"name":"EnumerableSet.AddressSet","nameLocations":["1596:13:0","1610:10:0"],"nodeType":"IdentifierPath","referencedDeclaration":1654,"src":"1596:24:0"},"referencedDeclaration":1654,"src":"1596:24:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":19,"mutability":"mutable","name":"adminRole","nameLocation":"1646:9:0","nodeType":"VariableDeclaration","scope":20,"src":"1638:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"1577:8:0","nodeType":"StructDefinition","scope":285,"src":"1570:92:0","visibility":"public"},{"constant":false,"id":25,"mutability":"mutable","name":"_roles","nameLocation":"1706:6:0","nodeType":"VariableDeclaration","scope":285,"src":"1668:44:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":24,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":21,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1677:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1668:29:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":23,"nodeType":"UserDefinedTypeName","pathNode":{"id":22,"name":"RoleData","nameLocations":["1688:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":20,"src":"1688:8:0"},"referencedDeclaration":20,"src":"1688:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$20_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":28,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"1743:18:0","nodeType":"VariableDeclaration","scope":285,"src":"1719:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":26,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1719:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":27,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1764:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"anonymous":false,"documentation":{"id":29,"nodeType":"StructuredDocumentation","src":"1775:292:0","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":37,"name":"RoleAdminChanged","nameLocation":"2078:16:0","nodeType":"EventDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"2111:4:0","nodeType":"VariableDeclaration","scope":37,"src":"2095:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":30,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2095:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":33,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"2133:17:0","nodeType":"VariableDeclaration","scope":37,"src":"2117:33:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":32,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2117:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":35,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"2168:12:0","nodeType":"VariableDeclaration","scope":37,"src":"2152:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":34,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2152:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2094:87:0"},"src":"2072:110:0"},{"anonymous":false,"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"2188:198:0","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":46,"name":"RoleGranted","nameLocation":"2397:11:0","nodeType":"EventDefinition","parameters":{"id":45,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"2425:4:0","nodeType":"VariableDeclaration","scope":46,"src":"2409:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":39,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2409:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":42,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"2447:7:0","nodeType":"VariableDeclaration","scope":46,"src":"2431:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":41,"name":"address","nodeType":"ElementaryTypeName","src":"2431:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":44,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2472:6:0","nodeType":"VariableDeclaration","scope":46,"src":"2456:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43,"name":"address","nodeType":"ElementaryTypeName","src":"2456:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2408:71:0"},"src":"2391:89:0"},{"anonymous":false,"documentation":{"id":47,"nodeType":"StructuredDocumentation","src":"2486:275:0","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":55,"name":"RoleRevoked","nameLocation":"2772:11:0","nodeType":"EventDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"2800:4:0","nodeType":"VariableDeclaration","scope":55,"src":"2784:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":48,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2784:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":51,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"2822:7:0","nodeType":"VariableDeclaration","scope":55,"src":"2806:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":50,"name":"address","nodeType":"ElementaryTypeName","src":"2806:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":53,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2847:6:0","nodeType":"VariableDeclaration","scope":55,"src":"2831:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"2831:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2783:71:0"},"src":"2766:89:0"},{"body":{"id":73,"nodeType":"Block","src":"3017:62:0","statements":[{"expression":{"arguments":[{"id":70,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":60,"src":"3064:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"expression":{"baseExpression":{"id":65,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"3034:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":67,"indexExpression":{"id":66,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"3041:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3034:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$20_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":68,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3047:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":17,"src":"3034:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":69,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3055:8:0","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":1735,"src":"3034:29:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$1654_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$1654_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3034:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":64,"id":72,"nodeType":"Return","src":"3027:45:0"}]},"documentation":{"id":56,"nodeType":"StructuredDocumentation","src":"2861:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":74,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2951:7:0","nodeType":"FunctionDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58,"mutability":"mutable","name":"role","nameLocation":"2967:4:0","nodeType":"VariableDeclaration","scope":74,"src":"2959:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":57,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2959:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":60,"mutability":"mutable","name":"account","nameLocation":"2981:7:0","nodeType":"VariableDeclaration","scope":74,"src":"2973:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":59,"name":"address","nodeType":"ElementaryTypeName","src":"2973:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2958:31:0"},"returnParameters":{"id":64,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":74,"src":"3011:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":62,"name":"bool","nodeType":"ElementaryTypeName","src":"3011:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3010:6:0"},"scope":285,"src":"2942:137:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":89,"nodeType":"Block","src":"3319:53:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"baseExpression":{"id":82,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"3336:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":84,"indexExpression":{"id":83,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"3343:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3336:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$20_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":85,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3349:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":17,"src":"3336:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":86,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3357:6:0","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":1750,"src":"3336:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$1654_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressSet_$1654_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":87,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3336:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":81,"id":88,"nodeType":"Return","src":"3329:36:0"}]},"documentation":{"id":75,"nodeType":"StructuredDocumentation","src":"3085:157:0","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":90,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"3256:18:0","nodeType":"FunctionDefinition","parameters":{"id":78,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"role","nameLocation":"3283:4:0","nodeType":"VariableDeclaration","scope":90,"src":"3275:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":76,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3275:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3274:14:0"},"returnParameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":90,"src":"3310:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":79,"name":"uint256","nodeType":"ElementaryTypeName","src":"3310:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3309:9:0"},"scope":285,"src":"3247:125:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":108,"nodeType":"Block","src":"4039:54:0","statements":[{"expression":{"arguments":[{"id":105,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"4080:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"baseExpression":{"id":100,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"4056:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":102,"indexExpression":{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"4063:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4056:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$20_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4069:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":17,"src":"4056:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":104,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4077:2:0","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":1777,"src":"4056:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$1654_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_AddressSet_$1654_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"}},"id":106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4056:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":99,"id":107,"nodeType":"Return","src":"4049:37:0"}]},"documentation":{"id":91,"nodeType":"StructuredDocumentation","src":"3378:574:0","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":109,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"3966:13:0","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":93,"mutability":"mutable","name":"role","nameLocation":"3988:4:0","nodeType":"VariableDeclaration","scope":109,"src":"3980:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":92,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3980:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":95,"mutability":"mutable","name":"index","nameLocation":"4002:5:0","nodeType":"VariableDeclaration","scope":109,"src":"3994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":94,"name":"uint256","nodeType":"ElementaryTypeName","src":"3994:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3979:29:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":109,"src":"4030:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"4030:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4029:9:0"},"scope":285,"src":"3957:136:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":122,"nodeType":"Block","src":"4340:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":117,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"4357:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":119,"indexExpression":{"id":118,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4364:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4357:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$20_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":120,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4370:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":19,"src":"4357:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":116,"id":121,"nodeType":"Return","src":"4350:29:0"}]},"documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"4099:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":123,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4283:12:0","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112,"mutability":"mutable","name":"role","nameLocation":"4304:4:0","nodeType":"VariableDeclaration","scope":123,"src":"4296:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":111,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4296:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4295:14:0"},"returnParameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":123,"src":"4331:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4331:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4330:9:0"},"scope":285,"src":"4274:112:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":148,"nodeType":"Block","src":"4701:158:0","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":133,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"4727:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":135,"indexExpression":{"id":134,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"4734:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4727:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$20_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":136,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4740:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":19,"src":"4727:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":137,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"4751:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":132,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"4719:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4719:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74","id":140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4766:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811","typeString":"literal_string \"AccessControl: sender must be an admin to grant\""},"value":"AccessControl: sender must be an admin to grant"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811","typeString":"literal_string \"AccessControl: sender must be an admin to grant\""}],"id":131,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4711:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4711:105:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":142,"nodeType":"ExpressionStatement","src":"4711:105:0"},{"expression":{"arguments":[{"id":144,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"4838:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":145,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"4844:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":143,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"4827:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4827:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":147,"nodeType":"ExpressionStatement","src":"4827:25:0"}]},"documentation":{"id":124,"nodeType":"StructuredDocumentation","src":"4392:239:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":149,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"4645:9:0","nodeType":"FunctionDefinition","parameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":126,"mutability":"mutable","name":"role","nameLocation":"4663:4:0","nodeType":"VariableDeclaration","scope":149,"src":"4655:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":125,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4655:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":128,"mutability":"mutable","name":"account","nameLocation":"4677:7:0","nodeType":"VariableDeclaration","scope":149,"src":"4669:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":127,"name":"address","nodeType":"ElementaryTypeName","src":"4669:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4654:31:0"},"returnParameters":{"id":130,"nodeType":"ParameterList","parameters":[],"src":"4701:0:0"},"scope":285,"src":"4636:223:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":174,"nodeType":"Block","src":"5159:160:0","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":159,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"5185:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":161,"indexExpression":{"id":160,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"5192:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5185:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$20_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":162,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5198:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":19,"src":"5185:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":163,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"5209:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5209:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":158,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"5177:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5177:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65","id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5224:50:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3","typeString":"literal_string \"AccessControl: sender must be an admin to revoke\""},"value":"AccessControl: sender must be an admin to revoke"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3","typeString":"literal_string \"AccessControl: sender must be an admin to revoke\""}],"id":157,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5169:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5169:106:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":168,"nodeType":"ExpressionStatement","src":"5169:106:0"},{"expression":{"arguments":[{"id":170,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"5298:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":171,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"5304:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":169,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"5286:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5286:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":173,"nodeType":"ExpressionStatement","src":"5286:26:0"}]},"documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"4865:223:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":175,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"5102:10:0","nodeType":"FunctionDefinition","parameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":152,"mutability":"mutable","name":"role","nameLocation":"5121:4:0","nodeType":"VariableDeclaration","scope":175,"src":"5113:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":151,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5113:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":154,"mutability":"mutable","name":"account","nameLocation":"5135:7:0","nodeType":"VariableDeclaration","scope":175,"src":"5127:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":153,"name":"address","nodeType":"ElementaryTypeName","src":"5127:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5112:31:0"},"returnParameters":{"id":156,"nodeType":"ParameterList","parameters":[],"src":"5159:0:0"},"scope":285,"src":"5093:226:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":196,"nodeType":"Block","src":"5878:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":184,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"5896:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":185,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"5907:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5907:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5896:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5921:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":183,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5888:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5888:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":190,"nodeType":"ExpressionStatement","src":"5888:83:0"},{"expression":{"arguments":[{"id":192,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"5994:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":193,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"6000:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":191,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"5982:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5982:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":195,"nodeType":"ExpressionStatement","src":"5982:26:0"}]},"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"5325:480:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":197,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"5819:12:0","nodeType":"FunctionDefinition","parameters":{"id":181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"role","nameLocation":"5840:4:0","nodeType":"VariableDeclaration","scope":197,"src":"5832:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5832:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":180,"mutability":"mutable","name":"account","nameLocation":"5854:7:0","nodeType":"VariableDeclaration","scope":197,"src":"5846:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":179,"name":"address","nodeType":"ElementaryTypeName","src":"5846:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5831:31:0"},"returnParameters":{"id":182,"nodeType":"ParameterList","parameters":[],"src":"5878:0:0"},"scope":285,"src":"5810:205:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":210,"nodeType":"Block","src":"6648:42:0","statements":[{"expression":{"arguments":[{"id":206,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"6669:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":207,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"6675:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":205,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"6658:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6658:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":209,"nodeType":"ExpressionStatement","src":"6658:25:0"}]},"documentation":{"id":198,"nodeType":"StructuredDocumentation","src":"6021:554:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ===="},"id":211,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"6589:10:0","nodeType":"FunctionDefinition","parameters":{"id":203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"role","nameLocation":"6608:4:0","nodeType":"VariableDeclaration","scope":211,"src":"6600:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":199,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6600:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":202,"mutability":"mutable","name":"account","nameLocation":"6622:7:0","nodeType":"VariableDeclaration","scope":211,"src":"6614:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":201,"name":"address","nodeType":"ElementaryTypeName","src":"6614:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6599:31:0"},"returnParameters":{"id":204,"nodeType":"ParameterList","parameters":[],"src":"6648:0:0"},"scope":285,"src":"6580:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":235,"nodeType":"Block","src":"6888:123:0","statements":[{"eventCall":{"arguments":[{"id":220,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"6920:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"baseExpression":{"id":221,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"6926:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":223,"indexExpression":{"id":222,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"6933:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6926:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$20_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":224,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6939:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":19,"src":"6926:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":225,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"6950:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":219,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"6903:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6903:57:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":227,"nodeType":"EmitStatement","src":"6898:62:0"},{"expression":{"id":233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":228,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"6970:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":230,"indexExpression":{"id":229,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"6977:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6970:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$20_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":231,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6983:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":19,"src":"6970:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":232,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"6995:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6970:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":234,"nodeType":"ExpressionStatement","src":"6970:34:0"}]},"documentation":{"id":212,"nodeType":"StructuredDocumentation","src":"6696:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":236,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"6824:13:0","nodeType":"FunctionDefinition","parameters":{"id":217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":214,"mutability":"mutable","name":"role","nameLocation":"6846:4:0","nodeType":"VariableDeclaration","scope":236,"src":"6838:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":213,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6838:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":216,"mutability":"mutable","name":"adminRole","nameLocation":"6860:9:0","nodeType":"VariableDeclaration","scope":236,"src":"6852:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":215,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6852:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6837:33:0"},"returnParameters":{"id":218,"nodeType":"ParameterList","parameters":[],"src":"6888:0:0"},"scope":285,"src":"6815:196:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":259,"nodeType":"Block","src":"7076:125:0","statements":[{"condition":{"arguments":[{"id":248,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"7115:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"expression":{"baseExpression":{"id":243,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"7090:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":245,"indexExpression":{"id":244,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"7097:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7090:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$20_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":246,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7103:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":17,"src":"7090:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":247,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7111:3:0","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1681,"src":"7090:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$1654_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$1654_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7090:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":258,"nodeType":"IfStatement","src":"7086:109:0","trueBody":{"id":257,"nodeType":"Block","src":"7125:70:0","statements":[{"eventCall":{"arguments":[{"id":251,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"7156:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":252,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"7162:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":253,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"7171:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7171:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":250,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"7144:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7144:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":256,"nodeType":"EmitStatement","src":"7139:45:0"}]}}]},"id":260,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7026:10:0","nodeType":"FunctionDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"mutability":"mutable","name":"role","nameLocation":"7045:4:0","nodeType":"VariableDeclaration","scope":260,"src":"7037:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":237,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7037:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"account","nameLocation":"7059:7:0","nodeType":"VariableDeclaration","scope":260,"src":"7051:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"7051:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7036:31:0"},"returnParameters":{"id":242,"nodeType":"ParameterList","parameters":[],"src":"7076:0:0"},"scope":285,"src":"7017:184:0","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":283,"nodeType":"Block","src":"7267:128:0","statements":[{"condition":{"arguments":[{"id":272,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"7309:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"expression":{"baseExpression":{"id":267,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"7281:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$20_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":269,"indexExpression":{"id":268,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"7288:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7281:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$20_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":270,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7294:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":17,"src":"7281:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":271,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7302:6:0","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":1708,"src":"7281:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$1654_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$1654_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7281:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":282,"nodeType":"IfStatement","src":"7277:112:0","trueBody":{"id":281,"nodeType":"Block","src":"7319:70:0","statements":[{"eventCall":{"arguments":[{"id":275,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"7350:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":276,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"7356:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":277,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"7365:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7365:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":274,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"7338:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7338:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":280,"nodeType":"EmitStatement","src":"7333:45:0"}]}}]},"id":284,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"7216:11:0","nodeType":"FunctionDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"role","nameLocation":"7236:4:0","nodeType":"VariableDeclaration","scope":284,"src":"7228:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":261,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7228:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":264,"mutability":"mutable","name":"account","nameLocation":"7250:7:0","nodeType":"VariableDeclaration","scope":284,"src":"7242:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"7242:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7227:31:0"},"returnParameters":{"id":266,"nodeType":"ParameterList","parameters":[],"src":"7267:0:0"},"scope":285,"src":"7207:188:0","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":286,"src":"1435:5962:0","usedErrors":[],"usedEvents":[37,46,55]}],"src":"33:7365:0"},"id":0},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1366],"Ownable":[395]},"id":396,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":287,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":288,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":396,"sourceUnit":1367,"src":"58:30:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":290,"name":"Context","nameLocations":["613:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1366,"src":"613:7:1"},"id":291,"nodeType":"InheritanceSpecifier","src":"613:7:1"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":289,"nodeType":"StructuredDocumentation","src":"89:494:1","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":395,"linearizedBaseContracts":[395,1366],"name":"Ownable","nameLocation":"602:7:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":293,"mutability":"mutable","name":"_owner","nameLocation":"643:6:1","nodeType":"VariableDeclaration","scope":395,"src":"627:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"627:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":299,"name":"OwnershipTransferred","nameLocation":"662:20:1","nodeType":"EventDefinition","parameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"699:13:1","nodeType":"VariableDeclaration","scope":299,"src":"683:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":294,"name":"address","nodeType":"ElementaryTypeName","src":"683:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":297,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"730:8:1","nodeType":"VariableDeclaration","scope":299,"src":"714:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":296,"name":"address","nodeType":"ElementaryTypeName","src":"714:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"682:57:1"},"src":"656:84:1"},{"body":{"id":320,"nodeType":"Block","src":"857:135:1","statements":[{"assignments":[304],"declarations":[{"constant":false,"id":304,"mutability":"mutable","name":"msgSender","nameLocation":"875:9:1","nodeType":"VariableDeclaration","scope":320,"src":"867:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":303,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":307,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":305,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"887:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"887:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"867:32:1"},{"expression":{"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":308,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"909:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":309,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"918:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"909:18:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":311,"nodeType":"ExpressionStatement","src":"909:18:1"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"971:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":314,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"963:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":313,"name":"address","nodeType":"ElementaryTypeName","src":"963:7:1","typeDescriptions":{}}},"id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"963:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":317,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"975:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":312,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"942:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"942:43:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":319,"nodeType":"EmitStatement","src":"937:48:1"}]},"documentation":{"id":300,"nodeType":"StructuredDocumentation","src":"746:91:1","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":321,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":301,"nodeType":"ParameterList","parameters":[],"src":"854:2:1"},"returnParameters":{"id":302,"nodeType":"ParameterList","parameters":[],"src":"857:0:1"},"scope":395,"src":"842:150:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":329,"nodeType":"Block","src":"1123:30:1","statements":[{"expression":{"id":327,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"1140:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":326,"id":328,"nodeType":"Return","src":"1133:13:1"}]},"documentation":{"id":322,"nodeType":"StructuredDocumentation","src":"998:65:1","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":330,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1077:5:1","nodeType":"FunctionDefinition","parameters":{"id":323,"nodeType":"ParameterList","parameters":[],"src":"1082:2:1"},"returnParameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":330,"src":"1114:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":324,"name":"address","nodeType":"ElementaryTypeName","src":"1114:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1113:9:1"},"scope":395,"src":"1068:85:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":343,"nodeType":"Block","src":"1262:96:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":334,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"1280:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1280:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":336,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"1291:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1291:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1280:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1305:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":333,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1272:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1272:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":341,"nodeType":"ExpressionStatement","src":"1272:68:1"},{"id":342,"nodeType":"PlaceholderStatement","src":"1350:1:1"}]},"documentation":{"id":331,"nodeType":"StructuredDocumentation","src":"1159:77:1","text":" @dev Throws if called by any account other than the owner."},"id":344,"name":"onlyOwner","nameLocation":"1250:9:1","nodeType":"ModifierDefinition","parameters":{"id":332,"nodeType":"ParameterList","parameters":[],"src":"1259:2:1"},"src":"1241:117:1","virtual":false,"visibility":"internal"},{"body":{"id":365,"nodeType":"Block","src":"1754:91:1","statements":[{"eventCall":{"arguments":[{"id":351,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"1790:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1806:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1798:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":352,"name":"address","nodeType":"ElementaryTypeName","src":"1798:7:1","typeDescriptions":{}}},"id":355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1798:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":350,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"1769:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":357,"nodeType":"EmitStatement","src":"1764:45:1"},{"expression":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":358,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"1819:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1828:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":359,"name":"address","nodeType":"ElementaryTypeName","src":"1828:7:1","typeDescriptions":{}}},"id":362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1819:19:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":364,"nodeType":"ExpressionStatement","src":"1819:19:1"}]},"documentation":{"id":345,"nodeType":"StructuredDocumentation","src":"1364:331:1","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":366,"implemented":true,"kind":"function","modifiers":[{"id":348,"kind":"modifierInvocation","modifierName":{"id":347,"name":"onlyOwner","nameLocations":["1744:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":344,"src":"1744:9:1"},"nodeType":"ModifierInvocation","src":"1744:9:1"}],"name":"renounceOwnership","nameLocation":"1709:17:1","nodeType":"FunctionDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[],"src":"1726:2:1"},"returnParameters":{"id":349,"nodeType":"ParameterList","parameters":[],"src":"1754:0:1"},"scope":395,"src":"1700:145:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":393,"nodeType":"Block","src":"2064:170:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":375,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"2082:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2102:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2094:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":376,"name":"address","nodeType":"ElementaryTypeName","src":"2094:7:1","typeDescriptions":{}}},"id":379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2094:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2082:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2106:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":374,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2074:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2074:73:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":383,"nodeType":"ExpressionStatement","src":"2074:73:1"},{"eventCall":{"arguments":[{"id":385,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"2183:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":386,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"2191:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":384,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"2162:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":388,"nodeType":"EmitStatement","src":"2157:43:1"},{"expression":{"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":389,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"2210:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":390,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"2219:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2210:17:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":392,"nodeType":"ExpressionStatement","src":"2210:17:1"}]},"documentation":{"id":367,"nodeType":"StructuredDocumentation","src":"1851:138:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":394,"implemented":true,"kind":"function","modifiers":[{"id":372,"kind":"modifierInvocation","modifierName":{"id":371,"name":"onlyOwner","nameLocations":["2054:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":344,"src":"2054:9:1"},"nodeType":"ModifierInvocation","src":"2054:9:1"}],"name":"transferOwnership","nameLocation":"2003:17:1","nodeType":"FunctionDefinition","parameters":{"id":370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":369,"mutability":"mutable","name":"newOwner","nameLocation":"2029:8:1","nodeType":"VariableDeclaration","scope":394,"src":"2021:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":368,"name":"address","nodeType":"ElementaryTypeName","src":"2021:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2020:18:1"},"returnParameters":{"id":373,"nodeType":"ParameterList","parameters":[],"src":"2064:0:1"},"scope":395,"src":"1994:240:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":396,"src":"584:1652:1","usedErrors":[],"usedEvents":[299]}],"src":"33:2204:1"},"id":1},"@openzeppelin/contracts/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/math/SafeMath.sol","exportedSymbols":{"SafeMath":[750]},"id":751,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":397,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"58:563:2","text":" @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":750,"linearizedBaseContracts":[750],"name":"SafeMath","nameLocation":"630:8:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":428,"nodeType":"Block","src":"857:98:2","statements":[{"assignments":[411],"declarations":[{"constant":false,"id":411,"mutability":"mutable","name":"c","nameLocation":"875:1:2","nodeType":"VariableDeclaration","scope":428,"src":"867:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":410,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":415,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":412,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"879:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":413,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"883:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"879:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"867:17:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":416,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"898:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":417,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"902:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"898:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":423,"nodeType":"IfStatement","src":"894:28:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"913:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"920:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":421,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"912:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":409,"id":422,"nodeType":"Return","src":"905:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"940:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":425,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"946:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":426,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"939:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":409,"id":427,"nodeType":"Return","src":"932:16:2"}]},"documentation":{"id":399,"nodeType":"StructuredDocumentation","src":"645:131:2","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":429,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"790:6:2","nodeType":"FunctionDefinition","parameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":401,"mutability":"mutable","name":"a","nameLocation":"805:1:2","nodeType":"VariableDeclaration","scope":429,"src":"797:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":400,"name":"uint256","nodeType":"ElementaryTypeName","src":"797:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":403,"mutability":"mutable","name":"b","nameLocation":"816:1:2","nodeType":"VariableDeclaration","scope":429,"src":"808:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"808:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"796:22:2"},"returnParameters":{"id":409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":406,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":429,"src":"842:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":405,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":408,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":429,"src":"848:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":407,"name":"uint256","nodeType":"ElementaryTypeName","src":"848:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"841:15:2"},"scope":750,"src":"781:174:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":455,"nodeType":"Block","src":"1177:75:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":441,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"1191:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":442,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"1195:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1191:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":448,"nodeType":"IfStatement","src":"1187:28:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1206:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1213:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":446,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1205:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":440,"id":447,"nodeType":"Return","src":"1198:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1233:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":450,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"1239:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":451,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"1243:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1239:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":453,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1232:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":440,"id":454,"nodeType":"Return","src":"1225:20:2"}]},"documentation":{"id":430,"nodeType":"StructuredDocumentation","src":"961:135:2","text":" @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":456,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1110:6:2","nodeType":"FunctionDefinition","parameters":{"id":435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":432,"mutability":"mutable","name":"a","nameLocation":"1125:1:2","nodeType":"VariableDeclaration","scope":456,"src":"1117:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":431,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":434,"mutability":"mutable","name":"b","nameLocation":"1136:1:2","nodeType":"VariableDeclaration","scope":456,"src":"1128:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":433,"name":"uint256","nodeType":"ElementaryTypeName","src":"1128:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1116:22:2"},"returnParameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":456,"src":"1162:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":436,"name":"bool","nodeType":"ElementaryTypeName","src":"1162:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":456,"src":"1168:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":438,"name":"uint256","nodeType":"ElementaryTypeName","src":"1168:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1161:15:2"},"scope":750,"src":"1101:151:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":496,"nodeType":"Block","src":"1476:359:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":468,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"1708:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1713:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1708:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":475,"nodeType":"IfStatement","src":"1704:28:2","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1724:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1730:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":473,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1723:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":467,"id":474,"nodeType":"Return","src":"1716:16:2"}},{"assignments":[477],"declarations":[{"constant":false,"id":477,"mutability":"mutable","name":"c","nameLocation":"1750:1:2","nodeType":"VariableDeclaration","scope":496,"src":"1742:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":476,"name":"uint256","nodeType":"ElementaryTypeName","src":"1742:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":481,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":478,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"1754:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":479,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"1758:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1754:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1742:17:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":482,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"1773:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":483,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"1777:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1773:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":485,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"1782:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1773:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":491,"nodeType":"IfStatement","src":"1769:33:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1793:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1800:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":489,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1792:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":467,"id":490,"nodeType":"Return","src":"1785:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1820:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":493,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"1826:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":494,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1819:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":467,"id":495,"nodeType":"Return","src":"1812:16:2"}]},"documentation":{"id":457,"nodeType":"StructuredDocumentation","src":"1258:137:2","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":497,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1409:6:2","nodeType":"FunctionDefinition","parameters":{"id":462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":459,"mutability":"mutable","name":"a","nameLocation":"1424:1:2","nodeType":"VariableDeclaration","scope":497,"src":"1416:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":458,"name":"uint256","nodeType":"ElementaryTypeName","src":"1416:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":461,"mutability":"mutable","name":"b","nameLocation":"1435:1:2","nodeType":"VariableDeclaration","scope":497,"src":"1427:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":460,"name":"uint256","nodeType":"ElementaryTypeName","src":"1427:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1415:22:2"},"returnParameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":497,"src":"1461:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":463,"name":"bool","nodeType":"ElementaryTypeName","src":"1461:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":497,"src":"1467:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":465,"name":"uint256","nodeType":"ElementaryTypeName","src":"1467:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1460:15:2"},"scope":750,"src":"1400:435:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":523,"nodeType":"Block","src":"2060:76:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":509,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"2074:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2079:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2074:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":516,"nodeType":"IfStatement","src":"2070:29:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2090:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2097:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":514,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2089:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":508,"id":515,"nodeType":"Return","src":"2082:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2117:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":518,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"2123:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":519,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"2127:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2123:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":521,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2116:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":508,"id":522,"nodeType":"Return","src":"2109:20:2"}]},"documentation":{"id":498,"nodeType":"StructuredDocumentation","src":"1841:138:2","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":524,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1993:6:2","nodeType":"FunctionDefinition","parameters":{"id":503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"mutability":"mutable","name":"a","nameLocation":"2008:1:2","nodeType":"VariableDeclaration","scope":524,"src":"2000:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":499,"name":"uint256","nodeType":"ElementaryTypeName","src":"2000:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":502,"mutability":"mutable","name":"b","nameLocation":"2019:1:2","nodeType":"VariableDeclaration","scope":524,"src":"2011:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":501,"name":"uint256","nodeType":"ElementaryTypeName","src":"2011:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1999:22:2"},"returnParameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":524,"src":"2045:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":504,"name":"bool","nodeType":"ElementaryTypeName","src":"2045:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":524,"src":"2051:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":506,"name":"uint256","nodeType":"ElementaryTypeName","src":"2051:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2044:15:2"},"scope":750,"src":"1984:152:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":550,"nodeType":"Block","src":"2371:76:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":536,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"2385:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2390:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2385:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":543,"nodeType":"IfStatement","src":"2381:29:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2401:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2408:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":541,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2400:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":535,"id":542,"nodeType":"Return","src":"2393:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2428:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":545,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"2434:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":546,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"2438:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2434:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":548,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2427:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":535,"id":549,"nodeType":"Return","src":"2420:20:2"}]},"documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"2142:148:2","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":551,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2304:6:2","nodeType":"FunctionDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"mutability":"mutable","name":"a","nameLocation":"2319:1:2","nodeType":"VariableDeclaration","scope":551,"src":"2311:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":526,"name":"uint256","nodeType":"ElementaryTypeName","src":"2311:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":529,"mutability":"mutable","name":"b","nameLocation":"2330:1:2","nodeType":"VariableDeclaration","scope":551,"src":"2322:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":528,"name":"uint256","nodeType":"ElementaryTypeName","src":"2322:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2310:22:2"},"returnParameters":{"id":535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":532,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":551,"src":"2356:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":531,"name":"bool","nodeType":"ElementaryTypeName","src":"2356:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":534,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":551,"src":"2362:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":533,"name":"uint256","nodeType":"ElementaryTypeName","src":"2362:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2355:15:2"},"scope":750,"src":"2295:152:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":576,"nodeType":"Block","src":"2749:108:2","statements":[{"assignments":[562],"declarations":[{"constant":false,"id":562,"mutability":"mutable","name":"c","nameLocation":"2767:1:2","nodeType":"VariableDeclaration","scope":576,"src":"2759:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":561,"name":"uint256","nodeType":"ElementaryTypeName","src":"2759:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":566,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":563,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"2771:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":564,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"2775:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2771:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2759:17:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":568,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2794:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":569,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"2799:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2794:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206164646974696f6e206f766572666c6f77","id":571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2802:29:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""},"value":"SafeMath: addition overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"id":567,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2786:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2786:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":573,"nodeType":"ExpressionStatement","src":"2786:46:2"},{"expression":{"id":574,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2849:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":560,"id":575,"nodeType":"Return","src":"2842:8:2"}]},"documentation":{"id":552,"nodeType":"StructuredDocumentation","src":"2453:224:2","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":577,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2691:3:2","nodeType":"FunctionDefinition","parameters":{"id":557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"a","nameLocation":"2703:1:2","nodeType":"VariableDeclaration","scope":577,"src":"2695:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":553,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"b","nameLocation":"2714:1:2","nodeType":"VariableDeclaration","scope":577,"src":"2706:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":555,"name":"uint256","nodeType":"ElementaryTypeName","src":"2706:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:22:2"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":577,"src":"2740:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":558,"name":"uint256","nodeType":"ElementaryTypeName","src":"2740:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2739:9:2"},"scope":750,"src":"2682:175:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":598,"nodeType":"Block","src":"3195:88:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":588,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"3213:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":589,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"3218:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3213:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","id":591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3221:32:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""},"value":"SafeMath: subtraction overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"id":587,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3205:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3205:49:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":593,"nodeType":"ExpressionStatement","src":"3205:49:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":594,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"3271:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":595,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"3275:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3271:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":586,"id":597,"nodeType":"Return","src":"3264:12:2"}]},"documentation":{"id":578,"nodeType":"StructuredDocumentation","src":"2863:260:2","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":599,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3137:3:2","nodeType":"FunctionDefinition","parameters":{"id":583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":580,"mutability":"mutable","name":"a","nameLocation":"3149:1:2","nodeType":"VariableDeclaration","scope":599,"src":"3141:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":579,"name":"uint256","nodeType":"ElementaryTypeName","src":"3141:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":582,"mutability":"mutable","name":"b","nameLocation":"3160:1:2","nodeType":"VariableDeclaration","scope":599,"src":"3152:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":581,"name":"uint256","nodeType":"ElementaryTypeName","src":"3152:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3140:22:2"},"returnParameters":{"id":586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":585,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":599,"src":"3186:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":584,"name":"uint256","nodeType":"ElementaryTypeName","src":"3186:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3185:9:2"},"scope":750,"src":"3128:155:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":632,"nodeType":"Block","src":"3597:148:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":609,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"3611:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3616:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3611:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":614,"nodeType":"IfStatement","src":"3607:20:2","trueBody":{"expression":{"hexValue":"30","id":612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3626:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":608,"id":613,"nodeType":"Return","src":"3619:8:2"}},{"assignments":[616],"declarations":[{"constant":false,"id":616,"mutability":"mutable","name":"c","nameLocation":"3645:1:2","nodeType":"VariableDeclaration","scope":632,"src":"3637:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":615,"name":"uint256","nodeType":"ElementaryTypeName","src":"3637:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":620,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":617,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"3649:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":618,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"3653:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3649:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3637:17:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":622,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"3672:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":623,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"3676:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3672:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":625,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"3681:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3672:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","id":627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3684:35:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""},"value":"SafeMath: multiplication overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"id":621,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3664:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3664:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":629,"nodeType":"ExpressionStatement","src":"3664:56:2"},{"expression":{"id":630,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"3737:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":608,"id":631,"nodeType":"Return","src":"3730:8:2"}]},"documentation":{"id":600,"nodeType":"StructuredDocumentation","src":"3289:236:2","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":633,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3539:3:2","nodeType":"FunctionDefinition","parameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":602,"mutability":"mutable","name":"a","nameLocation":"3551:1:2","nodeType":"VariableDeclaration","scope":633,"src":"3543:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":601,"name":"uint256","nodeType":"ElementaryTypeName","src":"3543:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":604,"mutability":"mutable","name":"b","nameLocation":"3562:1:2","nodeType":"VariableDeclaration","scope":633,"src":"3554:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":603,"name":"uint256","nodeType":"ElementaryTypeName","src":"3554:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3542:22:2"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":633,"src":"3588:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":606,"name":"uint256","nodeType":"ElementaryTypeName","src":"3588:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3587:9:2"},"scope":750,"src":"3530:215:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":654,"nodeType":"Block","src":"4276:83:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":644,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"4294:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4298:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4294:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206469766973696f6e206279207a65726f","id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4301:28:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""},"value":"SafeMath: division by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"id":643,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4286:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4286:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":649,"nodeType":"ExpressionStatement","src":"4286:44:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":650,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"4347:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":651,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"4351:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4347:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":642,"id":653,"nodeType":"Return","src":"4340:12:2"}]},"documentation":{"id":634,"nodeType":"StructuredDocumentation","src":"3751:453:2","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":655,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"4218:3:2","nodeType":"FunctionDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":636,"mutability":"mutable","name":"a","nameLocation":"4230:1:2","nodeType":"VariableDeclaration","scope":655,"src":"4222:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"4222:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"b","nameLocation":"4241:1:2","nodeType":"VariableDeclaration","scope":655,"src":"4233:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":637,"name":"uint256","nodeType":"ElementaryTypeName","src":"4233:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4221:22:2"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":655,"src":"4267:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":640,"name":"uint256","nodeType":"ElementaryTypeName","src":"4267:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4266:9:2"},"scope":750,"src":"4209:150:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":676,"nodeType":"Block","src":"4879:81:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":666,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":660,"src":"4897:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4901:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4897:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206d6f64756c6f206279207a65726f","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4904:26:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""},"value":"SafeMath: modulo by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"id":665,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4889:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4889:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":671,"nodeType":"ExpressionStatement","src":"4889:42:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":672,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"4948:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":673,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":660,"src":"4952:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4948:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":664,"id":675,"nodeType":"Return","src":"4941:12:2"}]},"documentation":{"id":656,"nodeType":"StructuredDocumentation","src":"4365:442:2","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":677,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4821:3:2","nodeType":"FunctionDefinition","parameters":{"id":661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"a","nameLocation":"4833:1:2","nodeType":"VariableDeclaration","scope":677,"src":"4825:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":657,"name":"uint256","nodeType":"ElementaryTypeName","src":"4825:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":660,"mutability":"mutable","name":"b","nameLocation":"4844:1:2","nodeType":"VariableDeclaration","scope":677,"src":"4836:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":659,"name":"uint256","nodeType":"ElementaryTypeName","src":"4836:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4824:22:2"},"returnParameters":{"id":664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":663,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":677,"src":"4870:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":662,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4869:9:2"},"scope":750,"src":"4812:148:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":700,"nodeType":"Block","src":"5519:68:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":690,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"5537:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":691,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"5542:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5537:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":693,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5545:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":689,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5529:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5529:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":695,"nodeType":"ExpressionStatement","src":"5529:29:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":696,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"5575:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":697,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"5579:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5575:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":688,"id":699,"nodeType":"Return","src":"5568:12:2"}]},"documentation":{"id":678,"nodeType":"StructuredDocumentation","src":"4966:453:2","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":701,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"5433:3:2","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":680,"mutability":"mutable","name":"a","nameLocation":"5445:1:2","nodeType":"VariableDeclaration","scope":701,"src":"5437:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":679,"name":"uint256","nodeType":"ElementaryTypeName","src":"5437:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":682,"mutability":"mutable","name":"b","nameLocation":"5456:1:2","nodeType":"VariableDeclaration","scope":701,"src":"5448:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"5448:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"errorMessage","nameLocation":"5473:12:2","nodeType":"VariableDeclaration","scope":701,"src":"5459:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":683,"name":"string","nodeType":"ElementaryTypeName","src":"5459:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5436:50:2"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":701,"src":"5510:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":686,"name":"uint256","nodeType":"ElementaryTypeName","src":"5510:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5509:9:2"},"scope":750,"src":"5424:163:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":724,"nodeType":"Block","src":"6339:67:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":714,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"6357:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6361:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6357:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":717,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"6364:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":713,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6349:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6349:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":719,"nodeType":"ExpressionStatement","src":"6349:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":720,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"6394:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":721,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"6398:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6394:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":712,"id":723,"nodeType":"Return","src":"6387:12:2"}]},"documentation":{"id":702,"nodeType":"StructuredDocumentation","src":"5593:646:2","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":725,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"6253:3:2","nodeType":"FunctionDefinition","parameters":{"id":709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":704,"mutability":"mutable","name":"a","nameLocation":"6265:1:2","nodeType":"VariableDeclaration","scope":725,"src":"6257:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"6257:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":706,"mutability":"mutable","name":"b","nameLocation":"6276:1:2","nodeType":"VariableDeclaration","scope":725,"src":"6268:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":705,"name":"uint256","nodeType":"ElementaryTypeName","src":"6268:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":708,"mutability":"mutable","name":"errorMessage","nameLocation":"6293:12:2","nodeType":"VariableDeclaration","scope":725,"src":"6279:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":707,"name":"string","nodeType":"ElementaryTypeName","src":"6279:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6256:50:2"},"returnParameters":{"id":712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":711,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":725,"src":"6330:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":710,"name":"uint256","nodeType":"ElementaryTypeName","src":"6330:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6329:9:2"},"scope":750,"src":"6244:162:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":748,"nodeType":"Block","src":"7147:67:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":738,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"7165:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7169:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7165:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":741,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"7172:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":737,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7157:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7157:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":743,"nodeType":"ExpressionStatement","src":"7157:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":744,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"7202:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":745,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"7206:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7202:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":736,"id":747,"nodeType":"Return","src":"7195:12:2"}]},"documentation":{"id":726,"nodeType":"StructuredDocumentation","src":"6412:635:2","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":749,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"7061:3:2","nodeType":"FunctionDefinition","parameters":{"id":733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":728,"mutability":"mutable","name":"a","nameLocation":"7073:1:2","nodeType":"VariableDeclaration","scope":749,"src":"7065:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":727,"name":"uint256","nodeType":"ElementaryTypeName","src":"7065:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":730,"mutability":"mutable","name":"b","nameLocation":"7084:1:2","nodeType":"VariableDeclaration","scope":749,"src":"7076:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":729,"name":"uint256","nodeType":"ElementaryTypeName","src":"7076:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":732,"mutability":"mutable","name":"errorMessage","nameLocation":"7101:12:2","nodeType":"VariableDeclaration","scope":749,"src":"7087:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":731,"name":"string","nodeType":"ElementaryTypeName","src":"7087:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7064:50:2"},"returnParameters":{"id":736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":735,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":749,"src":"7138:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":734,"name":"uint256","nodeType":"ElementaryTypeName","src":"7138:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7137:9:2"},"scope":750,"src":"7052:162:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":751,"src":"622:6594:2","usedErrors":[],"usedEvents":[]}],"src":"33:7184:2"},"id":2},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[828]},"id":829,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":752,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":753,"nodeType":"StructuredDocumentation","src":"58:70:3","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":828,"linearizedBaseContracts":[828],"name":"IERC20","nameLocation":"139:6:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":754,"nodeType":"StructuredDocumentation","src":"152:66:3","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":759,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"232:11:3","nodeType":"FunctionDefinition","parameters":{"id":755,"nodeType":"ParameterList","parameters":[],"src":"243:2:3"},"returnParameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":759,"src":"269:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":756,"name":"uint256","nodeType":"ElementaryTypeName","src":"269:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"268:9:3"},"scope":828,"src":"223:55:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"284:72:3","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":767,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"370:9:3","nodeType":"FunctionDefinition","parameters":{"id":763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"mutability":"mutable","name":"account","nameLocation":"388:7:3","nodeType":"VariableDeclaration","scope":767,"src":"380:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":761,"name":"address","nodeType":"ElementaryTypeName","src":"380:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"379:17:3"},"returnParameters":{"id":766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":767,"src":"420:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":764,"name":"uint256","nodeType":"ElementaryTypeName","src":"420:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"419:9:3"},"scope":828,"src":"361:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"435:209:3","text":" @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":777,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"658:8:3","nodeType":"FunctionDefinition","parameters":{"id":773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"recipient","nameLocation":"675:9:3","nodeType":"VariableDeclaration","scope":777,"src":"667:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"667:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":772,"mutability":"mutable","name":"amount","nameLocation":"694:6:3","nodeType":"VariableDeclaration","scope":777,"src":"686:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":771,"name":"uint256","nodeType":"ElementaryTypeName","src":"686:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"666:35:3"},"returnParameters":{"id":776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":777,"src":"720:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":774,"name":"bool","nodeType":"ElementaryTypeName","src":"720:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"719:6:3"},"scope":828,"src":"649:77:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":778,"nodeType":"StructuredDocumentation","src":"732:264:3","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":787,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1010:9:3","nodeType":"FunctionDefinition","parameters":{"id":783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":780,"mutability":"mutable","name":"owner","nameLocation":"1028:5:3","nodeType":"VariableDeclaration","scope":787,"src":"1020:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":779,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":782,"mutability":"mutable","name":"spender","nameLocation":"1043:7:3","nodeType":"VariableDeclaration","scope":787,"src":"1035:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"1035:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1019:32:3"},"returnParameters":{"id":786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":787,"src":"1075:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":784,"name":"uint256","nodeType":"ElementaryTypeName","src":"1075:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1074:9:3"},"scope":828,"src":"1001:83:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":788,"nodeType":"StructuredDocumentation","src":"1090:642:3","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":797,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1746:7:3","nodeType":"FunctionDefinition","parameters":{"id":793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":790,"mutability":"mutable","name":"spender","nameLocation":"1762:7:3","nodeType":"VariableDeclaration","scope":797,"src":"1754:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":789,"name":"address","nodeType":"ElementaryTypeName","src":"1754:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":792,"mutability":"mutable","name":"amount","nameLocation":"1779:6:3","nodeType":"VariableDeclaration","scope":797,"src":"1771:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":791,"name":"uint256","nodeType":"ElementaryTypeName","src":"1771:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1753:33:3"},"returnParameters":{"id":796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":797,"src":"1805:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":794,"name":"bool","nodeType":"ElementaryTypeName","src":"1805:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1804:6:3"},"scope":828,"src":"1737:74:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":798,"nodeType":"StructuredDocumentation","src":"1817:296:3","text":" @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":809,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2127:12:3","nodeType":"FunctionDefinition","parameters":{"id":805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":800,"mutability":"mutable","name":"sender","nameLocation":"2148:6:3","nodeType":"VariableDeclaration","scope":809,"src":"2140:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":799,"name":"address","nodeType":"ElementaryTypeName","src":"2140:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":802,"mutability":"mutable","name":"recipient","nameLocation":"2164:9:3","nodeType":"VariableDeclaration","scope":809,"src":"2156:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":801,"name":"address","nodeType":"ElementaryTypeName","src":"2156:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":804,"mutability":"mutable","name":"amount","nameLocation":"2183:6:3","nodeType":"VariableDeclaration","scope":809,"src":"2175:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":803,"name":"uint256","nodeType":"ElementaryTypeName","src":"2175:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2139:51:3"},"returnParameters":{"id":808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":809,"src":"2209:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":806,"name":"bool","nodeType":"ElementaryTypeName","src":"2209:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2208:6:3"},"scope":828,"src":"2118:97:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":810,"nodeType":"StructuredDocumentation","src":"2221:158:3","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":818,"name":"Transfer","nameLocation":"2390:8:3","nodeType":"EventDefinition","parameters":{"id":817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":812,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"2415:4:3","nodeType":"VariableDeclaration","scope":818,"src":"2399:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":811,"name":"address","nodeType":"ElementaryTypeName","src":"2399:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":814,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"2437:2:3","nodeType":"VariableDeclaration","scope":818,"src":"2421:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":813,"name":"address","nodeType":"ElementaryTypeName","src":"2421:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":816,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2449:5:3","nodeType":"VariableDeclaration","scope":818,"src":"2441:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":815,"name":"uint256","nodeType":"ElementaryTypeName","src":"2441:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2398:57:3"},"src":"2384:72:3"},{"anonymous":false,"documentation":{"id":819,"nodeType":"StructuredDocumentation","src":"2462:148:3","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":827,"name":"Approval","nameLocation":"2621:8:3","nodeType":"EventDefinition","parameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":821,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"2646:5:3","nodeType":"VariableDeclaration","scope":827,"src":"2630:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":820,"name":"address","nodeType":"ElementaryTypeName","src":"2630:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":823,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"2669:7:3","nodeType":"VariableDeclaration","scope":827,"src":"2653:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":822,"name":"address","nodeType":"ElementaryTypeName","src":"2653:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":825,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2686:5:3","nodeType":"VariableDeclaration","scope":827,"src":"2678:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":824,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2629:63:3"},"src":"2615:78:3"}],"scope":829,"src":"129:2566:3","usedErrors":[],"usedEvents":[818,827]}],"src":"33:2663:3"},"id":3},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","exportedSymbols":{"Address":[1343],"IERC20":[828],"SafeERC20":[1047],"SafeMath":[750]},"id":1048,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":830,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":831,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1048,"sourceUnit":829,"src":"58:22:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/math/SafeMath.sol","file":"../../math/SafeMath.sol","id":832,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1048,"sourceUnit":751,"src":"81:33:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":833,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1048,"sourceUnit":1344,"src":"115:33:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":834,"nodeType":"StructuredDocumentation","src":"150:457:4","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1047,"linearizedBaseContracts":[1047],"name":"SafeERC20","nameLocation":"616:9:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":837,"libraryName":{"id":835,"name":"SafeMath","nameLocations":["638:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":750,"src":"638:8:4"},"nodeType":"UsingForDirective","src":"632:27:4","typeName":{"id":836,"name":"uint256","nodeType":"ElementaryTypeName","src":"651:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":false,"id":840,"libraryName":{"id":838,"name":"Address","nameLocations":["670:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":1343,"src":"670:7:4"},"nodeType":"UsingForDirective","src":"664:26:4","typeName":{"id":839,"name":"address","nodeType":"ElementaryTypeName","src":"682:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":862,"nodeType":"Block","src":"768:103:4","statements":[{"expression":{"arguments":[{"id":851,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"798:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":854,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"828:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"834:8:4","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":777,"src":"828:14:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"843:8:4","memberName":"selector","nodeType":"MemberAccess","src":"828:23:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":857,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"853:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"857:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":852,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"805:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"809:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"805:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"805:58:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":850,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"778:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$828_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"778:86:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":861,"nodeType":"ExpressionStatement","src":"778:86:4"}]},"id":863,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"705:12:4","nodeType":"FunctionDefinition","parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":843,"mutability":"mutable","name":"token","nameLocation":"725:5:4","nodeType":"VariableDeclaration","scope":863,"src":"718:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"typeName":{"id":842,"nodeType":"UserDefinedTypeName","pathNode":{"id":841,"name":"IERC20","nameLocations":["718:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"718:6:4"},"referencedDeclaration":828,"src":"718:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":845,"mutability":"mutable","name":"to","nameLocation":"740:2:4","nodeType":"VariableDeclaration","scope":863,"src":"732:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":844,"name":"address","nodeType":"ElementaryTypeName","src":"732:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":847,"mutability":"mutable","name":"value","nameLocation":"752:5:4","nodeType":"VariableDeclaration","scope":863,"src":"744:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"717:41:4"},"returnParameters":{"id":849,"nodeType":"ParameterList","parameters":[],"src":"768:0:4"},"scope":1047,"src":"696:175:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":888,"nodeType":"Block","src":"967:113:4","statements":[{"expression":{"arguments":[{"id":876,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"997:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":879,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"1027:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:12:4","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":809,"src":"1027:18:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1046:8:4","memberName":"selector","nodeType":"MemberAccess","src":"1027:27:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":882,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"1056:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":883,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"1062:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":884,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"1066:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":877,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1004:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1008:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1004:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1004:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":875,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"977:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$828_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"977:96:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":887,"nodeType":"ExpressionStatement","src":"977:96:4"}]},"id":889,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"886:16:4","nodeType":"FunctionDefinition","parameters":{"id":873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":866,"mutability":"mutable","name":"token","nameLocation":"910:5:4","nodeType":"VariableDeclaration","scope":889,"src":"903:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"typeName":{"id":865,"nodeType":"UserDefinedTypeName","pathNode":{"id":864,"name":"IERC20","nameLocations":["903:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"903:6:4"},"referencedDeclaration":828,"src":"903:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":868,"mutability":"mutable","name":"from","nameLocation":"925:4:4","nodeType":"VariableDeclaration","scope":889,"src":"917:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"to","nameLocation":"939:2:4","nodeType":"VariableDeclaration","scope":889,"src":"931:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":869,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":872,"mutability":"mutable","name":"value","nameLocation":"951:5:4","nodeType":"VariableDeclaration","scope":889,"src":"943:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":871,"name":"uint256","nodeType":"ElementaryTypeName","src":"943:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"902:55:4"},"returnParameters":{"id":874,"nodeType":"ParameterList","parameters":[],"src":"967:0:4"},"scope":1047,"src":"877:203:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":932,"nodeType":"Block","src":"1416:537:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":901,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"1705:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1714:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1705:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":904,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1704:12:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":909,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1745:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1047","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1047","typeString":"library SafeERC20"}],"id":908,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1737:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":907,"name":"address","nodeType":"ElementaryTypeName","src":"1737:7:4","typeDescriptions":{}}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1737:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":911,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"1752:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":905,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"1721:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1727:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":787,"src":"1721:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1721:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1764:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1721:44:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":915,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1720:46:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1704:62:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1780:56:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":900,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1696:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1696:150:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":919,"nodeType":"ExpressionStatement","src":"1696:150:4"},{"expression":{"arguments":[{"id":921,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"1876:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":924,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"1906:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1912:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":797,"src":"1906:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1920:8:4","memberName":"selector","nodeType":"MemberAccess","src":"1906:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":927,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"1930:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":928,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"1939:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":922,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1883:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1887:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1883:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1883:62:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":920,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"1856:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$828_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1856:90:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":931,"nodeType":"ExpressionStatement","src":"1856:90:4"}]},"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"1086:249:4","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":933,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1349:11:4","nodeType":"FunctionDefinition","parameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":893,"mutability":"mutable","name":"token","nameLocation":"1368:5:4","nodeType":"VariableDeclaration","scope":933,"src":"1361:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"typeName":{"id":892,"nodeType":"UserDefinedTypeName","pathNode":{"id":891,"name":"IERC20","nameLocations":["1361:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"1361:6:4"},"referencedDeclaration":828,"src":"1361:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":895,"mutability":"mutable","name":"spender","nameLocation":"1383:7:4","nodeType":"VariableDeclaration","scope":933,"src":"1375:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":894,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":897,"mutability":"mutable","name":"value","nameLocation":"1400:5:4","nodeType":"VariableDeclaration","scope":933,"src":"1392:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":896,"name":"uint256","nodeType":"ElementaryTypeName","src":"1392:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1360:46:4"},"returnParameters":{"id":899,"nodeType":"ParameterList","parameters":[],"src":"1416:0:4"},"scope":1047,"src":"1340:613:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":969,"nodeType":"Block","src":"2045:197:4","statements":[{"assignments":[944],"declarations":[{"constant":false,"id":944,"mutability":"mutable","name":"newAllowance","nameLocation":"2063:12:4","nodeType":"VariableDeclaration","scope":969,"src":"2055:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":943,"name":"uint256","nodeType":"ElementaryTypeName","src":"2055:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":956,"initialValue":{"arguments":[{"id":954,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"2122:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"id":949,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2102:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1047","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1047","typeString":"library SafeERC20"}],"id":948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2094:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":947,"name":"address","nodeType":"ElementaryTypeName","src":"2094:7:4","typeDescriptions":{}}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2094:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":951,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"2109:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":945,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"2078:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2084:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":787,"src":"2078:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2078:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2118:3:4","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":577,"src":"2078:43:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2078:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2055:73:4"},{"expression":{"arguments":[{"id":958,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"2158:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":961,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"2188:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2194:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":797,"src":"2188:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2202:8:4","memberName":"selector","nodeType":"MemberAccess","src":"2188:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":964,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"2212:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":965,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"2221:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":959,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2165:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":960,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2169:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2165:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2165:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":957,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"2138:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$828_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2138:97:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":968,"nodeType":"ExpressionStatement","src":"2138:97:4"}]},"id":970,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"1968:21:4","nodeType":"FunctionDefinition","parameters":{"id":941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":936,"mutability":"mutable","name":"token","nameLocation":"1997:5:4","nodeType":"VariableDeclaration","scope":970,"src":"1990:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"typeName":{"id":935,"nodeType":"UserDefinedTypeName","pathNode":{"id":934,"name":"IERC20","nameLocations":["1990:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"1990:6:4"},"referencedDeclaration":828,"src":"1990:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":938,"mutability":"mutable","name":"spender","nameLocation":"2012:7:4","nodeType":"VariableDeclaration","scope":970,"src":"2004:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"2004:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"value","nameLocation":"2029:5:4","nodeType":"VariableDeclaration","scope":970,"src":"2021:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"2021:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1989:46:4"},"returnParameters":{"id":942,"nodeType":"ParameterList","parameters":[],"src":"2045:0:4"},"scope":1047,"src":"1959:283:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1007,"nodeType":"Block","src":"2334:242:4","statements":[{"assignments":[981],"declarations":[{"constant":false,"id":981,"mutability":"mutable","name":"newAllowance","nameLocation":"2352:12:4","nodeType":"VariableDeclaration","scope":1007,"src":"2344:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"2344:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":994,"initialValue":{"arguments":[{"id":991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"2411:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2418:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"expression":{"arguments":[{"arguments":[{"id":986,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2391:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1047","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1047","typeString":"library SafeERC20"}],"id":985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2383:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":984,"name":"address","nodeType":"ElementaryTypeName","src":"2383:7:4","typeDescriptions":{}}},"id":987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2383:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":988,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"2398:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":982,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"2367:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2373:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":787,"src":"2367:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2367:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2407:3:4","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":701,"src":"2367:43:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2367:95:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2344:118:4"},{"expression":{"arguments":[{"id":996,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"2492:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":999,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"2522:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2528:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":797,"src":"2522:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2536:8:4","memberName":"selector","nodeType":"MemberAccess","src":"2522:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1002,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"2546:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1003,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"2555:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":997,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2499:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2503:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2499:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2499:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":995,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"2472:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$828_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2472:97:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1006,"nodeType":"ExpressionStatement","src":"2472:97:4"}]},"id":1008,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2257:21:4","nodeType":"FunctionDefinition","parameters":{"id":978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":973,"mutability":"mutable","name":"token","nameLocation":"2286:5:4","nodeType":"VariableDeclaration","scope":1008,"src":"2279:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"typeName":{"id":972,"nodeType":"UserDefinedTypeName","pathNode":{"id":971,"name":"IERC20","nameLocations":["2279:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"2279:6:4"},"referencedDeclaration":828,"src":"2279:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":975,"mutability":"mutable","name":"spender","nameLocation":"2301:7:4","nodeType":"VariableDeclaration","scope":1008,"src":"2293:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":974,"name":"address","nodeType":"ElementaryTypeName","src":"2293:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":977,"mutability":"mutable","name":"value","nameLocation":"2318:5:4","nodeType":"VariableDeclaration","scope":1008,"src":"2310:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":976,"name":"uint256","nodeType":"ElementaryTypeName","src":"2310:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2278:46:4"},"returnParameters":{"id":979,"nodeType":"ParameterList","parameters":[],"src":"2334:0:4"},"scope":1047,"src":"2248:328:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1045,"nodeType":"Block","src":"3029:681:4","statements":[{"assignments":[1018],"declarations":[{"constant":false,"id":1018,"mutability":"mutable","name":"returndata","nameLocation":"3391:10:4","nodeType":"VariableDeclaration","scope":1045,"src":"3378:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1017,"name":"bytes","nodeType":"ElementaryTypeName","src":"3378:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1027,"initialValue":{"arguments":[{"id":1024,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"3432:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3438:34:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1021,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"3412:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}],"id":1020,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3404:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1019,"name":"address","nodeType":"ElementaryTypeName","src":"3404:7:4","typeDescriptions":{}}},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3404:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3419:12:4","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1138,"src":"3404:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3404:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3378:95:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1028,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1018,"src":"3487:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3498:6:4","memberName":"length","nodeType":"MemberAccess","src":"3487:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3507:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3487:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1044,"nodeType":"IfStatement","src":"3483:221:4","trueBody":{"id":1043,"nodeType":"Block","src":"3510:194:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":1035,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1018,"src":"3627:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3640:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1036,"name":"bool","nodeType":"ElementaryTypeName","src":"3640:4:4","typeDescriptions":{}}}],"id":1038,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3639:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1033,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3616:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3620:6:4","memberName":"decode","nodeType":"MemberAccess","src":"3616:10:4","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3616:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3648:44:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1032,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3608:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3608:85:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1042,"nodeType":"ExpressionStatement","src":"3608:85:4"}]}}]},"documentation":{"id":1009,"nodeType":"StructuredDocumentation","src":"2582:372:4","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1046,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"2968:19:4","nodeType":"FunctionDefinition","parameters":{"id":1015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1012,"mutability":"mutable","name":"token","nameLocation":"2995:5:4","nodeType":"VariableDeclaration","scope":1046,"src":"2988:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"typeName":{"id":1011,"nodeType":"UserDefinedTypeName","pathNode":{"id":1010,"name":"IERC20","nameLocations":["2988:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"2988:6:4"},"referencedDeclaration":828,"src":"2988:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1014,"mutability":"mutable","name":"data","nameLocation":"3015:4:4","nodeType":"VariableDeclaration","scope":1046,"src":"3002:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1013,"name":"bytes","nodeType":"ElementaryTypeName","src":"3002:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2987:33:4"},"returnParameters":{"id":1016,"nodeType":"ParameterList","parameters":[],"src":"3029:0:4"},"scope":1047,"src":"2959:751:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1048,"src":"608:3104:4","usedErrors":[],"usedEvents":[]}],"src":"33:3680:4"},"id":4},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1343]},"id":1344,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1049,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1050,"nodeType":"StructuredDocumentation","src":"58:67:5","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1343,"linearizedBaseContracts":[1343],"name":"Address","nameLocation":"134:7:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":1066,"nodeType":"Block","src":"784:347:5","statements":[{"assignments":[1059],"declarations":[{"constant":false,"id":1059,"mutability":"mutable","name":"size","nameLocation":"989:4:5","nodeType":"VariableDeclaration","scope":1066,"src":"981:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"981:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1060,"nodeType":"VariableDeclarationStatement","src":"981:12:5"},{"AST":{"nodeType":"YulBlock","src":"1068:32:5","statements":[{"nodeType":"YulAssignment","src":"1070:28:5","value":{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"1090:7:5"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"1078:11:5"},"nodeType":"YulFunctionCall","src":"1078:20:5"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1070:4:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1053,"isOffset":false,"isSlot":false,"src":"1090:7:5","valueSize":1},{"declaration":1059,"isOffset":false,"isSlot":false,"src":"1070:4:5","valueSize":1}],"id":1061,"nodeType":"InlineAssembly","src":"1059:41:5"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1062,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"1116:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1123:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1116:8:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1057,"id":1065,"nodeType":"Return","src":"1109:15:5"}]},"documentation":{"id":1051,"nodeType":"StructuredDocumentation","src":"148:565:5","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="},"id":1067,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"727:10:5","nodeType":"FunctionDefinition","parameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1053,"mutability":"mutable","name":"account","nameLocation":"746:7:5","nodeType":"VariableDeclaration","scope":1067,"src":"738:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1052,"name":"address","nodeType":"ElementaryTypeName","src":"738:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"737:17:5"},"returnParameters":{"id":1057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1056,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1067,"src":"778:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1055,"name":"bool","nodeType":"ElementaryTypeName","src":"778:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"777:6:5"},"scope":1343,"src":"718:413:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1100,"nodeType":"Block","src":"2119:320:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1078,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2145:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1343","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1343","typeString":"library Address"}],"id":1077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2137:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1076,"name":"address","nodeType":"ElementaryTypeName","src":"2137:7:5","typeDescriptions":{}}},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2137:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2151:7:5","memberName":"balance","nodeType":"MemberAccess","src":"2137:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1081,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"2162:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2137:31:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2170:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1075,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2129:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2129:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1085,"nodeType":"ExpressionStatement","src":"2129:73:5"},{"assignments":[1087,null],"declarations":[{"constant":false,"id":1087,"mutability":"mutable","name":"success","nameLocation":"2296:7:5","nodeType":"VariableDeclaration","scope":1100,"src":"2291:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1086,"name":"bool","nodeType":"ElementaryTypeName","src":"2291:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1094,"initialValue":{"arguments":[{"hexValue":"","id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2341:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1088,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"2309:9:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2319:4:5","memberName":"call","nodeType":"MemberAccess","src":"2309:14:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1090,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"2332:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2309:31:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2309:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2290:54:5"},{"expression":{"arguments":[{"id":1096,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"2362:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2371:60:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1095,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2354:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2354:78:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1099,"nodeType":"ExpressionStatement","src":"2354:78:5"}]},"documentation":{"id":1068,"nodeType":"StructuredDocumentation","src":"1137:906:5","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1101,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2057:9:5","nodeType":"FunctionDefinition","parameters":{"id":1073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1070,"mutability":"mutable","name":"recipient","nameLocation":"2083:9:5","nodeType":"VariableDeclaration","scope":1101,"src":"2067:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1069,"name":"address","nodeType":"ElementaryTypeName","src":"2067:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1072,"mutability":"mutable","name":"amount","nameLocation":"2102:6:5","nodeType":"VariableDeclaration","scope":1101,"src":"2094:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1071,"name":"uint256","nodeType":"ElementaryTypeName","src":"2094:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2066:43:5"},"returnParameters":{"id":1074,"nodeType":"ParameterList","parameters":[],"src":"2119:0:5"},"scope":1343,"src":"2048:391:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1117,"nodeType":"Block","src":"3269:82:5","statements":[{"expression":{"arguments":[{"id":1112,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"3297:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1113,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"3305:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3311:32:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1111,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[1118,1138],"referencedDeclaration":1138,"src":"3284:12:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3284:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1110,"id":1116,"nodeType":"Return","src":"3277:67:5"}]},"documentation":{"id":1102,"nodeType":"StructuredDocumentation","src":"2445:730:5","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1118,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3189:12:5","nodeType":"FunctionDefinition","parameters":{"id":1107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"target","nameLocation":"3210:6:5","nodeType":"VariableDeclaration","scope":1118,"src":"3202:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1103,"name":"address","nodeType":"ElementaryTypeName","src":"3202:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1106,"mutability":"mutable","name":"data","nameLocation":"3231:4:5","nodeType":"VariableDeclaration","scope":1118,"src":"3218:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1105,"name":"bytes","nodeType":"ElementaryTypeName","src":"3218:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3201:35:5"},"returnParameters":{"id":1110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1109,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1118,"src":"3255:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1108,"name":"bytes","nodeType":"ElementaryTypeName","src":"3255:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3254:14:5"},"scope":1343,"src":"3180:171:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1137,"nodeType":"Block","src":"3690:76:5","statements":[{"expression":{"arguments":[{"id":1131,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1121,"src":"3729:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1132,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"3737:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3743:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1134,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"3746:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1130,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1158,1208],"referencedDeclaration":1208,"src":"3707:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3707:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1129,"id":1136,"nodeType":"Return","src":"3700:59:5"}]},"documentation":{"id":1119,"nodeType":"StructuredDocumentation","src":"3357:211:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1138,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3582:12:5","nodeType":"FunctionDefinition","parameters":{"id":1126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1121,"mutability":"mutable","name":"target","nameLocation":"3603:6:5","nodeType":"VariableDeclaration","scope":1138,"src":"3595:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1120,"name":"address","nodeType":"ElementaryTypeName","src":"3595:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1123,"mutability":"mutable","name":"data","nameLocation":"3624:4:5","nodeType":"VariableDeclaration","scope":1138,"src":"3611:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1122,"name":"bytes","nodeType":"ElementaryTypeName","src":"3611:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1125,"mutability":"mutable","name":"errorMessage","nameLocation":"3644:12:5","nodeType":"VariableDeclaration","scope":1138,"src":"3630:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1124,"name":"string","nodeType":"ElementaryTypeName","src":"3630:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3594:63:5"},"returnParameters":{"id":1129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1128,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1138,"src":"3676:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1127,"name":"bytes","nodeType":"ElementaryTypeName","src":"3676:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3675:14:5"},"scope":1343,"src":"3573:193:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1157,"nodeType":"Block","src":"4241:111:5","statements":[{"expression":{"arguments":[{"id":1151,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"4280:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1152,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"4288:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1153,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"4294:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4301:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1150,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1158,1208],"referencedDeclaration":1208,"src":"4258:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4258:87:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1149,"id":1156,"nodeType":"Return","src":"4251:94:5"}]},"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"3772:351:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1158,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4137:21:5","nodeType":"FunctionDefinition","parameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"target","nameLocation":"4167:6:5","nodeType":"VariableDeclaration","scope":1158,"src":"4159:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"4159:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"data","nameLocation":"4188:4:5","nodeType":"VariableDeclaration","scope":1158,"src":"4175:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1142,"name":"bytes","nodeType":"ElementaryTypeName","src":"4175:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1145,"mutability":"mutable","name":"value","nameLocation":"4202:5:5","nodeType":"VariableDeclaration","scope":1158,"src":"4194:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1144,"name":"uint256","nodeType":"ElementaryTypeName","src":"4194:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4158:50:5"},"returnParameters":{"id":1149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1158,"src":"4227:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1147,"name":"bytes","nodeType":"ElementaryTypeName","src":"4227:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4226:14:5"},"scope":1343,"src":"4128:224:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1207,"nodeType":"Block","src":"4741:382:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1175,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4767:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1343","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1343","typeString":"library Address"}],"id":1174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4759:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1173,"name":"address","nodeType":"ElementaryTypeName","src":"4759:7:5","typeDescriptions":{}}},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4759:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4773:7:5","memberName":"balance","nodeType":"MemberAccess","src":"4759:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1178,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"4784:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4759:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4791:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1172,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4751:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1182,"nodeType":"ExpressionStatement","src":"4751:81:5"},{"expression":{"arguments":[{"arguments":[{"id":1185,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"4861:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1184,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"4850:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4850:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4870:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1183,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4842:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4842:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1189,"nodeType":"ExpressionStatement","src":"4842:60:5"},{"assignments":[1191,1193],"declarations":[{"constant":false,"id":1191,"mutability":"mutable","name":"success","nameLocation":"4978:7:5","nodeType":"VariableDeclaration","scope":1207,"src":"4973:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1190,"name":"bool","nodeType":"ElementaryTypeName","src":"4973:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1193,"mutability":"mutable","name":"returndata","nameLocation":"5000:10:5","nodeType":"VariableDeclaration","scope":1207,"src":"4987:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1192,"name":"bytes","nodeType":"ElementaryTypeName","src":"4987:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1200,"initialValue":{"arguments":[{"id":1198,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"5042:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1194,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"5014:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5021:4:5","memberName":"call","nodeType":"MemberAccess","src":"5014:11:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1196,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"5034:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5014:27:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5014:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4972:75:5"},{"expression":{"arguments":[{"id":1202,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"5082:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1203,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"5091:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1204,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1167,"src":"5103:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1201,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"5064:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5064:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1171,"id":1206,"nodeType":"Return","src":"5057:59:5"}]},"documentation":{"id":1159,"nodeType":"StructuredDocumentation","src":"4358:237:5","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1208,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4609:21:5","nodeType":"FunctionDefinition","parameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1161,"mutability":"mutable","name":"target","nameLocation":"4639:6:5","nodeType":"VariableDeclaration","scope":1208,"src":"4631:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1160,"name":"address","nodeType":"ElementaryTypeName","src":"4631:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1163,"mutability":"mutable","name":"data","nameLocation":"4660:4:5","nodeType":"VariableDeclaration","scope":1208,"src":"4647:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1162,"name":"bytes","nodeType":"ElementaryTypeName","src":"4647:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1165,"mutability":"mutable","name":"value","nameLocation":"4674:5:5","nodeType":"VariableDeclaration","scope":1208,"src":"4666:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1164,"name":"uint256","nodeType":"ElementaryTypeName","src":"4666:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1167,"mutability":"mutable","name":"errorMessage","nameLocation":"4695:12:5","nodeType":"VariableDeclaration","scope":1208,"src":"4681:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1166,"name":"string","nodeType":"ElementaryTypeName","src":"4681:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4630:78:5"},"returnParameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1208,"src":"4727:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1169,"name":"bytes","nodeType":"ElementaryTypeName","src":"4727:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4726:14:5"},"scope":1343,"src":"4600:523:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1224,"nodeType":"Block","src":"5400:97:5","statements":[{"expression":{"arguments":[{"id":1219,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"5436:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1220,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"5444:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5450:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1218,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1225,1260],"referencedDeclaration":1260,"src":"5417:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5417:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1217,"id":1223,"nodeType":"Return","src":"5410:80:5"}]},"documentation":{"id":1209,"nodeType":"StructuredDocumentation","src":"5129:166:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1225,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5309:18:5","nodeType":"FunctionDefinition","parameters":{"id":1214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1211,"mutability":"mutable","name":"target","nameLocation":"5336:6:5","nodeType":"VariableDeclaration","scope":1225,"src":"5328:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1210,"name":"address","nodeType":"ElementaryTypeName","src":"5328:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1213,"mutability":"mutable","name":"data","nameLocation":"5357:4:5","nodeType":"VariableDeclaration","scope":1225,"src":"5344:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1212,"name":"bytes","nodeType":"ElementaryTypeName","src":"5344:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5327:35:5"},"returnParameters":{"id":1217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1225,"src":"5386:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1215,"name":"bytes","nodeType":"ElementaryTypeName","src":"5386:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5385:14:5"},"scope":1343,"src":"5300:197:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1259,"nodeType":"Block","src":"5809:288:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1239,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"5838:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1238,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"5827:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5827:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":1241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5847:38:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":1237,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5819:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5819:67:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1243,"nodeType":"ExpressionStatement","src":"5819:67:5"},{"assignments":[1245,1247],"declarations":[{"constant":false,"id":1245,"mutability":"mutable","name":"success","nameLocation":"5962:7:5","nodeType":"VariableDeclaration","scope":1259,"src":"5957:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1244,"name":"bool","nodeType":"ElementaryTypeName","src":"5957:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1247,"mutability":"mutable","name":"returndata","nameLocation":"5984:10:5","nodeType":"VariableDeclaration","scope":1259,"src":"5971:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1246,"name":"bytes","nodeType":"ElementaryTypeName","src":"5971:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1252,"initialValue":{"arguments":[{"id":1250,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"6016:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1248,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"5998:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6005:10:5","memberName":"staticcall","nodeType":"MemberAccess","src":"5998:17:5","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5956:65:5"},{"expression":{"arguments":[{"id":1254,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"6056:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1255,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"6065:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1256,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"6077:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1253,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"6038:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6038:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1236,"id":1258,"nodeType":"Return","src":"6031:59:5"}]},"documentation":{"id":1226,"nodeType":"StructuredDocumentation","src":"5503:173:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1260,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5690:18:5","nodeType":"FunctionDefinition","parameters":{"id":1233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1228,"mutability":"mutable","name":"target","nameLocation":"5717:6:5","nodeType":"VariableDeclaration","scope":1260,"src":"5709:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1227,"name":"address","nodeType":"ElementaryTypeName","src":"5709:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1230,"mutability":"mutable","name":"data","nameLocation":"5738:4:5","nodeType":"VariableDeclaration","scope":1260,"src":"5725:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1229,"name":"bytes","nodeType":"ElementaryTypeName","src":"5725:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"errorMessage","nameLocation":"5758:12:5","nodeType":"VariableDeclaration","scope":1260,"src":"5744:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1231,"name":"string","nodeType":"ElementaryTypeName","src":"5744:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5708:63:5"},"returnParameters":{"id":1236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1235,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1260,"src":"5795:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1234,"name":"bytes","nodeType":"ElementaryTypeName","src":"5795:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5794:14:5"},"scope":1343,"src":"5681:416:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1276,"nodeType":"Block","src":"6373:101:5","statements":[{"expression":{"arguments":[{"id":1271,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"6411:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1272,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"6419:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6425:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1270,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1277,1312],"referencedDeclaration":1312,"src":"6390:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1269,"id":1275,"nodeType":"Return","src":"6383:84:5"}]},"documentation":{"id":1261,"nodeType":"StructuredDocumentation","src":"6103:168:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1277,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6285:20:5","nodeType":"FunctionDefinition","parameters":{"id":1266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"target","nameLocation":"6314:6:5","nodeType":"VariableDeclaration","scope":1277,"src":"6306:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1262,"name":"address","nodeType":"ElementaryTypeName","src":"6306:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1265,"mutability":"mutable","name":"data","nameLocation":"6335:4:5","nodeType":"VariableDeclaration","scope":1277,"src":"6322:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1264,"name":"bytes","nodeType":"ElementaryTypeName","src":"6322:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6305:35:5"},"returnParameters":{"id":1269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1268,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1277,"src":"6359:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1267,"name":"bytes","nodeType":"ElementaryTypeName","src":"6359:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6358:14:5"},"scope":1343,"src":"6276:198:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1311,"nodeType":"Block","src":"6785:292:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1291,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"6814:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1290,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"6803:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6803:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":1289,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6795:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6795:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1295,"nodeType":"ExpressionStatement","src":"6795:69:5"},{"assignments":[1297,1299],"declarations":[{"constant":false,"id":1297,"mutability":"mutable","name":"success","nameLocation":"6940:7:5","nodeType":"VariableDeclaration","scope":1311,"src":"6935:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1296,"name":"bool","nodeType":"ElementaryTypeName","src":"6935:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1299,"mutability":"mutable","name":"returndata","nameLocation":"6962:10:5","nodeType":"VariableDeclaration","scope":1311,"src":"6949:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1298,"name":"bytes","nodeType":"ElementaryTypeName","src":"6949:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1304,"initialValue":{"arguments":[{"id":1302,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"6996:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1300,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"6976:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6983:12:5","memberName":"delegatecall","nodeType":"MemberAccess","src":"6976:19:5","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6976:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6934:67:5"},{"expression":{"arguments":[{"id":1306,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"7036:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1307,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"7045:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1308,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"7057:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1305,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"7018:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7018:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1288,"id":1310,"nodeType":"Return","src":"7011:59:5"}]},"documentation":{"id":1278,"nodeType":"StructuredDocumentation","src":"6480:175:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1312,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6669:20:5","nodeType":"FunctionDefinition","parameters":{"id":1285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1280,"mutability":"mutable","name":"target","nameLocation":"6698:6:5","nodeType":"VariableDeclaration","scope":1312,"src":"6690:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1279,"name":"address","nodeType":"ElementaryTypeName","src":"6690:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1282,"mutability":"mutable","name":"data","nameLocation":"6719:4:5","nodeType":"VariableDeclaration","scope":1312,"src":"6706:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1281,"name":"bytes","nodeType":"ElementaryTypeName","src":"6706:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"errorMessage","nameLocation":"6739:12:5","nodeType":"VariableDeclaration","scope":1312,"src":"6725:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1283,"name":"string","nodeType":"ElementaryTypeName","src":"6725:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6689:63:5"},"returnParameters":{"id":1288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1312,"src":"6771:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1286,"name":"bytes","nodeType":"ElementaryTypeName","src":"6771:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6770:14:5"},"scope":1343,"src":"6660:417:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1341,"nodeType":"Block","src":"7212:596:5","statements":[{"condition":{"id":1323,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"7226:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1339,"nodeType":"Block","src":"7283:519:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1327,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"7367:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7378:6:5","memberName":"length","nodeType":"MemberAccess","src":"7367:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7387:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7367:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1337,"nodeType":"Block","src":"7739:53:5","statements":[{"expression":{"arguments":[{"id":1334,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"7764:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1333,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"7757:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7757:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1336,"nodeType":"ExpressionStatement","src":"7757:20:5"}]},"id":1338,"nodeType":"IfStatement","src":"7363:429:5","trueBody":{"id":1332,"nodeType":"Block","src":"7390:343:5","statements":[{"AST":{"nodeType":"YulBlock","src":"7574:145:5","statements":[{"nodeType":"YulVariableDeclaration","src":"7596:40:5","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"7625:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7619:5:5"},"nodeType":"YulFunctionCall","src":"7619:17:5"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"7600:15:5","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7668:2:5","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"7672:10:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7664:3:5"},"nodeType":"YulFunctionCall","src":"7664:19:5"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"7685:15:5"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7657:6:5"},"nodeType":"YulFunctionCall","src":"7657:44:5"},"nodeType":"YulExpressionStatement","src":"7657:44:5"}]},"evmVersion":"paris","externalReferences":[{"declaration":1316,"isOffset":false,"isSlot":false,"src":"7625:10:5","valueSize":1},{"declaration":1316,"isOffset":false,"isSlot":false,"src":"7672:10:5","valueSize":1}],"id":1331,"nodeType":"InlineAssembly","src":"7565:154:5"}]}}]},"id":1340,"nodeType":"IfStatement","src":"7222:580:5","trueBody":{"id":1326,"nodeType":"Block","src":"7235:42:5","statements":[{"expression":{"id":1324,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"7256:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1322,"id":1325,"nodeType":"Return","src":"7249:17:5"}]}}]},"id":1342,"implemented":true,"kind":"function","modifiers":[],"name":"_verifyCallResult","nameLocation":"7092:17:5","nodeType":"FunctionDefinition","parameters":{"id":1319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1314,"mutability":"mutable","name":"success","nameLocation":"7115:7:5","nodeType":"VariableDeclaration","scope":1342,"src":"7110:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1313,"name":"bool","nodeType":"ElementaryTypeName","src":"7110:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1316,"mutability":"mutable","name":"returndata","nameLocation":"7137:10:5","nodeType":"VariableDeclaration","scope":1342,"src":"7124:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1315,"name":"bytes","nodeType":"ElementaryTypeName","src":"7124:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1318,"mutability":"mutable","name":"errorMessage","nameLocation":"7163:12:5","nodeType":"VariableDeclaration","scope":1342,"src":"7149:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1317,"name":"string","nodeType":"ElementaryTypeName","src":"7149:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7109:67:5"},"returnParameters":{"id":1322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1342,"src":"7198:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1320,"name":"bytes","nodeType":"ElementaryTypeName","src":"7198:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7197:14:5"},"scope":1343,"src":"7083:725:5","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1344,"src":"126:7684:5","usedErrors":[],"usedEvents":[]}],"src":"33:7778:5"},"id":5},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1366]},"id":1367,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1345,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:6"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1366,"linearizedBaseContracts":[1366],"name":"Context","nameLocation":"576:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1353,"nodeType":"Block","src":"652:34:6","statements":[{"expression":{"expression":{"id":1350,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"669:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"673:6:6","memberName":"sender","nodeType":"MemberAccess","src":"669:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1349,"id":1352,"nodeType":"Return","src":"662:17:6"}]},"id":1354,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"599:10:6","nodeType":"FunctionDefinition","parameters":{"id":1346,"nodeType":"ParameterList","parameters":[],"src":"609:2:6"},"returnParameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1354,"src":"643:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"643:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"642:9:6"},"scope":1366,"src":"590:96:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1364,"nodeType":"Block","src":"757:165:6","statements":[{"expression":{"id":1359,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"767:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$1366","typeString":"contract Context"}},"id":1360,"nodeType":"ExpressionStatement","src":"767:4:6"},{"expression":{"expression":{"id":1361,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"907:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"911:4:6","memberName":"data","nodeType":"MemberAccess","src":"907:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1358,"id":1363,"nodeType":"Return","src":"900:15:6"}]},"id":1365,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"701:8:6","nodeType":"FunctionDefinition","parameters":{"id":1355,"nodeType":"ParameterList","parameters":[],"src":"709:2:6"},"returnParameters":{"id":1358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1365,"src":"743:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1356,"name":"bytes","nodeType":"ElementaryTypeName","src":"743:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"742:14:6"},"scope":1366,"src":"692:230:6","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1367,"src":"558:366:6","usedErrors":[],"usedEvents":[]}],"src":"33:892:6"},"id":6},"@openzeppelin/contracts/utils/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[1881]},"id":1882,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1368,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":1369,"nodeType":"StructuredDocumentation","src":"58:686:7","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported."},"fullyImplemented":true,"id":1881,"linearizedBaseContracts":[1881],"name":"EnumerableSet","nameLocation":"753:13:7","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":1377,"members":[{"constant":false,"id":1372,"mutability":"mutable","name":"_values","nameLocation":"1277:7:7","nodeType":"VariableDeclaration","scope":1377,"src":"1267:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1267:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1371,"nodeType":"ArrayTypeName","src":"1267:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1376,"mutability":"mutable","name":"_indexes","nameLocation":"1447:8:7","nodeType":"VariableDeclaration","scope":1377,"src":"1418:37:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":1375,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1427:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1418:28:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1374,"name":"uint256","nodeType":"ElementaryTypeName","src":"1438:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1220:3:7","nodeType":"StructDefinition","scope":1881,"src":"1213:249:7","visibility":"public"},{"body":{"id":1418,"nodeType":"Block","src":"1701:335:7","statements":[{"condition":{"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1715:22:7","subExpression":{"arguments":[{"id":1389,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"1726:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":1390,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"1731:5:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1388,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"1716:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1377_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1716:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1416,"nodeType":"Block","src":"1993:37:7","statements":[{"expression":{"hexValue":"66616c7365","id":1414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2014:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1387,"id":1415,"nodeType":"Return","src":"2007:12:7"}]},"id":1417,"nodeType":"IfStatement","src":"1711:319:7","trueBody":{"id":1413,"nodeType":"Block","src":"1739:248:7","statements":[{"expression":{"arguments":[{"id":1398,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"1770:5:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":1393,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"1753:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1396,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1757:7:7","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"1753:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1765:4:7","memberName":"push","nodeType":"MemberAccess","src":"1753:16:7","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1753:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1400,"nodeType":"ExpressionStatement","src":"1753:23:7"},{"expression":{"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1401,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"1911:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1915:8:7","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":1376,"src":"1911:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1405,"indexExpression":{"id":1403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"1924:5:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1911:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":1406,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"1933:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1407,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1937:7:7","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"1933:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1945:6:7","memberName":"length","nodeType":"MemberAccess","src":"1933:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1911:40:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1410,"nodeType":"ExpressionStatement","src":"1911:40:7"},{"expression":{"hexValue":"74727565","id":1411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1387,"id":1412,"nodeType":"Return","src":"1965:11:7"}]}}]},"documentation":{"id":1378,"nodeType":"StructuredDocumentation","src":"1468:159:7","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":1419,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"1641:4:7","nodeType":"FunctionDefinition","parameters":{"id":1384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"mutability":"mutable","name":"set","nameLocation":"1658:3:7","nodeType":"VariableDeclaration","scope":1419,"src":"1646:15:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":1380,"nodeType":"UserDefinedTypeName","pathNode":{"id":1379,"name":"Set","nameLocations":["1646:3:7"],"nodeType":"IdentifierPath","referencedDeclaration":1377,"src":"1646:3:7"},"referencedDeclaration":1377,"src":"1646:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":1383,"mutability":"mutable","name":"value","nameLocation":"1671:5:7","nodeType":"VariableDeclaration","scope":1419,"src":"1663:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1382,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1663:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1645:32:7"},"returnParameters":{"id":1387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1419,"src":"1695:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1385,"name":"bool","nodeType":"ElementaryTypeName","src":"1695:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1694:6:7"},"scope":1881,"src":"1632:404:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1499,"nodeType":"Block","src":"2276:1440:7","statements":[{"assignments":[1431],"declarations":[{"constant":false,"id":1431,"mutability":"mutable","name":"valueIndex","nameLocation":"2394:10:7","nodeType":"VariableDeclaration","scope":1499,"src":"2386:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1430,"name":"uint256","nodeType":"ElementaryTypeName","src":"2386:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1436,"initialValue":{"baseExpression":{"expression":{"id":1432,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"2407:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1433,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2411:8:7","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":1376,"src":"2407:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1435,"indexExpression":{"id":1434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"2420:5:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2407:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2386:40:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1437,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"2441:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2455:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2441:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1497,"nodeType":"Block","src":"3673:37:7","statements":[{"expression":{"hexValue":"66616c7365","id":1495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3694:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1429,"id":1496,"nodeType":"Return","src":"3687:12:7"}]},"id":1498,"nodeType":"IfStatement","src":"2437:1273:7","trueBody":{"id":1494,"nodeType":"Block","src":"2458:1209:7","statements":[{"assignments":[1441],"declarations":[{"constant":false,"id":1441,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"2806:13:7","nodeType":"VariableDeclaration","scope":1494,"src":"2798:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1440,"name":"uint256","nodeType":"ElementaryTypeName","src":"2798:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1445,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1442,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"2822:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2835:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2822:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2798:38:7"},{"assignments":[1447],"declarations":[{"constant":false,"id":1447,"mutability":"mutable","name":"lastIndex","nameLocation":"2858:9:7","nodeType":"VariableDeclaration","scope":1494,"src":"2850:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1446,"name":"uint256","nodeType":"ElementaryTypeName","src":"2850:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1453,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1448,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"2870:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1449,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2874:7:7","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"2870:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2882:6:7","memberName":"length","nodeType":"MemberAccess","src":"2870:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2891:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2870:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2850:42:7"},{"assignments":[1455],"declarations":[{"constant":false,"id":1455,"mutability":"mutable","name":"lastvalue","nameLocation":"3140:9:7","nodeType":"VariableDeclaration","scope":1494,"src":"3132:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3132:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1460,"initialValue":{"baseExpression":{"expression":{"id":1456,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"3152:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1457,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3156:7:7","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"3152:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":1459,"indexExpression":{"id":1458,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"3164:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3152:22:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3132:42:7"},{"expression":{"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1461,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"3266:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1464,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3270:7:7","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"3266:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":1465,"indexExpression":{"id":1463,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"3278:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3266:26:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1466,"name":"lastvalue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"3295:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3266:38:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1468,"nodeType":"ExpressionStatement","src":"3266:38:7"},{"expression":{"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1469,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"3370:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1472,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3374:8:7","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":1376,"src":"3370:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1473,"indexExpression":{"id":1471,"name":"lastvalue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"3383:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3370:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1474,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"3396:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3412:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3396:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3370:43:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1478,"nodeType":"ExpressionStatement","src":"3370:43:7"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":1479,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"3519:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1482,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3523:7:7","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"3519:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3531:3:7","memberName":"pop","nodeType":"MemberAccess","src":"3519:15:7","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3519:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1485,"nodeType":"ExpressionStatement","src":"3519:17:7"},{"expression":{"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"3604:26:7","subExpression":{"baseExpression":{"expression":{"id":1486,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"3611:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1487,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3615:8:7","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":1376,"src":"3611:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1489,"indexExpression":{"id":1488,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"3624:5:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3611:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1491,"nodeType":"ExpressionStatement","src":"3604:26:7"},{"expression":{"hexValue":"74727565","id":1492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3652:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1429,"id":1493,"nodeType":"Return","src":"3645:11:7"}]}}]},"documentation":{"id":1420,"nodeType":"StructuredDocumentation","src":"2042:157:7","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":1500,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2213:7:7","nodeType":"FunctionDefinition","parameters":{"id":1426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1423,"mutability":"mutable","name":"set","nameLocation":"2233:3:7","nodeType":"VariableDeclaration","scope":1500,"src":"2221:15:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":1422,"nodeType":"UserDefinedTypeName","pathNode":{"id":1421,"name":"Set","nameLocations":["2221:3:7"],"nodeType":"IdentifierPath","referencedDeclaration":1377,"src":"2221:3:7"},"referencedDeclaration":1377,"src":"2221:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":1425,"mutability":"mutable","name":"value","nameLocation":"2246:5:7","nodeType":"VariableDeclaration","scope":1500,"src":"2238:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2238:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2220:32:7"},"returnParameters":{"id":1429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1428,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1500,"src":"2270:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1427,"name":"bool","nodeType":"ElementaryTypeName","src":"2270:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2269:6:7"},"scope":1881,"src":"2204:1512:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1518,"nodeType":"Block","src":"3876:48:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":1511,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"3893:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1512,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3897:8:7","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":1376,"src":"3893:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1514,"indexExpression":{"id":1513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"3906:5:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3893:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3916:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3893:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1510,"id":1517,"nodeType":"Return","src":"3886:31:7"}]},"documentation":{"id":1501,"nodeType":"StructuredDocumentation","src":"3722:70:7","text":" @dev Returns true if the value is in the set. O(1)."},"id":1519,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"3806:9:7","nodeType":"FunctionDefinition","parameters":{"id":1507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1504,"mutability":"mutable","name":"set","nameLocation":"3828:3:7","nodeType":"VariableDeclaration","scope":1519,"src":"3816:15:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":1503,"nodeType":"UserDefinedTypeName","pathNode":{"id":1502,"name":"Set","nameLocations":["3816:3:7"],"nodeType":"IdentifierPath","referencedDeclaration":1377,"src":"3816:3:7"},"referencedDeclaration":1377,"src":"3816:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":1506,"mutability":"mutable","name":"value","nameLocation":"3841:5:7","nodeType":"VariableDeclaration","scope":1519,"src":"3833:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1505,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3833:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3815:32:7"},"returnParameters":{"id":1510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1509,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1519,"src":"3870:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1508,"name":"bool","nodeType":"ElementaryTypeName","src":"3870:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3869:6:7"},"scope":1881,"src":"3797:127:7","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1532,"nodeType":"Block","src":"4070:42:7","statements":[{"expression":{"expression":{"expression":{"id":1528,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"4087:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1529,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4091:7:7","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"4087:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4099:6:7","memberName":"length","nodeType":"MemberAccess","src":"4087:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1527,"id":1531,"nodeType":"Return","src":"4080:25:7"}]},"documentation":{"id":1520,"nodeType":"StructuredDocumentation","src":"3930:70:7","text":" @dev Returns the number of values on the set. O(1)."},"id":1533,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4014:7:7","nodeType":"FunctionDefinition","parameters":{"id":1524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1523,"mutability":"mutable","name":"set","nameLocation":"4034:3:7","nodeType":"VariableDeclaration","scope":1533,"src":"4022:15:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":1522,"nodeType":"UserDefinedTypeName","pathNode":{"id":1521,"name":"Set","nameLocations":["4022:3:7"],"nodeType":"IdentifierPath","referencedDeclaration":1377,"src":"4022:3:7"},"referencedDeclaration":1377,"src":"4022:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4021:17:7"},"returnParameters":{"id":1527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1526,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1533,"src":"4061:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1525,"name":"uint256","nodeType":"ElementaryTypeName","src":"4061:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4060:9:7"},"scope":1881,"src":"4005:107:7","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1558,"nodeType":"Block","src":"4520:125:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1545,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"4538:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1546,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4542:7:7","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"4538:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4550:6:7","memberName":"length","nodeType":"MemberAccess","src":"4538:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1548,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"4559:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4538:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473","id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4566:36:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb","typeString":"literal_string \"EnumerableSet: index out of bounds\""},"value":"EnumerableSet: index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb","typeString":"literal_string \"EnumerableSet: index out of bounds\""}],"id":1544,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4530:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4530:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1552,"nodeType":"ExpressionStatement","src":"4530:73:7"},{"expression":{"baseExpression":{"expression":{"id":1553,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"4620:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":1554,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4624:7:7","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"4620:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":1556,"indexExpression":{"id":1555,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"4632:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4620:18:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1543,"id":1557,"nodeType":"Return","src":"4613:25:7"}]},"documentation":{"id":1534,"nodeType":"StructuredDocumentation","src":"4117:322:7","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":1559,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4453:3:7","nodeType":"FunctionDefinition","parameters":{"id":1540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1537,"mutability":"mutable","name":"set","nameLocation":"4469:3:7","nodeType":"VariableDeclaration","scope":1559,"src":"4457:15:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":1536,"nodeType":"UserDefinedTypeName","pathNode":{"id":1535,"name":"Set","nameLocations":["4457:3:7"],"nodeType":"IdentifierPath","referencedDeclaration":1377,"src":"4457:3:7"},"referencedDeclaration":1377,"src":"4457:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":1539,"mutability":"mutable","name":"index","nameLocation":"4482:5:7","nodeType":"VariableDeclaration","scope":1559,"src":"4474:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1538,"name":"uint256","nodeType":"ElementaryTypeName","src":"4474:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:32:7"},"returnParameters":{"id":1543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1559,"src":"4511:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1541,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4511:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4510:9:7"},"scope":1881,"src":"4444:201:7","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":1563,"members":[{"constant":false,"id":1562,"mutability":"mutable","name":"_inner","nameLocation":"4702:6:7","nodeType":"VariableDeclaration","scope":1563,"src":"4698:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":1561,"nodeType":"UserDefinedTypeName","pathNode":{"id":1560,"name":"Set","nameLocations":["4698:3:7"],"nodeType":"IdentifierPath","referencedDeclaration":1377,"src":"4698:3:7"},"referencedDeclaration":1377,"src":"4698:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"4677:10:7","nodeType":"StructDefinition","scope":1881,"src":"4670:45:7","visibility":"public"},{"body":{"id":1580,"nodeType":"Block","src":"4961:47:7","statements":[{"expression":{"arguments":[{"expression":{"id":1575,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"4983:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":1576,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4987:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1562,"src":"4983:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":1577,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"4995:5:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1574,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"4978:4:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1377_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4978:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1573,"id":1579,"nodeType":"Return","src":"4971:30:7"}]},"documentation":{"id":1564,"nodeType":"StructuredDocumentation","src":"4721:159:7","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":1581,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"4894:3:7","nodeType":"FunctionDefinition","parameters":{"id":1570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1567,"mutability":"mutable","name":"set","nameLocation":"4917:3:7","nodeType":"VariableDeclaration","scope":1581,"src":"4898:22:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":1566,"nodeType":"UserDefinedTypeName","pathNode":{"id":1565,"name":"Bytes32Set","nameLocations":["4898:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":1563,"src":"4898:10:7"},"referencedDeclaration":1563,"src":"4898:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":1569,"mutability":"mutable","name":"value","nameLocation":"4930:5:7","nodeType":"VariableDeclaration","scope":1581,"src":"4922:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4922:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4897:39:7"},"returnParameters":{"id":1573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1581,"src":"4955:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1571,"name":"bool","nodeType":"ElementaryTypeName","src":"4955:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4954:6:7"},"scope":1881,"src":"4885:123:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1598,"nodeType":"Block","src":"5255:50:7","statements":[{"expression":{"arguments":[{"expression":{"id":1593,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"5280:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":1594,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5284:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1562,"src":"5280:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":1595,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"5292:5:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1592,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"5272:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1377_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5272:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1591,"id":1597,"nodeType":"Return","src":"5265:33:7"}]},"documentation":{"id":1582,"nodeType":"StructuredDocumentation","src":"5014:157:7","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":1599,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"5185:6:7","nodeType":"FunctionDefinition","parameters":{"id":1588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1585,"mutability":"mutable","name":"set","nameLocation":"5211:3:7","nodeType":"VariableDeclaration","scope":1599,"src":"5192:22:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":1584,"nodeType":"UserDefinedTypeName","pathNode":{"id":1583,"name":"Bytes32Set","nameLocations":["5192:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":1563,"src":"5192:10:7"},"referencedDeclaration":1563,"src":"5192:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":1587,"mutability":"mutable","name":"value","nameLocation":"5224:5:7","nodeType":"VariableDeclaration","scope":1599,"src":"5216:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1586,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5216:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5191:39:7"},"returnParameters":{"id":1591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1599,"src":"5249:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1589,"name":"bool","nodeType":"ElementaryTypeName","src":"5249:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5248:6:7"},"scope":1881,"src":"5176:129:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1616,"nodeType":"Block","src":"5472:52:7","statements":[{"expression":{"arguments":[{"expression":{"id":1611,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"5499:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":1612,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5503:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1562,"src":"5499:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":1613,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"5511:5:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1610,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"5489:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1377_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5489:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1609,"id":1615,"nodeType":"Return","src":"5482:35:7"}]},"documentation":{"id":1600,"nodeType":"StructuredDocumentation","src":"5311:70:7","text":" @dev Returns true if the value is in the set. O(1)."},"id":1617,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"5395:8:7","nodeType":"FunctionDefinition","parameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1603,"mutability":"mutable","name":"set","nameLocation":"5423:3:7","nodeType":"VariableDeclaration","scope":1617,"src":"5404:22:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":1602,"nodeType":"UserDefinedTypeName","pathNode":{"id":1601,"name":"Bytes32Set","nameLocations":["5404:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":1563,"src":"5404:10:7"},"referencedDeclaration":1563,"src":"5404:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":1605,"mutability":"mutable","name":"value","nameLocation":"5436:5:7","nodeType":"VariableDeclaration","scope":1617,"src":"5428:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1604,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5428:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5403:39:7"},"returnParameters":{"id":1609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1608,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1617,"src":"5466:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1607,"name":"bool","nodeType":"ElementaryTypeName","src":"5466:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5465:6:7"},"scope":1881,"src":"5386:138:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1631,"nodeType":"Block","src":"5677:43:7","statements":[{"expression":{"arguments":[{"expression":{"id":1627,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"5702:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":1628,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5706:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1562,"src":"5702:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":1626,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"5694:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1377_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5694:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1625,"id":1630,"nodeType":"Return","src":"5687:26:7"}]},"documentation":{"id":1618,"nodeType":"StructuredDocumentation","src":"5530:70:7","text":" @dev Returns the number of values in the set. O(1)."},"id":1632,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"5614:6:7","nodeType":"FunctionDefinition","parameters":{"id":1622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"set","nameLocation":"5640:3:7","nodeType":"VariableDeclaration","scope":1632,"src":"5621:22:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":1620,"nodeType":"UserDefinedTypeName","pathNode":{"id":1619,"name":"Bytes32Set","nameLocations":["5621:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":1563,"src":"5621:10:7"},"referencedDeclaration":1563,"src":"5621:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"5620:24:7"},"returnParameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1624,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1632,"src":"5668:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint256","nodeType":"ElementaryTypeName","src":"5668:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5667:9:7"},"scope":1881,"src":"5605:115:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1649,"nodeType":"Block","src":"6135:46:7","statements":[{"expression":{"arguments":[{"expression":{"id":1644,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"6156:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":1645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6160:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1562,"src":"6156:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":1646,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"6168:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1643,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"6152:3:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1377_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6152:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1642,"id":1648,"nodeType":"Return","src":"6145:29:7"}]},"documentation":{"id":1633,"nodeType":"StructuredDocumentation","src":"5725:322:7","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":1650,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"6061:2:7","nodeType":"FunctionDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1636,"mutability":"mutable","name":"set","nameLocation":"6083:3:7","nodeType":"VariableDeclaration","scope":1650,"src":"6064:22:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":1635,"nodeType":"UserDefinedTypeName","pathNode":{"id":1634,"name":"Bytes32Set","nameLocations":["6064:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":1563,"src":"6064:10:7"},"referencedDeclaration":1563,"src":"6064:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$1563_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":1638,"mutability":"mutable","name":"index","nameLocation":"6096:5:7","nodeType":"VariableDeclaration","scope":1650,"src":"6088:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1637,"name":"uint256","nodeType":"ElementaryTypeName","src":"6088:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6063:39:7"},"returnParameters":{"id":1642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1650,"src":"6126:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1640,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6126:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6125:9:7"},"scope":1881,"src":"6052:129:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":1654,"members":[{"constant":false,"id":1653,"mutability":"mutable","name":"_inner","nameLocation":"6238:6:7","nodeType":"VariableDeclaration","scope":1654,"src":"6234:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":1652,"nodeType":"UserDefinedTypeName","pathNode":{"id":1651,"name":"Set","nameLocations":["6234:3:7"],"nodeType":"IdentifierPath","referencedDeclaration":1377,"src":"6234:3:7"},"referencedDeclaration":1377,"src":"6234:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"6213:10:7","nodeType":"StructDefinition","scope":1881,"src":"6206:45:7","visibility":"public"},{"body":{"id":1680,"nodeType":"Block","src":"6497:74:7","statements":[{"expression":{"arguments":[{"expression":{"id":1666,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"6519:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":1667,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6523:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"6519:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":1674,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"6555:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6547:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1672,"name":"uint160","nodeType":"ElementaryTypeName","src":"6547:7:7","typeDescriptions":{}}},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6547:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6539:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1670,"name":"uint256","nodeType":"ElementaryTypeName","src":"6539:7:7","typeDescriptions":{}}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6539:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6531:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1668,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6531:7:7","typeDescriptions":{}}},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6531:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1665,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"6514:4:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1377_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6514:50:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1664,"id":1679,"nodeType":"Return","src":"6507:57:7"}]},"documentation":{"id":1655,"nodeType":"StructuredDocumentation","src":"6257:159:7","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":1681,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"6430:3:7","nodeType":"FunctionDefinition","parameters":{"id":1661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1658,"mutability":"mutable","name":"set","nameLocation":"6453:3:7","nodeType":"VariableDeclaration","scope":1681,"src":"6434:22:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":1657,"nodeType":"UserDefinedTypeName","pathNode":{"id":1656,"name":"AddressSet","nameLocations":["6434:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":1654,"src":"6434:10:7"},"referencedDeclaration":1654,"src":"6434:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":1660,"mutability":"mutable","name":"value","nameLocation":"6466:5:7","nodeType":"VariableDeclaration","scope":1681,"src":"6458:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1659,"name":"address","nodeType":"ElementaryTypeName","src":"6458:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6433:39:7"},"returnParameters":{"id":1664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1663,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1681,"src":"6491:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1662,"name":"bool","nodeType":"ElementaryTypeName","src":"6491:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6490:6:7"},"scope":1881,"src":"6421:150:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1707,"nodeType":"Block","src":"6818:77:7","statements":[{"expression":{"arguments":[{"expression":{"id":1693,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"6843:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":1694,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6847:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"6843:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":1701,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"6879:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6871:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1699,"name":"uint160","nodeType":"ElementaryTypeName","src":"6871:7:7","typeDescriptions":{}}},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6871:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6863:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1697,"name":"uint256","nodeType":"ElementaryTypeName","src":"6863:7:7","typeDescriptions":{}}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6863:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1696,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6855:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1695,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6855:7:7","typeDescriptions":{}}},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6855:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1692,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"6835:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1377_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6835:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1691,"id":1706,"nodeType":"Return","src":"6828:60:7"}]},"documentation":{"id":1682,"nodeType":"StructuredDocumentation","src":"6577:157:7","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":1708,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6748:6:7","nodeType":"FunctionDefinition","parameters":{"id":1688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1685,"mutability":"mutable","name":"set","nameLocation":"6774:3:7","nodeType":"VariableDeclaration","scope":1708,"src":"6755:22:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":1684,"nodeType":"UserDefinedTypeName","pathNode":{"id":1683,"name":"AddressSet","nameLocations":["6755:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":1654,"src":"6755:10:7"},"referencedDeclaration":1654,"src":"6755:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":1687,"mutability":"mutable","name":"value","nameLocation":"6787:5:7","nodeType":"VariableDeclaration","scope":1708,"src":"6779:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1686,"name":"address","nodeType":"ElementaryTypeName","src":"6779:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6754:39:7"},"returnParameters":{"id":1691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1690,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1708,"src":"6812:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1689,"name":"bool","nodeType":"ElementaryTypeName","src":"6812:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6811:6:7"},"scope":1881,"src":"6739:156:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1734,"nodeType":"Block","src":"7062:79:7","statements":[{"expression":{"arguments":[{"expression":{"id":1720,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"7089:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":1721,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7093:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"7089:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":1728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"7125:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1727,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7117:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1726,"name":"uint160","nodeType":"ElementaryTypeName","src":"7117:7:7","typeDescriptions":{}}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7117:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7109:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1724,"name":"uint256","nodeType":"ElementaryTypeName","src":"7109:7:7","typeDescriptions":{}}},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7109:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7101:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7101:7:7","typeDescriptions":{}}},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7101:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1719,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"7079:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1377_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7079:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1718,"id":1733,"nodeType":"Return","src":"7072:62:7"}]},"documentation":{"id":1709,"nodeType":"StructuredDocumentation","src":"6901:70:7","text":" @dev Returns true if the value is in the set. O(1)."},"id":1735,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6985:8:7","nodeType":"FunctionDefinition","parameters":{"id":1715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1712,"mutability":"mutable","name":"set","nameLocation":"7013:3:7","nodeType":"VariableDeclaration","scope":1735,"src":"6994:22:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":1711,"nodeType":"UserDefinedTypeName","pathNode":{"id":1710,"name":"AddressSet","nameLocations":["6994:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":1654,"src":"6994:10:7"},"referencedDeclaration":1654,"src":"6994:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":1714,"mutability":"mutable","name":"value","nameLocation":"7026:5:7","nodeType":"VariableDeclaration","scope":1735,"src":"7018:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1713,"name":"address","nodeType":"ElementaryTypeName","src":"7018:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6993:39:7"},"returnParameters":{"id":1718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1717,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1735,"src":"7056:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1716,"name":"bool","nodeType":"ElementaryTypeName","src":"7056:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7055:6:7"},"scope":1881,"src":"6976:165:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1749,"nodeType":"Block","src":"7294:43:7","statements":[{"expression":{"arguments":[{"expression":{"id":1745,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"7319:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":1746,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7323:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"7319:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":1744,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"7311:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1377_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7311:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1743,"id":1748,"nodeType":"Return","src":"7304:26:7"}]},"documentation":{"id":1736,"nodeType":"StructuredDocumentation","src":"7147:70:7","text":" @dev Returns the number of values in the set. O(1)."},"id":1750,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"7231:6:7","nodeType":"FunctionDefinition","parameters":{"id":1740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1739,"mutability":"mutable","name":"set","nameLocation":"7257:3:7","nodeType":"VariableDeclaration","scope":1750,"src":"7238:22:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":1738,"nodeType":"UserDefinedTypeName","pathNode":{"id":1737,"name":"AddressSet","nameLocations":["7238:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":1654,"src":"7238:10:7"},"referencedDeclaration":1654,"src":"7238:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"7237:24:7"},"returnParameters":{"id":1743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1750,"src":"7285:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1741,"name":"uint256","nodeType":"ElementaryTypeName","src":"7285:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7284:9:7"},"scope":1881,"src":"7222:115:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1776,"nodeType":"Block","src":"7752:73:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":1768,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"7797:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":1769,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7801:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"7797:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":1770,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"7809:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1767,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"7793:3:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1377_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7793:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7785:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1765,"name":"uint256","nodeType":"ElementaryTypeName","src":"7785:7:7","typeDescriptions":{}}},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7785:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7777:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1763,"name":"uint160","nodeType":"ElementaryTypeName","src":"7777:7:7","typeDescriptions":{}}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7777:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1762,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7769:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1761,"name":"address","nodeType":"ElementaryTypeName","src":"7769:7:7","typeDescriptions":{}}},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7769:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1760,"id":1775,"nodeType":"Return","src":"7762:56:7"}]},"documentation":{"id":1751,"nodeType":"StructuredDocumentation","src":"7342:322:7","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":1777,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7678:2:7","nodeType":"FunctionDefinition","parameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1754,"mutability":"mutable","name":"set","nameLocation":"7700:3:7","nodeType":"VariableDeclaration","scope":1777,"src":"7681:22:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":1753,"nodeType":"UserDefinedTypeName","pathNode":{"id":1752,"name":"AddressSet","nameLocations":["7681:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":1654,"src":"7681:10:7"},"referencedDeclaration":1654,"src":"7681:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$1654_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":1756,"mutability":"mutable","name":"index","nameLocation":"7713:5:7","nodeType":"VariableDeclaration","scope":1777,"src":"7705:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1755,"name":"uint256","nodeType":"ElementaryTypeName","src":"7705:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7680:39:7"},"returnParameters":{"id":1760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1759,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1777,"src":"7743:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1758,"name":"address","nodeType":"ElementaryTypeName","src":"7743:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7742:9:7"},"scope":1881,"src":"7669:156:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":1781,"members":[{"constant":false,"id":1780,"mutability":"mutable","name":"_inner","nameLocation":"7877:6:7","nodeType":"VariableDeclaration","scope":1781,"src":"7873:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":1779,"nodeType":"UserDefinedTypeName","pathNode":{"id":1778,"name":"Set","nameLocations":["7873:3:7"],"nodeType":"IdentifierPath","referencedDeclaration":1377,"src":"7873:3:7"},"referencedDeclaration":1377,"src":"7873:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"7855:7:7","nodeType":"StructDefinition","scope":1881,"src":"7848:42:7","visibility":"public"},{"body":{"id":1801,"nodeType":"Block","src":"8133:56:7","statements":[{"expression":{"arguments":[{"expression":{"id":1793,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"8155:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":1794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8159:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1780,"src":"8155:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":1797,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"8175:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8167:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1795,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8167:7:7","typeDescriptions":{}}},"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8167:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1792,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"8150:4:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1377_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8150:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1791,"id":1800,"nodeType":"Return","src":"8143:39:7"}]},"documentation":{"id":1782,"nodeType":"StructuredDocumentation","src":"7896:159:7","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":1802,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8069:3:7","nodeType":"FunctionDefinition","parameters":{"id":1788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1785,"mutability":"mutable","name":"set","nameLocation":"8089:3:7","nodeType":"VariableDeclaration","scope":1802,"src":"8073:19:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":1784,"nodeType":"UserDefinedTypeName","pathNode":{"id":1783,"name":"UintSet","nameLocations":["8073:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1781,"src":"8073:7:7"},"referencedDeclaration":1781,"src":"8073:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":1787,"mutability":"mutable","name":"value","nameLocation":"8102:5:7","nodeType":"VariableDeclaration","scope":1802,"src":"8094:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1786,"name":"uint256","nodeType":"ElementaryTypeName","src":"8094:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8072:36:7"},"returnParameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1790,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1802,"src":"8127:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1789,"name":"bool","nodeType":"ElementaryTypeName","src":"8127:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8126:6:7"},"scope":1881,"src":"8060:129:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1822,"nodeType":"Block","src":"8433:59:7","statements":[{"expression":{"arguments":[{"expression":{"id":1814,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"8458:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":1815,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8462:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1780,"src":"8458:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":1818,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"8478:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8470:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1816,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8470:7:7","typeDescriptions":{}}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8470:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1813,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"8450:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1377_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8450:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1812,"id":1821,"nodeType":"Return","src":"8443:42:7"}]},"documentation":{"id":1803,"nodeType":"StructuredDocumentation","src":"8195:157:7","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":1823,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8366:6:7","nodeType":"FunctionDefinition","parameters":{"id":1809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"set","nameLocation":"8389:3:7","nodeType":"VariableDeclaration","scope":1823,"src":"8373:19:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":1805,"nodeType":"UserDefinedTypeName","pathNode":{"id":1804,"name":"UintSet","nameLocations":["8373:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1781,"src":"8373:7:7"},"referencedDeclaration":1781,"src":"8373:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":1808,"mutability":"mutable","name":"value","nameLocation":"8402:5:7","nodeType":"VariableDeclaration","scope":1823,"src":"8394:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1807,"name":"uint256","nodeType":"ElementaryTypeName","src":"8394:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8372:36:7"},"returnParameters":{"id":1812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1823,"src":"8427:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1810,"name":"bool","nodeType":"ElementaryTypeName","src":"8427:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8426:6:7"},"scope":1881,"src":"8357:135:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1843,"nodeType":"Block","src":"8656:61:7","statements":[{"expression":{"arguments":[{"expression":{"id":1835,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"8683:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":1836,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8687:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1780,"src":"8683:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":1839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"8703:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8695:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1837,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8695:7:7","typeDescriptions":{}}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8695:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1834,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"8673:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1377_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8673:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1833,"id":1842,"nodeType":"Return","src":"8666:44:7"}]},"documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"8498:70:7","text":" @dev Returns true if the value is in the set. O(1)."},"id":1844,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8582:8:7","nodeType":"FunctionDefinition","parameters":{"id":1830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1827,"mutability":"mutable","name":"set","nameLocation":"8607:3:7","nodeType":"VariableDeclaration","scope":1844,"src":"8591:19:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":1826,"nodeType":"UserDefinedTypeName","pathNode":{"id":1825,"name":"UintSet","nameLocations":["8591:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1781,"src":"8591:7:7"},"referencedDeclaration":1781,"src":"8591:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":1829,"mutability":"mutable","name":"value","nameLocation":"8620:5:7","nodeType":"VariableDeclaration","scope":1844,"src":"8612:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1828,"name":"uint256","nodeType":"ElementaryTypeName","src":"8612:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8590:36:7"},"returnParameters":{"id":1833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1844,"src":"8650:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1831,"name":"bool","nodeType":"ElementaryTypeName","src":"8650:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8649:6:7"},"scope":1881,"src":"8573:144:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1858,"nodeType":"Block","src":"8867:43:7","statements":[{"expression":{"arguments":[{"expression":{"id":1854,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"8892:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":1855,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8896:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1780,"src":"8892:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":1853,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"8884:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1377_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8884:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1852,"id":1857,"nodeType":"Return","src":"8877:26:7"}]},"documentation":{"id":1845,"nodeType":"StructuredDocumentation","src":"8723:70:7","text":" @dev Returns the number of values on the set. O(1)."},"id":1859,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"8807:6:7","nodeType":"FunctionDefinition","parameters":{"id":1849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1848,"mutability":"mutable","name":"set","nameLocation":"8830:3:7","nodeType":"VariableDeclaration","scope":1859,"src":"8814:19:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":1847,"nodeType":"UserDefinedTypeName","pathNode":{"id":1846,"name":"UintSet","nameLocations":["8814:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1781,"src":"8814:7:7"},"referencedDeclaration":1781,"src":"8814:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"8813:21:7"},"returnParameters":{"id":1852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1859,"src":"8858:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1850,"name":"uint256","nodeType":"ElementaryTypeName","src":"8858:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8857:9:7"},"scope":1881,"src":"8798:112:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1879,"nodeType":"Block","src":"9322:55:7","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":1873,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"9351:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":1874,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9355:6:7","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":1780,"src":"9351:10:7","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":1875,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"9363:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1377_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1872,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"9347:3:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1377_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9347:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9339:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"9339:7:7","typeDescriptions":{}}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9339:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1869,"id":1878,"nodeType":"Return","src":"9332:38:7"}]},"documentation":{"id":1860,"nodeType":"StructuredDocumentation","src":"8915:322:7","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":1880,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9251:2:7","nodeType":"FunctionDefinition","parameters":{"id":1866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1863,"mutability":"mutable","name":"set","nameLocation":"9270:3:7","nodeType":"VariableDeclaration","scope":1880,"src":"9254:19:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":1862,"nodeType":"UserDefinedTypeName","pathNode":{"id":1861,"name":"UintSet","nameLocations":["9254:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1781,"src":"9254:7:7"},"referencedDeclaration":1781,"src":"9254:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$1781_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":1865,"mutability":"mutable","name":"index","nameLocation":"9283:5:7","nodeType":"VariableDeclaration","scope":1880,"src":"9275:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1864,"name":"uint256","nodeType":"ElementaryTypeName","src":"9275:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9253:36:7"},"returnParameters":{"id":1869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1868,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1880,"src":"9313:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1867,"name":"uint256","nodeType":"ElementaryTypeName","src":"9313:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9312:9:7"},"scope":1881,"src":"9242:135:7","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1882,"src":"745:8634:7","usedErrors":[],"usedEvents":[]}],"src":"33:9347:7"},"id":7},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[1921]},"id":1922,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1883,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:8"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":1884,"nodeType":"StructuredDocumentation","src":"58:750:8","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":1921,"linearizedBaseContracts":[1921],"name":"ReentrancyGuard","nameLocation":"827:15:8","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1887,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1622:12:8","nodeType":"VariableDeclaration","scope":1921,"src":"1597:41:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1885,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1637:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1890,"mutability":"constant","name":"_ENTERED","nameLocation":"1669:8:8","nodeType":"VariableDeclaration","scope":1921,"src":"1644:37:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1888,"name":"uint256","nodeType":"ElementaryTypeName","src":"1644:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1680:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":1892,"mutability":"mutable","name":"_status","nameLocation":"1704:7:8","nodeType":"VariableDeclaration","scope":1921,"src":"1688:23:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1891,"name":"uint256","nodeType":"ElementaryTypeName","src":"1688:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":1899,"nodeType":"Block","src":"1733:39:8","statements":[{"expression":{"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1895,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"1743:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1896,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"1753:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1743:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1898,"nodeType":"ExpressionStatement","src":"1743:22:8"}]},"id":1900,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1893,"nodeType":"ParameterList","parameters":[],"src":"1730:2:8"},"returnParameters":{"id":1894,"nodeType":"ParameterList","parameters":[],"src":"1733:0:8"},"scope":1921,"src":"1718:54:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1919,"nodeType":"Block","src":"2171:421:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1904,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"2260:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1905,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"2271:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2260:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":1907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2281:33:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":1903,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2252:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2252:63:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1909,"nodeType":"ExpressionStatement","src":"2252:63:8"},{"expression":{"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1910,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"2390:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1911,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"2400:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2390:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1913,"nodeType":"ExpressionStatement","src":"2390:18:8"},{"id":1914,"nodeType":"PlaceholderStatement","src":"2419:1:8"},{"expression":{"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1915,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"2563:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1916,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"2573:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2563:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1918,"nodeType":"ExpressionStatement","src":"2563:22:8"}]},"documentation":{"id":1901,"nodeType":"StructuredDocumentation","src":"1778:364:8","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."},"id":1920,"name":"nonReentrant","nameLocation":"2156:12:8","nodeType":"ModifierDefinition","parameters":{"id":1902,"nodeType":"ParameterList","parameters":[],"src":"2168:2:8"},"src":"2147:445:8","virtual":false,"visibility":"internal"}],"scope":1922,"src":"809:1785:8","usedErrors":[],"usedEvents":[]}],"src":"33:2562:8"},"id":8},"contracts/ReserveContract.sol":{"ast":{"absolutePath":"contracts/ReserveContract.sol","exportedSymbols":{"AccessControl":[285],"Address":[1343],"Context":[1366],"EnumerableSet":[1881],"IERC20":[828],"Ownable":[395],"ReentrancyGuard":[1921],"ReserveContract":[2172],"SafeERC20":[1047],"SafeMath":[750]},"id":2173,"license":"MIT LICENSE","nodeType":"SourceUnit","nodes":[{"id":1923,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"43:24:9"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":1924,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2173,"sourceUnit":829,"src":"71:56:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","id":1925,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2173,"sourceUnit":1048,"src":"129:59:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/math/SafeMath.sol","file":"@openzeppelin/contracts/math/SafeMath.sol","id":1926,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2173,"sourceUnit":751,"src":"190:51:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1927,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2173,"sourceUnit":396,"src":"243:52:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":1928,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2173,"sourceUnit":1922,"src":"297:59:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":1929,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2173,"sourceUnit":286,"src":"358:58:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1930,"name":"Ownable","nameLocations":["448:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":395,"src":"448:7:9"},"id":1931,"nodeType":"InheritanceSpecifier","src":"448:7:9"},{"baseName":{"id":1932,"name":"ReentrancyGuard","nameLocations":["457:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":1921,"src":"457:15:9"},"id":1933,"nodeType":"InheritanceSpecifier","src":"457:15:9"},{"baseName":{"id":1934,"name":"AccessControl","nameLocations":["474:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":285,"src":"474:13:9"},"id":1935,"nodeType":"InheritanceSpecifier","src":"474:13:9"}],"canonicalName":"ReserveContract","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2172,"linearizedBaseContracts":[2172,285,1921,395,1366],"name":"ReserveContract","nameLocation":"429:15:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1938,"libraryName":{"id":1936,"name":"SafeMath","nameLocations":["501:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":750,"src":"501:8:9"},"nodeType":"UsingForDirective","src":"495:27:9","typeName":{"id":1937,"name":"uint256","nodeType":"ElementaryTypeName","src":"514:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":false,"id":1942,"libraryName":{"id":1939,"name":"SafeERC20","nameLocations":["534:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":1047,"src":"534:9:9"},"nodeType":"UsingForDirective","src":"528:27:9","typeName":{"id":1941,"nodeType":"UserDefinedTypeName","pathNode":{"id":1940,"name":"IERC20","nameLocations":["548:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"548:6:9"},"referencedDeclaration":828,"src":"548:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}}},{"constant":false,"functionSelector":"5306f102","id":1944,"mutability":"mutable","name":"currentReserveId","nameLocation":"578:16:9","nodeType":"VariableDeclaration","scope":2172,"src":"563:31:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1943,"name":"uint256","nodeType":"ElementaryTypeName","src":"563:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"canonicalName":"ReserveContract.ReserveVault","id":1950,"members":[{"constant":false,"id":1947,"mutability":"mutable","name":"collateral","nameLocation":"641:10:9","nodeType":"VariableDeclaration","scope":1950,"src":"634:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"typeName":{"id":1946,"nodeType":"UserDefinedTypeName","pathNode":{"id":1945,"name":"IERC20","nameLocations":["634:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"634:6:9"},"referencedDeclaration":828,"src":"634:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1949,"mutability":"mutable","name":"amount","nameLocation":"670:6:9","nodeType":"VariableDeclaration","scope":1950,"src":"662:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1948,"name":"uint256","nodeType":"ElementaryTypeName","src":"662:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ReserveVault","nameLocation":"610:12:9","nodeType":"StructDefinition","scope":2172,"src":"603:81:9","visibility":"public"},{"constant":false,"functionSelector":"279ba28d","id":1955,"mutability":"mutable","name":"_rsvVault","nameLocation":"732:9:9","nodeType":"VariableDeclaration","scope":2172,"src":"692:49:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ReserveVault_$1950_storage_$","typeString":"mapping(uint256 => struct ReserveContract.ReserveVault)"},"typeName":{"id":1954,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1951,"name":"uint256","nodeType":"ElementaryTypeName","src":"700:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"692:32:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ReserveVault_$1950_storage_$","typeString":"mapping(uint256 => struct ReserveContract.ReserveVault)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1953,"nodeType":"UserDefinedTypeName","pathNode":{"id":1952,"name":"ReserveVault","nameLocations":["711:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"711:12:9"},"referencedDeclaration":1950,"src":"711:12:9","typeDescriptions":{"typeIdentifier":"t_struct$_ReserveVault_$1950_storage_ptr","typeString":"struct ReserveContract.ReserveVault"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8","id":1961,"name":"Withdraw","nameLocation":"756:8:9","nodeType":"EventDefinition","parameters":{"id":1960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1957,"indexed":true,"mutability":"mutable","name":"vid","nameLocation":"781:3:9","nodeType":"VariableDeclaration","scope":1961,"src":"765:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1956,"name":"uint256","nodeType":"ElementaryTypeName","src":"765:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1959,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"794:6:9","nodeType":"VariableDeclaration","scope":1961,"src":"786:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1958,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"764:37:9"},"src":"750:52:9"},{"anonymous":false,"eventSelector":"e2bbb158ea830e9efa91fa2a38c9708f9f6109a6c571d6a762b53a83776a3d67","id":1967,"name":"deposit","nameLocation":"814:7:9","nodeType":"EventDefinition","parameters":{"id":1966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"indexed":true,"mutability":"mutable","name":"vid","nameLocation":"838:3:9","nodeType":"VariableDeclaration","scope":1967,"src":"822:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1962,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1965,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"851:6:9","nodeType":"VariableDeclaration","scope":1967,"src":"843:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1964,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:37:9"},"src":"808:51:9"},{"constant":true,"functionSelector":"ec87621c","id":1972,"mutability":"constant","name":"MANAGER_ROLE","nameLocation":"891:12:9","nodeType":"VariableDeclaration","scope":2172,"src":"867:64:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1968,"name":"bytes32","nodeType":"ElementaryTypeName","src":"867:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d414e414745525f524f4c45","id":1970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"916:14:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08","typeString":"literal_string \"MANAGER_ROLE\""},"value":"MANAGER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08","typeString":"literal_string \"MANAGER_ROLE\""}],"id":1969,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"906:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"906:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":1987,"nodeType":"Block","src":"954:112:9","statements":[{"expression":{"arguments":[{"id":1976,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"976:18:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1977,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"996:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"996:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1975,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"965:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"965:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1980,"nodeType":"ExpressionStatement","src":"965:44:9"},{"expression":{"arguments":[{"id":1982,"name":"MANAGER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"1031:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1983,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"1045:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1045:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1981,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"1020:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1986,"nodeType":"ExpressionStatement","src":"1020:38:9"}]},"id":1988,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1973,"nodeType":"ParameterList","parameters":[],"src":"951:2:9"},"returnParameters":{"id":1974,"nodeType":"ParameterList","parameters":[],"src":"954:0:9"},"scope":2172,"src":"940:126:9","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2015,"nodeType":"Block","src":"1138:220:9","statements":[{"body":{"id":2013,"nodeType":"Block","src":"1192:159:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2004,"name":"_rsvVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"1233:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ReserveVault_$1950_storage_$","typeString":"mapping(uint256 => struct ReserveContract.ReserveVault storage ref)"}},"id":2006,"indexExpression":{"id":2005,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"1243:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1233:12:9","typeDescriptions":{"typeIdentifier":"t_struct$_ReserveVault_$1950_storage","typeString":"struct ReserveContract.ReserveVault storage ref"}},"id":2007,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1246:10:9","memberName":"collateral","nodeType":"MemberAccess","referencedDeclaration":1947,"src":"1233:23:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2008,"name":"_collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"1260:11:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"src":"1233:38:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f6c6c61746572616c204164647265737320416c7265616479204164646564","id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1290:34:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0","typeString":"literal_string \"Collateral Address Already Added\""},"value":"Collateral Address Already Added"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0","typeString":"literal_string \"Collateral Address Already Added\""}],"id":2003,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1207:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1207:132:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2012,"nodeType":"ExpressionStatement","src":"1207:132:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1997,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"1165:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1998,"name":"currentReserveId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"1169:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1165:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2014,"initializationExpression":{"assignments":[1995],"declarations":[{"constant":false,"id":1995,"mutability":"mutable","name":"i","nameLocation":"1162:1:9","nodeType":"VariableDeclaration","scope":2014,"src":"1154:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1994,"name":"uint256","nodeType":"ElementaryTypeName","src":"1154:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1996,"nodeType":"VariableDeclarationStatement","src":"1154:9:9"},"loopExpression":{"expression":{"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1187:3:9","subExpression":{"id":2000,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"1187:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2002,"nodeType":"ExpressionStatement","src":"1187:3:9"},"nodeType":"ForStatement","src":"1149:202:9"}]},"id":2016,"implemented":true,"kind":"function","modifiers":[],"name":"checkReserveContract","nameLocation":"1083:20:9","nodeType":"FunctionDefinition","parameters":{"id":1992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1991,"mutability":"mutable","name":"_collateral","nameLocation":"1111:11:9","nodeType":"VariableDeclaration","scope":2016,"src":"1104:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"typeName":{"id":1990,"nodeType":"UserDefinedTypeName","pathNode":{"id":1989,"name":"IERC20","nameLocations":["1104:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"1104:6:9"},"referencedDeclaration":828,"src":"1104:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"1103:20:9"},"returnParameters":{"id":1993,"nodeType":"ParameterList","parameters":[],"src":"1138:0:9"},"scope":2172,"src":"1074:284:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2045,"nodeType":"Block","src":"1420:214:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":2024,"name":"MANAGER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"1447:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2025,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"1461:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1461:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2023,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"1439:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1439:35:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420616c6c6f776564","id":2028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1476:13:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd","typeString":"literal_string \"Not allowed\""},"value":"Not allowed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd","typeString":"literal_string \"Not allowed\""}],"id":2022,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1431:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1431:59:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2030,"nodeType":"ExpressionStatement","src":"1431:59:9"},{"expression":{"arguments":[{"id":2032,"name":"_collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2019,"src":"1522:11:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}],"id":2031,"name":"checkReserveContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2016,"src":"1501:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20_$828_$returns$__$","typeString":"function (contract IERC20) view"}},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1501:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2034,"nodeType":"ExpressionStatement","src":"1501:33:9"},{"expression":{"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2035,"name":"_rsvVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"1545:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ReserveVault_$1950_storage_$","typeString":"mapping(uint256 => struct ReserveContract.ReserveVault storage ref)"}},"id":2037,"indexExpression":{"id":2036,"name":"currentReserveId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"1555:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1545:27:9","typeDescriptions":{"typeIdentifier":"t_struct$_ReserveVault_$1950_storage","typeString":"struct ReserveContract.ReserveVault storage ref"}},"id":2038,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1573:10:9","memberName":"collateral","nodeType":"MemberAccess","referencedDeclaration":1947,"src":"1545:38:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2039,"name":"_collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2019,"src":"1586:11:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"src":"1545:52:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"id":2041,"nodeType":"ExpressionStatement","src":"1545:52:9"},{"expression":{"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1608:18:9","subExpression":{"id":2042,"name":"currentReserveId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"1608:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2044,"nodeType":"ExpressionStatement","src":"1608:18:9"}]},"functionSelector":"3b61f098","id":2046,"implemented":true,"kind":"function","modifiers":[],"name":"addReserveVault","nameLocation":"1375:15:9","nodeType":"FunctionDefinition","parameters":{"id":2020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2019,"mutability":"mutable","name":"_collateral","nameLocation":"1398:11:9","nodeType":"VariableDeclaration","scope":2046,"src":"1391:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"typeName":{"id":2018,"nodeType":"UserDefinedTypeName","pathNode":{"id":2017,"name":"IERC20","nameLocations":["1391:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"1391:6:9"},"referencedDeclaration":828,"src":"1391:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"1390:20:9"},"returnParameters":{"id":2021,"nodeType":"ParameterList","parameters":[],"src":"1420:0:9"},"scope":2172,"src":"1366:268:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2107,"nodeType":"Block","src":"1707:376:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":2055,"name":"MANAGER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"1734:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2056,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"1748:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1748:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2054,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"1726:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1726:35:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420616c6c6f776564","id":2059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1763:13:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd","typeString":"literal_string \"Not allowed\""},"value":"Not allowed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd","typeString":"literal_string \"Not allowed\""}],"id":2053,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1718:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1718:59:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2061,"nodeType":"ExpressionStatement","src":"1718:59:9"},{"assignments":[2064],"declarations":[{"constant":false,"id":2064,"mutability":"mutable","name":"reserves","nameLocation":"1795:8:9","nodeType":"VariableDeclaration","scope":2107,"src":"1788:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"typeName":{"id":2063,"nodeType":"UserDefinedTypeName","pathNode":{"id":2062,"name":"IERC20","nameLocations":["1788:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"1788:6:9"},"referencedDeclaration":828,"src":"1788:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"visibility":"internal"}],"id":2069,"initialValue":{"expression":{"baseExpression":{"id":2065,"name":"_rsvVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"1806:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ReserveVault_$1950_storage_$","typeString":"mapping(uint256 => struct ReserveContract.ReserveVault storage ref)"}},"id":2067,"indexExpression":{"id":2066,"name":"vid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"1816:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1806:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_ReserveVault_$1950_storage","typeString":"struct ReserveContract.ReserveVault storage ref"}},"id":2068,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1821:10:9","memberName":"collateral","nodeType":"MemberAccess","referencedDeclaration":1947,"src":"1806:25:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"1788:43:9"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":2075,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1876:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1880:6:9","memberName":"sender","nodeType":"MemberAccess","src":"1876:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2074,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1868:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2073,"name":"address","nodeType":"ElementaryTypeName","src":"1868:7:9","typeDescriptions":{}}},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1868:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2080,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1897:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_ReserveContract_$2172","typeString":"contract ReserveContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ReserveContract_$2172","typeString":"contract ReserveContract"}],"id":2079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1889:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2078,"name":"address","nodeType":"ElementaryTypeName","src":"1889:7:9","typeDescriptions":{}}},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1889:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2082,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"1904:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2070,"name":"reserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"1842:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1851:16:9","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":889,"src":"1842:25:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$828_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$828_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2084,"nodeType":"ExpressionStatement","src":"1842:69:9"},{"assignments":[2086],"declarations":[{"constant":false,"id":2086,"mutability":"mutable","name":"currentVaultBalance","nameLocation":"1930:19:9","nodeType":"VariableDeclaration","scope":2107,"src":"1922:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2085,"name":"uint256","nodeType":"ElementaryTypeName","src":"1922:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2091,"initialValue":{"expression":{"baseExpression":{"id":2087,"name":"_rsvVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"1952:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ReserveVault_$1950_storage_$","typeString":"mapping(uint256 => struct ReserveContract.ReserveVault storage ref)"}},"id":2089,"indexExpression":{"id":2088,"name":"vid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"1962:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1952:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_ReserveVault_$1950_storage","typeString":"struct ReserveContract.ReserveVault storage ref"}},"id":2090,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1967:6:9","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":1949,"src":"1952:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1922:51:9"},{"expression":{"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2092,"name":"_rsvVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"1984:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ReserveVault_$1950_storage_$","typeString":"mapping(uint256 => struct ReserveContract.ReserveVault storage ref)"}},"id":2094,"indexExpression":{"id":2093,"name":"vid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"1994:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1984:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_ReserveVault_$1950_storage","typeString":"struct ReserveContract.ReserveVault storage ref"}},"id":2095,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1999:6:9","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":1949,"src":"1984:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2098,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"2032:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2096,"name":"currentVaultBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"2008:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2028:3:9","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":577,"src":"2008:23:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2008:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1984:55:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2101,"nodeType":"ExpressionStatement","src":"1984:55:9"},{"eventCall":{"arguments":[{"id":2103,"name":"vid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"2063:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2104,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"2068:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2102,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"2055:7:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2055:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2106,"nodeType":"EmitStatement","src":"2050:25:9"}]},"functionSelector":"ece13732","id":2108,"implemented":true,"kind":"function","modifiers":[],"name":"depositCollateral","nameLocation":"1651:17:9","nodeType":"FunctionDefinition","parameters":{"id":2051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2048,"mutability":"mutable","name":"vid","nameLocation":"1677:3:9","nodeType":"VariableDeclaration","scope":2108,"src":"1669:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2047,"name":"uint256","nodeType":"ElementaryTypeName","src":"1669:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2050,"mutability":"mutable","name":"amount","nameLocation":"1690:6:9","nodeType":"VariableDeclaration","scope":2108,"src":"1682:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2049,"name":"uint256","nodeType":"ElementaryTypeName","src":"1682:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1668:29:9"},"returnParameters":{"id":2052,"nodeType":"ParameterList","parameters":[],"src":"1707:0:9"},"scope":2172,"src":"1642:441:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2170,"nodeType":"Block","src":"2157:427:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":2117,"name":"MANAGER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"2184:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2118,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"2198:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2198:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2116,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"2176:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2176:35:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420616c6c6f776564","id":2121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2213:13:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd","typeString":"literal_string \"Not allowed\""},"value":"Not allowed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd","typeString":"literal_string \"Not allowed\""}],"id":2115,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2168:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2168:59:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2123,"nodeType":"ExpressionStatement","src":"2168:59:9"},{"assignments":[2126],"declarations":[{"constant":false,"id":2126,"mutability":"mutable","name":"reserves","nameLocation":"2245:8:9","nodeType":"VariableDeclaration","scope":2170,"src":"2238:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"},"typeName":{"id":2125,"nodeType":"UserDefinedTypeName","pathNode":{"id":2124,"name":"IERC20","nameLocations":["2238:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":828,"src":"2238:6:9"},"referencedDeclaration":828,"src":"2238:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"visibility":"internal"}],"id":2131,"initialValue":{"expression":{"baseExpression":{"id":2127,"name":"_rsvVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"2256:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ReserveVault_$1950_storage_$","typeString":"mapping(uint256 => struct ReserveContract.ReserveVault storage ref)"}},"id":2129,"indexExpression":{"id":2128,"name":"vid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"2266:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2256:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_ReserveVault_$1950_storage","typeString":"struct ReserveContract.ReserveVault storage ref"}},"id":2130,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2271:10:9","memberName":"collateral","nodeType":"MemberAccess","referencedDeclaration":1947,"src":"2256:25:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"2238:43:9"},{"assignments":[2133],"declarations":[{"constant":false,"id":2133,"mutability":"mutable","name":"currentVaultBalance","nameLocation":"2300:19:9","nodeType":"VariableDeclaration","scope":2170,"src":"2292:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2132,"name":"uint256","nodeType":"ElementaryTypeName","src":"2292:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2138,"initialValue":{"expression":{"baseExpression":{"id":2134,"name":"_rsvVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"2322:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ReserveVault_$1950_storage_$","typeString":"mapping(uint256 => struct ReserveContract.ReserveVault storage ref)"}},"id":2136,"indexExpression":{"id":2135,"name":"vid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"2332:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2322:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_ReserveVault_$1950_storage","typeString":"struct ReserveContract.ReserveVault storage ref"}},"id":2137,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2337:6:9","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":1949,"src":"2322:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2292:51:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2139,"name":"currentVaultBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"2358:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2140,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"2381:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2358:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2169,"nodeType":"IfStatement","src":"2354:223:9","trueBody":{"id":2168,"nodeType":"Block","src":"2389:188:9","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":2147,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2434:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:6:9","memberName":"sender","nodeType":"MemberAccess","src":"2434:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2426:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2145,"name":"address","nodeType":"ElementaryTypeName","src":"2426:7:9","typeDescriptions":{}}},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2426:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2150,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"2447:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2142,"name":"reserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"2404:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$828","typeString":"contract IERC20"}},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2413:12:9","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":863,"src":"2404:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$828_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$828_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2404:50:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2152,"nodeType":"ExpressionStatement","src":"2404:50:9"},{"expression":{"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2153,"name":"_rsvVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"2469:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ReserveVault_$1950_storage_$","typeString":"mapping(uint256 => struct ReserveContract.ReserveVault storage ref)"}},"id":2155,"indexExpression":{"id":2154,"name":"vid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"2479:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2469:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_ReserveVault_$1950_storage","typeString":"struct ReserveContract.ReserveVault storage ref"}},"id":2156,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2484:6:9","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":1949,"src":"2469:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2159,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"2517:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2157,"name":"currentVaultBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"2493:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2513:3:9","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":599,"src":"2493:23:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2469:55:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2162,"nodeType":"ExpressionStatement","src":"2469:55:9"},{"eventCall":{"arguments":[{"id":2164,"name":"vid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"2553:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2165,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"2558:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2163,"name":"Withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"2544:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2544:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2167,"nodeType":"EmitStatement","src":"2539:26:9"}]}}]},"functionSelector":"767a7b05","id":2171,"implemented":true,"kind":"function","modifiers":[],"name":"withdrawCollateral","nameLocation":"2100:18:9","nodeType":"FunctionDefinition","parameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2110,"mutability":"mutable","name":"vid","nameLocation":"2127:3:9","nodeType":"VariableDeclaration","scope":2171,"src":"2119:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2109,"name":"uint256","nodeType":"ElementaryTypeName","src":"2119:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2112,"mutability":"mutable","name":"amount","nameLocation":"2140:6:9","nodeType":"VariableDeclaration","scope":2171,"src":"2132:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2111,"name":"uint256","nodeType":"ElementaryTypeName","src":"2132:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2118:29:9"},"returnParameters":{"id":2114,"nodeType":"ParameterList","parameters":[],"src":"2157:0:9"},"scope":2172,"src":"2091:493:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2173,"src":"420:2167:9","usedErrors":[],"usedEvents":[37,46,55,299,1961,1967]}],"src":"43:2546:9"},"id":9}},"contracts":{"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e98c0d315f562a98d915414f948e041531138284dd633b4cdb0361a7172cd97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9c5342beaabc260ed2a9c31357dd1860d0957c8604fc1fdd638444d8f2d5e1fd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x71e0d1cc75b67306382e055b789b6d3ffe34a9e2e55380d3c9895a36a42229e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":25,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)20_storage)"}],"types":{"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_struct(RoleData)20_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)20_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)1654_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":1653,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)1377_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)20_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":17,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"members","offset":0,"slot":"0","type":"t_struct(AddressSet)1654_storage"},{"astId":19,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"2","type":"t_bytes32"}],"numberOfBytes":"96"},"t_struct(Set)1377_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":1372,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":1376,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9c5342beaabc260ed2a9c31357dd1860d0957c8604fc1fdd638444d8f2d5e1fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":293,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/math/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220582e45d7d508e193c7082106d0ab881d2d9b7d4480d9c9a1e855885ae18089bb64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0x2E GASLIMIT 0xD7 0xD5 ADDMOD 0xE1 SWAP4 0xC7 ADDMOD 0x21 MOD 0xD0 0xAB DUP9 SAR 0x2D SWAP12 PUSH30 0x4480D9C9A1E855885AE18089BB64736F6C63430008140033000000000000 ","sourceMap":"622:6594:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220582e45d7d508e193c7082106d0ab881d2d9b7d4480d9c9a1e855885ae18089bb64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0x2E GASLIMIT 0xD7 0xD5 ADDMOD 0xE1 SWAP4 0xC7 ADDMOD 0x21 MOD 0xD0 0xAB DUP9 SAR 0x2D SWAP12 PUSH30 0x4480D9C9A1E855885AE18089BB64736F6C63430008140033000000000000 ","sourceMap":"622:6594:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xeeffca030e47ae166c981ca8726784781ea5fc5835aa27d7006783194a7ed18c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122061860acdfdfa139036def32341ae45ac00f551421f6f76333d8d1ad98c6d06af64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x860A 0xCD REVERT STATICCALL SGT SWAP1 CALLDATASIZE 0xDE RETURN 0x23 COINBASE 0xAE GASLIMIT 0xAC STOP CREATE2 MLOAD TIMESTAMP 0x1F PUSH16 0x76333D8D1AD98C6D06AF64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"608:3104:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122061860acdfdfa139036def32341ae45ac00f551421f6f76333d8d1ad98c6d06af64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x860A 0xCD REVERT STATICCALL SGT SWAP1 CALLDATASIZE 0xDE RETURN 0x23 COINBASE 0xAE GASLIMIT 0xAC STOP CREATE2 MLOAD TIMESTAMP 0x1F PUSH16 0x76333D8D1AD98C6D06AF64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"608:3104:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xeeffca030e47ae166c981ca8726784781ea5fc5835aa27d7006783194a7ed18c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x171a9b614bed004394c8c004271abae184a961c0c3d4c345b5e24823e836c524\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f218842e2406d531b33399f63190e5c475ae34dd4234bc5c766a4e072878356764736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE XOR DUP5 0x2E 0x24 MOD 0xD5 BALANCE 0xB3 CALLER SWAP10 0xF6 BALANCE SWAP1 0xE5 0xC4 PUSH22 0xAE34DD4234BC5C766A4E072878356764736F6C634300 ADDMOD EQ STOP CALLER ","sourceMap":"126:7684:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f218842e2406d531b33399f63190e5c475ae34dd4234bc5c766a4e072878356764736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE XOR DUP5 0x2E 0x24 MOD 0xD5 BALANCE 0xB3 CALLER SWAP10 0xF6 BALANCE SWAP1 0xE5 0xC4 PUSH22 0xAE34DD4234BC5C766A4E072878356764736F6C634300 ADDMOD EQ STOP CALLER ","sourceMap":"126:7684:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_verifyCallResult(bool,bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9c5342beaabc260ed2a9c31357dd1860d0957c8604fc1fdd638444d8f2d5e1fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220beda6c71c23ee062b39f9634aa47d5f4330c51851d5bf57c1ee31c75eaf9df8064736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xDA PUSH13 0x71C23EE062B39F9634AA47D5F4 CALLER 0xC MLOAD DUP6 SAR JUMPDEST CREATE2 PUSH29 0x1EE31C75EAF9DF8064736F6C6343000814003300000000000000000000 ","sourceMap":"745:8634:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220beda6c71c23ee062b39f9634aa47d5f4330c51851d5bf57c1ee31c75eaf9df8064736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xDA PUSH13 0x71C23EE062B39F9634AA47D5F4 CALLER 0xC MLOAD DUP6 SAR JUMPDEST CREATE2 PUSH29 0x1EE31C75EAF9DF8064736F6C6343000814003300000000000000000000 ","sourceMap":"745:8634:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x71e0d1cc75b67306382e055b789b6d3ffe34a9e2e55380d3c9895a36a42229e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1892,"contract":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ReserveContract.sol":{"ReserveContract":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"vid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"vid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MANAGER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"_rsvVault","outputs":[{"internalType":"contract IERC20","name":"collateral","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"_collateral","type":"address"}],"name":"addReserveVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentReserveId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"vid","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"vid","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1900":{"entryPoint":null,"id":1900,"parameterSlots":0,"returnSlots":0},"@_1988":{"entryPoint":null,"id":1988,"parameterSlots":0,"returnSlots":0},"@_321":{"entryPoint":null,"id":321,"parameterSlots":0,"returnSlots":0},"@_add_1419":{"entryPoint":553,"id":1419,"parameterSlots":2,"returnSlots":1},"@_contains_1519":{"entryPoint":675,"id":1519,"parameterSlots":2,"returnSlots":1},"@_grantRole_260":{"entryPoint":338,"id":260,"parameterSlots":2,"returnSlots":0},"@_msgSender_1354":{"entryPoint":308,"id":1354,"parameterSlots":0,"returnSlots":1},"@_setupRole_211":{"entryPoint":316,"id":211,"parameterSlots":2,"returnSlots":0},"@add_1681":{"entryPoint":497,"id":1681,"parameterSlots":2,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH3 0x24 PUSH3 0x134 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP PUSH3 0xED PUSH1 0x0 DUP1 SHL PUSH3 0xE1 PUSH3 0x134 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x13C PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x12E PUSH32 0x241ECF16D79D0F8DBFB92CBC07FE17840425976CF0667F022FE9877CAA831B08 PUSH3 0x122 PUSH3 0x134 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x13C PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x2C6 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH3 0x14E DUP3 DUP3 PUSH3 0x152 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x17C DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH3 0x1F1 PUSH1 0x20 SHL SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST ISZERO PUSH3 0x1ED JUMPI PUSH3 0x192 PUSH3 0x134 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x221 DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH3 0x229 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x23D DUP4 DUP4 PUSH3 0x2A3 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x298 JUMPI DUP3 PUSH1 0x0 ADD DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP3 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP PUSH3 0x29D JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2323 DUP1 PUSH3 0x2D6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xCA15C873 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0xEC87621C EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0xECE13732 EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x32B JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x287 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x3B61F098 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x3B61F098 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x5306F102 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x767A7B05 EQ PUSH2 0x1ED JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x279BA28D EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x18D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x15DF JUMP JUMPDEST PUSH2 0x347 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x161B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x155 SWAP2 SWAP1 PUSH2 0x166C JUMP JUMPDEST PUSH2 0x367 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x168 SWAP3 SWAP2 SWAP1 PUSH2 0x1727 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x186 SWAP2 SWAP1 PUSH2 0x178E JUMP JUMPDEST PUSH2 0x3AB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A2 SWAP2 SWAP1 PUSH2 0x178E JUMP JUMPDEST PUSH2 0x41F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0x180C JUMP JUMPDEST PUSH2 0x4A2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CD PUSH2 0x58D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1EB PUSH2 0x593 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x207 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x202 SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x6CD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x211 PUSH2 0x831 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x18A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x241 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23C SWAP2 SWAP1 PUSH2 0x18BE JUMP JUMPDEST PUSH2 0x85A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24E SWAP2 SWAP1 PUSH2 0x18A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x271 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26C SWAP2 SWAP1 PUSH2 0x178E JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27E SWAP2 SWAP1 PUSH2 0x1919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28F PUSH2 0x8BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29C SWAP2 SWAP1 PUSH2 0x161B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0x15DF JUMP JUMPDEST PUSH2 0x8C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2CC SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2EF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2EA SWAP2 SWAP1 PUSH2 0x178E JUMP JUMPDEST PUSH2 0x8EC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F9 PUSH2 0x960 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x306 SWAP2 SWAP1 PUSH2 0x161B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x329 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x324 SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x984 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x345 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x340 SWAP2 SWAP1 PUSH2 0x1934 JUMP JUMPDEST PUSH2 0xAE2 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 JUMP JUMPDEST PUSH2 0x3D2 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x3CD PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH2 0x411 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x408 SWAP1 PUSH2 0x19E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x41B DUP3 DUP3 PUSH2 0xC92 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x427 PUSH2 0xC8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x494 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48B SWAP1 PUSH2 0x1A76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x49E DUP3 DUP3 PUSH2 0xD26 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4D3 PUSH32 0x241ECF16D79D0F8DBFB92CBC07FE17840425976CF0667F022FE9877CAA831B08 PUSH2 0x4CE PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH2 0x512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x509 SWAP1 PUSH2 0x1AE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x51B DUP2 PUSH2 0xDBA JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 PUSH1 0x3 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x585 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x59B PUSH2 0xC8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5B9 PUSH2 0x831 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x606 SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x6FE PUSH32 0x241ECF16D79D0F8DBFB92CBC07FE17840425976CF0667F022FE9877CAA831B08 PUSH2 0x6F9 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH2 0x73D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x734 SWAP1 PUSH2 0x1AE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 DUP2 LT PUSH2 0x82B JUMPI PUSH2 0x7C5 CALLER DUP5 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE82 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x7D8 DUP4 DUP3 PUSH2 0xF08 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP4 PUSH32 0x56CA301A9219608C91E7BCEE90E083C19671D2CDCC96752C7AF291CEE5F9C8C8 DUP5 PUSH1 0x40 MLOAD PUSH2 0x822 SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x884 DUP3 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH2 0xF61 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8B6 DUP3 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH2 0xF7B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E5 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH2 0xFAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x913 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x90E PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH2 0x952 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x949 SWAP1 PUSH2 0x1C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x95C DUP3 DUP3 PUSH2 0xD26 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x241ECF16D79D0F8DBFB92CBC07FE17840425976CF0667F022FE9877CAA831B08 DUP2 JUMP JUMPDEST PUSH2 0x9B5 PUSH32 0x241ECF16D79D0F8DBFB92CBC07FE17840425976CF0667F022FE9877CAA831B08 PUSH2 0x9B0 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH2 0x9F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9EB SWAP1 PUSH2 0x1AE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0xA5C CALLER ADDRESS DUP5 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xFC0 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH2 0xA8A DUP4 DUP3 PUSH2 0x1049 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP4 PUSH32 0xE2BBB158EA830E9EFA91FA2A38C9708F9F6109A6C571D6A762B53A83776A3D67 DUP5 PUSH1 0x40 MLOAD PUSH2 0xAD4 SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0xAEA PUSH2 0xC8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB08 PUSH2 0x831 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB55 SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBCD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC4 SWAP1 PUSH2 0x1CE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xCBA DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH2 0x10A7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0xD22 JUMPI PUSH2 0xCC7 PUSH2 0xC8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD4E DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH2 0x10D7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0xDB6 JUMPI PUSH2 0xD5B PUSH2 0xC8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0xE7E JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE62 SWAP1 PUSH2 0x1D55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH2 0xE76 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xDBD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xF03 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xEA1 SWAP3 SWAP2 SWAP1 PUSH2 0x1D75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1107 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xF4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF44 SWAP1 PUSH2 0x1DEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 PUSH2 0xF59 SWAP2 SWAP1 PUSH2 0x1E0A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF70 DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x11CE JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA3 DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x1242 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB9 DUP3 PUSH1 0x0 ADD PUSH2 0x1265 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1043 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFE1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E3E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1107 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 PUSH2 0x1058 SWAP2 SWAP1 PUSH2 0x1E75 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x109D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1094 SWAP1 PUSH2 0x1EF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10CF DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x1276 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FF DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x12E6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1169 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13FE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x11C9 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1189 SWAP2 SWAP1 PUSH2 0x1F41 JUMP JUMPDEST PUSH2 0x11C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11BF SWAP1 PUSH2 0x1FE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP GT PUSH2 0x1219 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1210 SWAP1 PUSH2 0x2072 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x122F JUMPI PUSH2 0x122E PUSH2 0x2092 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1282 DUP4 DUP4 PUSH2 0x1242 JUMP JUMPDEST PUSH2 0x12DB JUMPI DUP3 PUSH1 0x0 ADD DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP3 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ PUSH2 0x13F2 JUMPI PUSH1 0x0 PUSH1 0x1 DUP3 PUSH2 0x1318 SWAP2 SWAP1 PUSH2 0x1E0A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP7 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP PUSH2 0x1330 SWAP2 SWAP1 PUSH2 0x1E0A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x134A JUMPI PUSH2 0x1349 PUSH2 0x2092 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x136E JUMPI PUSH2 0x136D PUSH2 0x2092 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP4 PUSH2 0x1389 SWAP2 SWAP1 PUSH2 0x1E75 JUMP JUMPDEST DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP7 PUSH1 0x0 ADD DUP1 SLOAD DUP1 PUSH2 0x13B6 JUMPI PUSH2 0x13B5 PUSH2 0x20C1 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP7 PUSH1 0x1 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP5 POP POP POP POP POP PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x140D DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1416 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x145B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1452 SWAP1 PUSH2 0x2162 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1464 DUP6 PUSH2 0x152A JUMP JUMPDEST PUSH2 0x14A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x149A SWAP1 PUSH2 0x21CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x14CC SWAP2 SWAP1 PUSH2 0x225F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1509 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x150E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x151E DUP3 DUP3 DUP7 PUSH2 0x153D JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x154D JUMPI DUP3 SWAP1 POP PUSH2 0x159D JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x1560 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1594 SWAP2 SWAP1 PUSH2 0x22CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15BC DUP2 PUSH2 0x15A9 JUMP JUMPDEST DUP2 EQ PUSH2 0x15C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x15D9 DUP2 PUSH2 0x15B3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15F5 JUMPI PUSH2 0x15F4 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1603 DUP5 DUP3 DUP6 ADD PUSH2 0x15CA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1615 DUP2 PUSH2 0x15A9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1630 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x160C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1649 DUP2 PUSH2 0x1636 JUMP JUMPDEST DUP2 EQ PUSH2 0x1654 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1666 DUP2 PUSH2 0x1640 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1682 JUMPI PUSH2 0x1681 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1690 DUP5 DUP3 DUP6 ADD PUSH2 0x1657 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16DE PUSH2 0x16D9 PUSH2 0x16D4 DUP5 PUSH2 0x1699 JUMP JUMPDEST PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x1699 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16F0 DUP3 PUSH2 0x16C3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1702 DUP3 PUSH2 0x16E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1712 DUP2 PUSH2 0x16F7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1721 DUP2 PUSH2 0x1636 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x173C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1709 JUMP JUMPDEST PUSH2 0x1749 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1718 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x175B DUP3 PUSH2 0x1699 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x176B DUP2 PUSH2 0x1750 JUMP JUMPDEST DUP2 EQ PUSH2 0x1776 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1788 DUP2 PUSH2 0x1762 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17A5 JUMPI PUSH2 0x17A4 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17B3 DUP6 DUP3 DUP7 ADD PUSH2 0x15CA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x17C4 DUP6 DUP3 DUP7 ADD PUSH2 0x1779 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17D9 DUP3 PUSH2 0x1750 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17E9 DUP2 PUSH2 0x17CE JUMP JUMPDEST DUP2 EQ PUSH2 0x17F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1806 DUP2 PUSH2 0x17E0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1822 JUMPI PUSH2 0x1821 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1830 DUP5 DUP3 DUP6 ADD PUSH2 0x17F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x184E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1718 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x186B JUMPI PUSH2 0x186A PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1879 DUP6 DUP3 DUP7 ADD PUSH2 0x1657 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x188A DUP6 DUP3 DUP7 ADD PUSH2 0x1657 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x189D DUP2 PUSH2 0x1750 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18B8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1894 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18D5 JUMPI PUSH2 0x18D4 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18E3 DUP6 DUP3 DUP7 ADD PUSH2 0x15CA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x18F4 DUP6 DUP3 DUP7 ADD PUSH2 0x1657 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1913 DUP2 PUSH2 0x18FE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x192E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x190A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x194A JUMPI PUSH2 0x1949 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1958 DUP5 DUP3 DUP6 ADD PUSH2 0x1779 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2073656E646572206D75737420626520616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2061646D696E20746F206772616E740000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19CE PUSH1 0x2F DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x19D9 DUP3 PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19FD DUP2 PUSH2 0x19C1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A60 PUSH1 0x2F DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A6B DUP3 PUSH2 0x1A04 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A8F DUP2 PUSH2 0x1A53 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E6F7420616C6C6F776564000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ACC PUSH1 0xB DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AD7 DUP3 PUSH2 0x1A96 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1AFB DUP2 PUSH2 0x1ABF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B3C DUP3 PUSH2 0x1636 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1B6E JUMPI PUSH2 0x1B6D PUSH2 0x1B02 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BAF PUSH1 0x20 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BBA DUP3 PUSH2 0x1B79 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BDE DUP2 PUSH2 0x1BA2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2073656E646572206D75737420626520616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2061646D696E20746F207265766F6B6500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C41 PUSH1 0x30 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C4C DUP3 PUSH2 0x1BE5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C70 DUP2 PUSH2 0x1C34 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CD3 PUSH1 0x26 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CDE DUP3 PUSH2 0x1C77 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D02 DUP2 PUSH2 0x1CC6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F6C6C61746572616C204164647265737320416C7265616479204164646564 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D3F PUSH1 0x20 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D4A DUP3 PUSH2 0x1D09 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D6E DUP2 PUSH2 0x1D32 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1D8A PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1894 JUMP JUMPDEST PUSH2 0x1D97 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1718 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD4 PUSH1 0x1E DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DDF DUP3 PUSH2 0x1D9E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E03 DUP2 PUSH2 0x1DC7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E15 DUP3 PUSH2 0x1636 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E20 DUP4 PUSH2 0x1636 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1E38 JUMPI PUSH2 0x1E37 PUSH2 0x1B02 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1E53 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1894 JUMP JUMPDEST PUSH2 0x1E60 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1894 JUMP JUMPDEST PUSH2 0x1E6D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1718 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E80 DUP3 PUSH2 0x1636 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E8B DUP4 PUSH2 0x1636 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1EA3 JUMPI PUSH2 0x1EA2 PUSH2 0x1B02 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EDF PUSH1 0x1B DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EEA DUP3 PUSH2 0x1EA9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F0E DUP2 PUSH2 0x1ED2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F1E DUP2 PUSH2 0x18FE JUMP JUMPDEST DUP2 EQ PUSH2 0x1F29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1F3B DUP2 PUSH2 0x1F15 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F57 JUMPI PUSH2 0x1F56 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F65 DUP5 DUP3 DUP6 ADD PUSH2 0x1F2C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FCA PUSH1 0x2A DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FD5 DUP3 PUSH2 0x1F6E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FF9 DUP2 PUSH2 0x1FBD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x456E756D657261626C655365743A20696E646578206F7574206F6620626F756E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6473000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x205C PUSH1 0x22 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x2067 DUP3 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x208B DUP2 PUSH2 0x204F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x214C PUSH1 0x26 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x2157 DUP3 PUSH2 0x20F0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x217B DUP2 PUSH2 0x213F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21B8 PUSH1 0x1D DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x21C3 DUP3 PUSH2 0x2182 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21E7 DUP2 PUSH2 0x21AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2222 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2207 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2239 DUP3 PUSH2 0x21EE JUMP JUMPDEST PUSH2 0x2243 DUP2 DUP6 PUSH2 0x21F9 JUMP JUMPDEST SWAP4 POP PUSH2 0x2253 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2204 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x226B DUP3 DUP5 PUSH2 0x222E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x229D DUP3 PUSH2 0x2276 JUMP JUMPDEST PUSH2 0x22A7 DUP2 DUP6 PUSH2 0x1961 JUMP JUMPDEST SWAP4 POP PUSH2 0x22B7 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2204 JUMP JUMPDEST PUSH2 0x22C0 DUP2 PUSH2 0x2281 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x22E5 DUP2 DUP5 PUSH2 0x2292 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x7CFFD7F340139679A8239B17 ADDMOD MSTORE8 PUSH31 0xCD2430F1EF85A6E582C76468F8FCA80564736F6C6343000814003300000000 ","sourceMap":"420:2167:9:-:0;;;940:126;;;;;;;;;;867:17:1;887:12;:10;;;:12;;:::i;:::-;867:32;;918:9;909:6;;:18;;;;;;;;;;;;;;;;;;975:9;942:43;;971:1;942:43;;;;;;;;;;;;857:135;1637:1:8;1743:7;:22;;;;965:44:9;1764:4:0;976:18:9;;996:12;:10;;;:12;;:::i;:::-;965:10;;;:44;;:::i;:::-;1020:38;906:25;1045:12;:10;;;:12;;:::i;:::-;1020:10;;;:38;;:::i;:::-;420:2167;;590:96:6;643:7;669:10;662:17;;590:96;:::o;6580:110:0:-;6658:25;6669:4;6675:7;6658:10;;;:25;;:::i;:::-;6580:110;;:::o;7017:184::-;7090:33;7115:7;7090:6;:12;7097:4;7090:12;;;;;;;;;;;:20;;:24;;;;:33;;;;:::i;:::-;7086:109;;;7171:12;:10;;;:12;;:::i;:::-;7144:40;;7162:7;7144:40;;7156:4;7144:40;;;;;;;;;;7086:109;7017:184;;:::o;6421:150:7:-;6491:4;6514:50;6519:3;:10;;6555:5;6539:23;;6531:32;;6514:4;;;:50;;:::i;:::-;6507:57;;6421:150;;;;:::o;1632:404::-;1695:4;1716:21;1726:3;1731:5;1716:9;;;:21;;:::i;:::-;1711:319;;1753:3;:11;;1770:5;1753:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1933:3;:11;;:18;;;;1911:3;:12;;:19;1924:5;1911:19;;;;;;;;;;;:40;;;;1972:4;1965:11;;;;1711:319;2014:5;2007:12;;1632:404;;;;;:::o;3797:127::-;3870:4;3916:1;3893:3;:12;;:19;3906:5;3893:19;;;;;;;;;;;;:24;;3886:31;;3797:127;;;;:::o;420:2167:9:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_28":{"entryPoint":2238,"id":28,"parameterSlots":0,"returnSlots":0},"@MANAGER_ROLE_1972":{"entryPoint":2400,"id":1972,"parameterSlots":0,"returnSlots":0},"@_add_1419":{"entryPoint":4726,"id":1419,"parameterSlots":2,"returnSlots":1},"@_at_1559":{"entryPoint":4558,"id":1559,"parameterSlots":2,"returnSlots":1},"@_callOptionalReturn_1046":{"entryPoint":4359,"id":1046,"parameterSlots":2,"returnSlots":0},"@_contains_1519":{"entryPoint":4674,"id":1519,"parameterSlots":2,"returnSlots":1},"@_grantRole_260":{"entryPoint":3218,"id":260,"parameterSlots":2,"returnSlots":0},"@_length_1533":{"entryPoint":4709,"id":1533,"parameterSlots":1,"returnSlots":1},"@_msgSender_1354":{"entryPoint":3210,"id":1354,"parameterSlots":0,"returnSlots":1},"@_remove_1500":{"entryPoint":4838,"id":1500,"parameterSlots":2,"returnSlots":1},"@_revokeRole_284":{"entryPoint":3366,"id":284,"parameterSlots":2,"returnSlots":0},"@_rsvVault_1955":{"entryPoint":871,"id":1955,"parameterSlots":0,"returnSlots":0},"@_verifyCallResult_1342":{"entryPoint":5437,"id":1342,"parameterSlots":3,"returnSlots":1},"@addReserveVault_2046":{"entryPoint":1186,"id":2046,"parameterSlots":1,"returnSlots":0},"@add_1681":{"entryPoint":4263,"id":1681,"parameterSlots":2,"returnSlots":1},"@add_577":{"entryPoint":4169,"id":577,"parameterSlots":2,"returnSlots":1},"@at_1777":{"entryPoint":3937,"id":1777,"parameterSlots":2,"returnSlots":1},"@checkReserveContract_2016":{"entryPoint":3514,"id":2016,"parameterSlots":1,"returnSlots":0},"@contains_1735":{"entryPoint":3963,"id":1735,"parameterSlots":2,"returnSlots":1},"@currentReserveId_1944":{"entryPoint":1421,"id":1944,"parameterSlots":0,"returnSlots":0},"@depositCollateral_2108":{"entryPoint":2436,"id":2108,"parameterSlots":2,"returnSlots":0},"@functionCallWithValue_1208":{"entryPoint":5142,"id":1208,"parameterSlots":4,"returnSlots":1},"@functionCall_1138":{"entryPoint":5118,"id":1138,"parameterSlots":3,"returnSlots":1},"@getRoleAdmin_123":{"entryPoint":839,"id":123,"parameterSlots":1,"returnSlots":1},"@getRoleMemberCount_90":{"entryPoint":2245,"id":90,"parameterSlots":1,"returnSlots":1},"@getRoleMember_109":{"entryPoint":2138,"id":109,"parameterSlots":2,"returnSlots":1},"@grantRole_149":{"entryPoint":939,"id":149,"parameterSlots":2,"returnSlots":0},"@hasRole_74":{"entryPoint":2188,"id":74,"parameterSlots":2,"returnSlots":1},"@isContract_1067":{"entryPoint":5418,"id":1067,"parameterSlots":1,"returnSlots":1},"@length_1750":{"entryPoint":4011,"id":1750,"parameterSlots":1,"returnSlots":1},"@owner_330":{"entryPoint":2097,"id":330,"parameterSlots":0,"returnSlots":1},"@remove_1708":{"entryPoint":4311,"id":1708,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_366":{"entryPoint":1427,"id":366,"parameterSlots":0,"returnSlots":0},"@renounceRole_197":{"entryPoint":1055,"id":197,"parameterSlots":2,"returnSlots":0},"@revokeRole_175":{"entryPoint":2284,"id":175,"parameterSlots":2,"returnSlots":0},"@safeTransferFrom_889":{"entryPoint":4032,"id":889,"parameterSlots":4,"returnSlots":0},"@safeTransfer_863":{"entryPoint":3714,"id":863,"parameterSlots":3,"returnSlots":0},"@sub_599":{"entryPoint":3848,"id":599,"parameterSlots":2,"returnSlots":1},"@transferOwnership_394":{"entryPoint":2786,"id":394,"parameterSlots":1,"returnSlots":0},"@withdrawCollateral_2171":{"entryPoint":1741,"id":2171,"parameterSlots":2,"returnSlots":0},"abi_decode_t_address":{"entryPoint":6009,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":7980,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":5578,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_contract$_IERC20_$828":{"entryPoint":6135,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5719,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6452,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":8001,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":5599,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":6030,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":6334,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_contract$_IERC20_$828":{"entryPoint":6156,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5740,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":6228,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6292,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":6410,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":5644,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8750,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_contract$_IERC20_$828_to_t_address_fromStack":{"entryPoint":5897,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":8850,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb_to_t_string_memory_ptr_fromStack":{"entryPoint":8271,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811_to_t_string_memory_ptr_fromStack":{"entryPoint":6593,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":7366,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a_to_t_string_memory_ptr_fromStack":{"entryPoint":7890,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862_to_t_string_memory_ptr_fromStack":{"entryPoint":7623,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack":{"entryPoint":8511,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3_to_t_string_memory_ptr_fromStack":{"entryPoint":7220,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd_to_t_string_memory_ptr_fromStack":{"entryPoint":6847,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":7074,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0_to_t_string_memory_ptr_fromStack":{"entryPoint":7474,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack":{"entryPoint":8619,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack":{"entryPoint":8125,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":6739,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":5912,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8799,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6307,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":7742,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":7541,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":6425,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":5659,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$828_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":5927,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8907,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8306,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6628,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7401,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7925,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7658,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8546,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7255,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6882,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7109,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7509,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8654,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8160,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6774,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":6201,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":8686,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":8822,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8697,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":6497,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7797,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7690,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":5968,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":6398,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":5545,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_contract$_IERC20_$828":{"entryPoint":6094,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":5785,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5686,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IERC20_$828_to_t_address":{"entryPoint":5879,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":5861,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":5827,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":8708,"id":null,"parameterSlots":3,"returnSlots":0},"identity":{"entryPoint":5817,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":6961,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":6914,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":8385,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":8338,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":5540,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":8833,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb":{"entryPoint":8192,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811":{"entryPoint":6514,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":7287,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a":{"entryPoint":7849,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862":{"entryPoint":7582,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c":{"entryPoint":8432,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3":{"entryPoint":7141,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd":{"entryPoint":6806,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":7033,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0":{"entryPoint":7433,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad":{"entryPoint":8578,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd":{"entryPoint":8046,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":6660,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":5986,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":7957,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":5555,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_contract$_IERC20_$828":{"entryPoint":6112,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5696,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:25276:10","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:10","statements":[{"nodeType":"YulAssignment","src":"57:19:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:10","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:10"},"nodeType":"YulFunctionCall","src":"67:9:10"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:10"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:10","type":""}],"src":"7:75:10"},{"body":{"nodeType":"YulBlock","src":"177:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:10"},"nodeType":"YulFunctionCall","src":"187:12:10"},"nodeType":"YulExpressionStatement","src":"187:12:10"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:10"},{"body":{"nodeType":"YulBlock","src":"300:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:10"},"nodeType":"YulFunctionCall","src":"310:12:10"},"nodeType":"YulExpressionStatement","src":"310:12:10"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:10"},{"body":{"nodeType":"YulBlock","src":"379:32:10","statements":[{"nodeType":"YulAssignment","src":"389:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:10"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:10","type":""}],"src":"334:77:10"},{"body":{"nodeType":"YulBlock","src":"460:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:10"},"nodeType":"YulFunctionCall","src":"519:12:10"},"nodeType":"YulExpressionStatement","src":"519:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:10"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:10"},"nodeType":"YulFunctionCall","src":"490:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:10"},"nodeType":"YulFunctionCall","src":"480:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:10"},"nodeType":"YulFunctionCall","src":"473:43:10"},"nodeType":"YulIf","src":"470:63:10"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:10","type":""}],"src":"417:122:10"},{"body":{"nodeType":"YulBlock","src":"597:87:10","statements":[{"nodeType":"YulAssignment","src":"607:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:10"},"nodeType":"YulFunctionCall","src":"616:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:10"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:10"},"nodeType":"YulFunctionCall","src":"645:33:10"},"nodeType":"YulExpressionStatement","src":"645:33:10"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:10","type":""}],"src":"545:139:10"},{"body":{"nodeType":"YulBlock","src":"756:263:10","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:10"},"nodeType":"YulFunctionCall","src":"804:79:10"},"nodeType":"YulExpressionStatement","src":"804:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:10"},"nodeType":"YulFunctionCall","src":"773:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:10"},"nodeType":"YulFunctionCall","src":"769:32:10"},"nodeType":"YulIf","src":"766:119:10"},{"nodeType":"YulBlock","src":"895:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:10","type":""}]},{"nodeType":"YulAssignment","src":"939:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:10"},"nodeType":"YulFunctionCall","src":"970:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:10"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"949:20:10"},"nodeType":"YulFunctionCall","src":"949:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:10"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:10","type":""}],"src":"690:329:10"},{"body":{"nodeType":"YulBlock","src":"1090:53:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1107:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1130:5:10"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1112:17:10"},"nodeType":"YulFunctionCall","src":"1112:24:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1100:6:10"},"nodeType":"YulFunctionCall","src":"1100:37:10"},"nodeType":"YulExpressionStatement","src":"1100:37:10"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1078:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1085:3:10","type":""}],"src":"1025:118:10"},{"body":{"nodeType":"YulBlock","src":"1247:124:10","statements":[{"nodeType":"YulAssignment","src":"1257:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1269:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"1280:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1265:3:10"},"nodeType":"YulFunctionCall","src":"1265:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1257:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1337:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1350:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"1361:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1346:3:10"},"nodeType":"YulFunctionCall","src":"1346:17:10"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"1293:43:10"},"nodeType":"YulFunctionCall","src":"1293:71:10"},"nodeType":"YulExpressionStatement","src":"1293:71:10"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1219:9:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1231:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1242:4:10","type":""}],"src":"1149:222:10"},{"body":{"nodeType":"YulBlock","src":"1422:32:10","statements":[{"nodeType":"YulAssignment","src":"1432:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"1443:5:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1432:7:10"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1404:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1414:7:10","type":""}],"src":"1377:77:10"},{"body":{"nodeType":"YulBlock","src":"1503:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"1560:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1569:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1572:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1562:6:10"},"nodeType":"YulFunctionCall","src":"1562:12:10"},"nodeType":"YulExpressionStatement","src":"1562:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1526:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1551:5:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1533:17:10"},"nodeType":"YulFunctionCall","src":"1533:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1523:2:10"},"nodeType":"YulFunctionCall","src":"1523:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1516:6:10"},"nodeType":"YulFunctionCall","src":"1516:43:10"},"nodeType":"YulIf","src":"1513:63:10"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1496:5:10","type":""}],"src":"1460:122:10"},{"body":{"nodeType":"YulBlock","src":"1640:87:10","statements":[{"nodeType":"YulAssignment","src":"1650:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1672:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1659:12:10"},"nodeType":"YulFunctionCall","src":"1659:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1650:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1715:5:10"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1688:26:10"},"nodeType":"YulFunctionCall","src":"1688:33:10"},"nodeType":"YulExpressionStatement","src":"1688:33:10"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1618:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"1626:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1634:5:10","type":""}],"src":"1588:139:10"},{"body":{"nodeType":"YulBlock","src":"1799:263:10","statements":[{"body":{"nodeType":"YulBlock","src":"1845:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1847:77:10"},"nodeType":"YulFunctionCall","src":"1847:79:10"},"nodeType":"YulExpressionStatement","src":"1847:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1820:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"1829:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1816:3:10"},"nodeType":"YulFunctionCall","src":"1816:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"1841:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1812:3:10"},"nodeType":"YulFunctionCall","src":"1812:32:10"},"nodeType":"YulIf","src":"1809:119:10"},{"nodeType":"YulBlock","src":"1938:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"1953:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"1967:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1957:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1982:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2017:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"2028:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2013:3:10"},"nodeType":"YulFunctionCall","src":"2013:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2037:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1992:20:10"},"nodeType":"YulFunctionCall","src":"1992:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1982:6:10"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1769:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1780:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1792:6:10","type":""}],"src":"1733:329:10"},{"body":{"nodeType":"YulBlock","src":"2113:81:10","statements":[{"nodeType":"YulAssignment","src":"2123:65:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2138:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"2145:42:10","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2134:3:10"},"nodeType":"YulFunctionCall","src":"2134:54:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2123:7:10"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2095:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2105:7:10","type":""}],"src":"2068:126:10"},{"body":{"nodeType":"YulBlock","src":"2232:28:10","statements":[{"nodeType":"YulAssignment","src":"2242:12:10","value":{"name":"value","nodeType":"YulIdentifier","src":"2249:5:10"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2242:3:10"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2218:5:10","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2228:3:10","type":""}],"src":"2200:60:10"},{"body":{"nodeType":"YulBlock","src":"2326:82:10","statements":[{"nodeType":"YulAssignment","src":"2336:66:10","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2394:5:10"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2376:17:10"},"nodeType":"YulFunctionCall","src":"2376:24:10"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"2367:8:10"},"nodeType":"YulFunctionCall","src":"2367:34:10"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2349:17:10"},"nodeType":"YulFunctionCall","src":"2349:53:10"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"2336:9:10"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2306:5:10","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"2316:9:10","type":""}],"src":"2266:142:10"},{"body":{"nodeType":"YulBlock","src":"2474:66:10","statements":[{"nodeType":"YulAssignment","src":"2484:50:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2528:5:10"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"2497:30:10"},"nodeType":"YulFunctionCall","src":"2497:37:10"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"2484:9:10"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2454:5:10","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"2464:9:10","type":""}],"src":"2414:126:10"},{"body":{"nodeType":"YulBlock","src":"2620:66:10","statements":[{"nodeType":"YulAssignment","src":"2630:50:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2674:5:10"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"2643:30:10"},"nodeType":"YulFunctionCall","src":"2643:37:10"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"2630:9:10"}]}]},"name":"convert_t_contract$_IERC20_$828_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2600:5:10","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"2610:9:10","type":""}],"src":"2546:140:10"},{"body":{"nodeType":"YulBlock","src":"2771:80:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2788:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2838:5:10"}],"functionName":{"name":"convert_t_contract$_IERC20_$828_to_t_address","nodeType":"YulIdentifier","src":"2793:44:10"},"nodeType":"YulFunctionCall","src":"2793:51:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2781:6:10"},"nodeType":"YulFunctionCall","src":"2781:64:10"},"nodeType":"YulExpressionStatement","src":"2781:64:10"}]},"name":"abi_encode_t_contract$_IERC20_$828_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2759:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2766:3:10","type":""}],"src":"2692:159:10"},{"body":{"nodeType":"YulBlock","src":"2922:53:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2939:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2962:5:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2944:17:10"},"nodeType":"YulFunctionCall","src":"2944:24:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2932:6:10"},"nodeType":"YulFunctionCall","src":"2932:37:10"},"nodeType":"YulExpressionStatement","src":"2932:37:10"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2910:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2917:3:10","type":""}],"src":"2857:118:10"},{"body":{"nodeType":"YulBlock","src":"3121:220:10","statements":[{"nodeType":"YulAssignment","src":"3131:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3143:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"3154:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3139:3:10"},"nodeType":"YulFunctionCall","src":"3139:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3131:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3225:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3238:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"3249:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3234:3:10"},"nodeType":"YulFunctionCall","src":"3234:17:10"}],"functionName":{"name":"abi_encode_t_contract$_IERC20_$828_to_t_address_fromStack","nodeType":"YulIdentifier","src":"3167:57:10"},"nodeType":"YulFunctionCall","src":"3167:85:10"},"nodeType":"YulExpressionStatement","src":"3167:85:10"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3306:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3319:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"3330:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3315:3:10"},"nodeType":"YulFunctionCall","src":"3315:18:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3262:43:10"},"nodeType":"YulFunctionCall","src":"3262:72:10"},"nodeType":"YulExpressionStatement","src":"3262:72:10"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$828_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3085:9:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3097:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3105:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3116:4:10","type":""}],"src":"2981:360:10"},{"body":{"nodeType":"YulBlock","src":"3392:51:10","statements":[{"nodeType":"YulAssignment","src":"3402:35:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3431:5:10"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3413:17:10"},"nodeType":"YulFunctionCall","src":"3413:24:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3402:7:10"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3374:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3384:7:10","type":""}],"src":"3347:96:10"},{"body":{"nodeType":"YulBlock","src":"3492:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"3549:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3558:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3561:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3551:6:10"},"nodeType":"YulFunctionCall","src":"3551:12:10"},"nodeType":"YulExpressionStatement","src":"3551:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3515:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3540:5:10"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3522:17:10"},"nodeType":"YulFunctionCall","src":"3522:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3512:2:10"},"nodeType":"YulFunctionCall","src":"3512:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3505:6:10"},"nodeType":"YulFunctionCall","src":"3505:43:10"},"nodeType":"YulIf","src":"3502:63:10"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3485:5:10","type":""}],"src":"3449:122:10"},{"body":{"nodeType":"YulBlock","src":"3629:87:10","statements":[{"nodeType":"YulAssignment","src":"3639:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3661:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3648:12:10"},"nodeType":"YulFunctionCall","src":"3648:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3639:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3704:5:10"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3677:26:10"},"nodeType":"YulFunctionCall","src":"3677:33:10"},"nodeType":"YulExpressionStatement","src":"3677:33:10"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3607:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"3615:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3623:5:10","type":""}],"src":"3577:139:10"},{"body":{"nodeType":"YulBlock","src":"3805:391:10","statements":[{"body":{"nodeType":"YulBlock","src":"3851:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3853:77:10"},"nodeType":"YulFunctionCall","src":"3853:79:10"},"nodeType":"YulExpressionStatement","src":"3853:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3826:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"3835:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3822:3:10"},"nodeType":"YulFunctionCall","src":"3822:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"3847:2:10","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3818:3:10"},"nodeType":"YulFunctionCall","src":"3818:32:10"},"nodeType":"YulIf","src":"3815:119:10"},{"nodeType":"YulBlock","src":"3944:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3959:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"3973:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3963:6:10","type":""}]},{"nodeType":"YulAssignment","src":"3988:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4023:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"4034:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4019:3:10"},"nodeType":"YulFunctionCall","src":"4019:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4043:7:10"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3998:20:10"},"nodeType":"YulFunctionCall","src":"3998:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3988:6:10"}]}]},{"nodeType":"YulBlock","src":"4071:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"4086:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"4100:2:10","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4090:6:10","type":""}]},{"nodeType":"YulAssignment","src":"4116:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4151:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"4162:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4147:3:10"},"nodeType":"YulFunctionCall","src":"4147:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4171:7:10"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4126:20:10"},"nodeType":"YulFunctionCall","src":"4126:53:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4116:6:10"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3767:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3778:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3790:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3798:6:10","type":""}],"src":"3722:474:10"},{"body":{"nodeType":"YulBlock","src":"4261:51:10","statements":[{"nodeType":"YulAssignment","src":"4271:35:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4300:5:10"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4282:17:10"},"nodeType":"YulFunctionCall","src":"4282:24:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4271:7:10"}]}]},"name":"cleanup_t_contract$_IERC20_$828","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4243:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4253:7:10","type":""}],"src":"4202:110:10"},{"body":{"nodeType":"YulBlock","src":"4375:93:10","statements":[{"body":{"nodeType":"YulBlock","src":"4446:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4455:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4458:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4448:6:10"},"nodeType":"YulFunctionCall","src":"4448:12:10"},"nodeType":"YulExpressionStatement","src":"4448:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4398:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4437:5:10"}],"functionName":{"name":"cleanup_t_contract$_IERC20_$828","nodeType":"YulIdentifier","src":"4405:31:10"},"nodeType":"YulFunctionCall","src":"4405:38:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4395:2:10"},"nodeType":"YulFunctionCall","src":"4395:49:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4388:6:10"},"nodeType":"YulFunctionCall","src":"4388:57:10"},"nodeType":"YulIf","src":"4385:77:10"}]},"name":"validator_revert_t_contract$_IERC20_$828","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4368:5:10","type":""}],"src":"4318:150:10"},{"body":{"nodeType":"YulBlock","src":"4540:101:10","statements":[{"nodeType":"YulAssignment","src":"4550:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4572:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4559:12:10"},"nodeType":"YulFunctionCall","src":"4559:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4550:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4629:5:10"}],"functionName":{"name":"validator_revert_t_contract$_IERC20_$828","nodeType":"YulIdentifier","src":"4588:40:10"},"nodeType":"YulFunctionCall","src":"4588:47:10"},"nodeType":"YulExpressionStatement","src":"4588:47:10"}]},"name":"abi_decode_t_contract$_IERC20_$828","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4518:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"4526:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4534:5:10","type":""}],"src":"4474:167:10"},{"body":{"nodeType":"YulBlock","src":"4727:277:10","statements":[{"body":{"nodeType":"YulBlock","src":"4773:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4775:77:10"},"nodeType":"YulFunctionCall","src":"4775:79:10"},"nodeType":"YulExpressionStatement","src":"4775:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4748:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"4757:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4744:3:10"},"nodeType":"YulFunctionCall","src":"4744:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4769:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4740:3:10"},"nodeType":"YulFunctionCall","src":"4740:32:10"},"nodeType":"YulIf","src":"4737:119:10"},{"nodeType":"YulBlock","src":"4866:131:10","statements":[{"nodeType":"YulVariableDeclaration","src":"4881:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"4895:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4885:6:10","type":""}]},{"nodeType":"YulAssignment","src":"4910:77:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4959:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"4970:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4955:3:10"},"nodeType":"YulFunctionCall","src":"4955:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4979:7:10"}],"functionName":{"name":"abi_decode_t_contract$_IERC20_$828","nodeType":"YulIdentifier","src":"4920:34:10"},"nodeType":"YulFunctionCall","src":"4920:67:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4910:6:10"}]}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$828","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4697:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4708:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4720:6:10","type":""}],"src":"4647:357:10"},{"body":{"nodeType":"YulBlock","src":"5108:124:10","statements":[{"nodeType":"YulAssignment","src":"5118:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5130:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"5141:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5126:3:10"},"nodeType":"YulFunctionCall","src":"5126:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5118:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5198:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5211:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"5222:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5207:3:10"},"nodeType":"YulFunctionCall","src":"5207:17:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"5154:43:10"},"nodeType":"YulFunctionCall","src":"5154:71:10"},"nodeType":"YulExpressionStatement","src":"5154:71:10"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5080:9:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5092:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5103:4:10","type":""}],"src":"5010:222:10"},{"body":{"nodeType":"YulBlock","src":"5321:391:10","statements":[{"body":{"nodeType":"YulBlock","src":"5367:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5369:77:10"},"nodeType":"YulFunctionCall","src":"5369:79:10"},"nodeType":"YulExpressionStatement","src":"5369:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5342:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"5351:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5338:3:10"},"nodeType":"YulFunctionCall","src":"5338:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"5363:2:10","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5334:3:10"},"nodeType":"YulFunctionCall","src":"5334:32:10"},"nodeType":"YulIf","src":"5331:119:10"},{"nodeType":"YulBlock","src":"5460:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"5475:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"5489:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5479:6:10","type":""}]},{"nodeType":"YulAssignment","src":"5504:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5539:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"5550:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5535:3:10"},"nodeType":"YulFunctionCall","src":"5535:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5559:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5514:20:10"},"nodeType":"YulFunctionCall","src":"5514:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5504:6:10"}]}]},{"nodeType":"YulBlock","src":"5587:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"5602:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"5616:2:10","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5606:6:10","type":""}]},{"nodeType":"YulAssignment","src":"5632:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5667:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"5678:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5663:3:10"},"nodeType":"YulFunctionCall","src":"5663:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5687:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5642:20:10"},"nodeType":"YulFunctionCall","src":"5642:53:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5632:6:10"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5283:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5294:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5306:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5314:6:10","type":""}],"src":"5238:474:10"},{"body":{"nodeType":"YulBlock","src":"5783:53:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5800:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5823:5:10"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5805:17:10"},"nodeType":"YulFunctionCall","src":"5805:24:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5793:6:10"},"nodeType":"YulFunctionCall","src":"5793:37:10"},"nodeType":"YulExpressionStatement","src":"5793:37:10"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5771:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5778:3:10","type":""}],"src":"5718:118:10"},{"body":{"nodeType":"YulBlock","src":"5940:124:10","statements":[{"nodeType":"YulAssignment","src":"5950:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5962:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"5973:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5958:3:10"},"nodeType":"YulFunctionCall","src":"5958:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5950:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6030:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6043:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"6054:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6039:3:10"},"nodeType":"YulFunctionCall","src":"6039:17:10"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5986:43:10"},"nodeType":"YulFunctionCall","src":"5986:71:10"},"nodeType":"YulExpressionStatement","src":"5986:71:10"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5912:9:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5924:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5935:4:10","type":""}],"src":"5842:222:10"},{"body":{"nodeType":"YulBlock","src":"6153:391:10","statements":[{"body":{"nodeType":"YulBlock","src":"6199:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6201:77:10"},"nodeType":"YulFunctionCall","src":"6201:79:10"},"nodeType":"YulExpressionStatement","src":"6201:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6174:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"6183:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6170:3:10"},"nodeType":"YulFunctionCall","src":"6170:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"6195:2:10","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6166:3:10"},"nodeType":"YulFunctionCall","src":"6166:32:10"},"nodeType":"YulIf","src":"6163:119:10"},{"nodeType":"YulBlock","src":"6292:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"6307:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"6321:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6311:6:10","type":""}]},{"nodeType":"YulAssignment","src":"6336:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6371:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"6382:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6367:3:10"},"nodeType":"YulFunctionCall","src":"6367:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6391:7:10"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6346:20:10"},"nodeType":"YulFunctionCall","src":"6346:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6336:6:10"}]}]},{"nodeType":"YulBlock","src":"6419:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"6434:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"6448:2:10","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6438:6:10","type":""}]},{"nodeType":"YulAssignment","src":"6464:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6499:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"6510:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6495:3:10"},"nodeType":"YulFunctionCall","src":"6495:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6519:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6474:20:10"},"nodeType":"YulFunctionCall","src":"6474:53:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6464:6:10"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6115:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6126:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6138:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6146:6:10","type":""}],"src":"6070:474:10"},{"body":{"nodeType":"YulBlock","src":"6592:48:10","statements":[{"nodeType":"YulAssignment","src":"6602:32:10","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6627:5:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6620:6:10"},"nodeType":"YulFunctionCall","src":"6620:13:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6613:6:10"},"nodeType":"YulFunctionCall","src":"6613:21:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6602:7:10"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6574:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6584:7:10","type":""}],"src":"6550:90:10"},{"body":{"nodeType":"YulBlock","src":"6705:50:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6722:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6742:5:10"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6727:14:10"},"nodeType":"YulFunctionCall","src":"6727:21:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6715:6:10"},"nodeType":"YulFunctionCall","src":"6715:34:10"},"nodeType":"YulExpressionStatement","src":"6715:34:10"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6693:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6700:3:10","type":""}],"src":"6646:109:10"},{"body":{"nodeType":"YulBlock","src":"6853:118:10","statements":[{"nodeType":"YulAssignment","src":"6863:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6875:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"6886:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6871:3:10"},"nodeType":"YulFunctionCall","src":"6871:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6863:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6937:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6950:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"6961:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6946:3:10"},"nodeType":"YulFunctionCall","src":"6946:17:10"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"6899:37:10"},"nodeType":"YulFunctionCall","src":"6899:65:10"},"nodeType":"YulExpressionStatement","src":"6899:65:10"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6825:9:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6837:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6848:4:10","type":""}],"src":"6761:210:10"},{"body":{"nodeType":"YulBlock","src":"7043:263:10","statements":[{"body":{"nodeType":"YulBlock","src":"7089:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7091:77:10"},"nodeType":"YulFunctionCall","src":"7091:79:10"},"nodeType":"YulExpressionStatement","src":"7091:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7064:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"7073:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7060:3:10"},"nodeType":"YulFunctionCall","src":"7060:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"7085:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7056:3:10"},"nodeType":"YulFunctionCall","src":"7056:32:10"},"nodeType":"YulIf","src":"7053:119:10"},{"nodeType":"YulBlock","src":"7182:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"7197:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"7211:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7201:6:10","type":""}]},{"nodeType":"YulAssignment","src":"7226:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7261:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"7272:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7257:3:10"},"nodeType":"YulFunctionCall","src":"7257:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7281:7:10"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7236:20:10"},"nodeType":"YulFunctionCall","src":"7236:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7226:6:10"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7013:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7024:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7036:6:10","type":""}],"src":"6977:329:10"},{"body":{"nodeType":"YulBlock","src":"7408:73:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7425:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"7430:6:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7418:6:10"},"nodeType":"YulFunctionCall","src":"7418:19:10"},"nodeType":"YulExpressionStatement","src":"7418:19:10"},{"nodeType":"YulAssignment","src":"7446:29:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7465:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"7470:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7461:3:10"},"nodeType":"YulFunctionCall","src":"7461:14:10"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"7446:11:10"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7380:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"7385:6:10","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"7396:11:10","type":""}],"src":"7312:169:10"},{"body":{"nodeType":"YulBlock","src":"7593:128:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7615:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"7623:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7611:3:10"},"nodeType":"YulFunctionCall","src":"7611:14:10"},{"hexValue":"416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e","kind":"string","nodeType":"YulLiteral","src":"7627:34:10","type":"","value":"AccessControl: sender must be an"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7604:6:10"},"nodeType":"YulFunctionCall","src":"7604:58:10"},"nodeType":"YulExpressionStatement","src":"7604:58:10"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7683:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"7691:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7679:3:10"},"nodeType":"YulFunctionCall","src":"7679:15:10"},{"hexValue":"2061646d696e20746f206772616e74","kind":"string","nodeType":"YulLiteral","src":"7696:17:10","type":"","value":" admin to grant"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7672:6:10"},"nodeType":"YulFunctionCall","src":"7672:42:10"},"nodeType":"YulExpressionStatement","src":"7672:42:10"}]},"name":"store_literal_in_memory_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7585:6:10","type":""}],"src":"7487:234:10"},{"body":{"nodeType":"YulBlock","src":"7873:220:10","statements":[{"nodeType":"YulAssignment","src":"7883:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7949:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"7954:2:10","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7890:58:10"},"nodeType":"YulFunctionCall","src":"7890:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7883:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8055:3:10"}],"functionName":{"name":"store_literal_in_memory_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811","nodeType":"YulIdentifier","src":"7966:88:10"},"nodeType":"YulFunctionCall","src":"7966:93:10"},"nodeType":"YulExpressionStatement","src":"7966:93:10"},{"nodeType":"YulAssignment","src":"8068:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8079:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8084:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8075:3:10"},"nodeType":"YulFunctionCall","src":"8075:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8068:3:10"}]}]},"name":"abi_encode_t_stringliteral_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7861:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7869:3:10","type":""}],"src":"7727:366:10"},{"body":{"nodeType":"YulBlock","src":"8270:248:10","statements":[{"nodeType":"YulAssignment","src":"8280:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8292:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"8303:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8288:3:10"},"nodeType":"YulFunctionCall","src":"8288:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8280:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8327:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"8338:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8323:3:10"},"nodeType":"YulFunctionCall","src":"8323:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8346:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"8352:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8342:3:10"},"nodeType":"YulFunctionCall","src":"8342:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8316:6:10"},"nodeType":"YulFunctionCall","src":"8316:47:10"},"nodeType":"YulExpressionStatement","src":"8316:47:10"},{"nodeType":"YulAssignment","src":"8372:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8506:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8380:124:10"},"nodeType":"YulFunctionCall","src":"8380:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8372:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8250:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8265:4:10","type":""}],"src":"8099:419:10"},{"body":{"nodeType":"YulBlock","src":"8630:128:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8652:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"8660:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8648:3:10"},"nodeType":"YulFunctionCall","src":"8648:14:10"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"8664:34:10","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8641:6:10"},"nodeType":"YulFunctionCall","src":"8641:58:10"},"nodeType":"YulExpressionStatement","src":"8641:58:10"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8720:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"8728:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8716:3:10"},"nodeType":"YulFunctionCall","src":"8716:15:10"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"8733:17:10","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8709:6:10"},"nodeType":"YulFunctionCall","src":"8709:42:10"},"nodeType":"YulExpressionStatement","src":"8709:42:10"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8622:6:10","type":""}],"src":"8524:234:10"},{"body":{"nodeType":"YulBlock","src":"8910:220:10","statements":[{"nodeType":"YulAssignment","src":"8920:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8986:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8991:2:10","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8927:58:10"},"nodeType":"YulFunctionCall","src":"8927:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8920:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9092:3:10"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"9003:88:10"},"nodeType":"YulFunctionCall","src":"9003:93:10"},"nodeType":"YulExpressionStatement","src":"9003:93:10"},{"nodeType":"YulAssignment","src":"9105:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9116:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"9121:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9112:3:10"},"nodeType":"YulFunctionCall","src":"9112:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9105:3:10"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8898:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8906:3:10","type":""}],"src":"8764:366:10"},{"body":{"nodeType":"YulBlock","src":"9307:248:10","statements":[{"nodeType":"YulAssignment","src":"9317:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9329:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"9340:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9325:3:10"},"nodeType":"YulFunctionCall","src":"9325:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9317:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9364:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"9375:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9360:3:10"},"nodeType":"YulFunctionCall","src":"9360:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9383:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"9389:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9379:3:10"},"nodeType":"YulFunctionCall","src":"9379:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9353:6:10"},"nodeType":"YulFunctionCall","src":"9353:47:10"},"nodeType":"YulExpressionStatement","src":"9353:47:10"},{"nodeType":"YulAssignment","src":"9409:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9543:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9417:124:10"},"nodeType":"YulFunctionCall","src":"9417:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9409:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9287:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9302:4:10","type":""}],"src":"9136:419:10"},{"body":{"nodeType":"YulBlock","src":"9667:55:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9689:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"9697:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9685:3:10"},"nodeType":"YulFunctionCall","src":"9685:14:10"},{"hexValue":"4e6f7420616c6c6f776564","kind":"string","nodeType":"YulLiteral","src":"9701:13:10","type":"","value":"Not allowed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9678:6:10"},"nodeType":"YulFunctionCall","src":"9678:37:10"},"nodeType":"YulExpressionStatement","src":"9678:37:10"}]},"name":"store_literal_in_memory_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9659:6:10","type":""}],"src":"9561:161:10"},{"body":{"nodeType":"YulBlock","src":"9874:220:10","statements":[{"nodeType":"YulAssignment","src":"9884:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9950:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"9955:2:10","type":"","value":"11"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9891:58:10"},"nodeType":"YulFunctionCall","src":"9891:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9884:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10056:3:10"}],"functionName":{"name":"store_literal_in_memory_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd","nodeType":"YulIdentifier","src":"9967:88:10"},"nodeType":"YulFunctionCall","src":"9967:93:10"},"nodeType":"YulExpressionStatement","src":"9967:93:10"},{"nodeType":"YulAssignment","src":"10069:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10080:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"10085:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10076:3:10"},"nodeType":"YulFunctionCall","src":"10076:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10069:3:10"}]}]},"name":"abi_encode_t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9862:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9870:3:10","type":""}],"src":"9728:366:10"},{"body":{"nodeType":"YulBlock","src":"10271:248:10","statements":[{"nodeType":"YulAssignment","src":"10281:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10293:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"10304:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10289:3:10"},"nodeType":"YulFunctionCall","src":"10289:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10281:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10328:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"10339:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10324:3:10"},"nodeType":"YulFunctionCall","src":"10324:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10347:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"10353:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10343:3:10"},"nodeType":"YulFunctionCall","src":"10343:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10317:6:10"},"nodeType":"YulFunctionCall","src":"10317:47:10"},"nodeType":"YulExpressionStatement","src":"10317:47:10"},{"nodeType":"YulAssignment","src":"10373:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10507:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10381:124:10"},"nodeType":"YulFunctionCall","src":"10381:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10373:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10251:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10266:4:10","type":""}],"src":"10100:419:10"},{"body":{"nodeType":"YulBlock","src":"10553:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10570:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10573:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10563:6:10"},"nodeType":"YulFunctionCall","src":"10563:88:10"},"nodeType":"YulExpressionStatement","src":"10563:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10667:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10670:4:10","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10660:6:10"},"nodeType":"YulFunctionCall","src":"10660:15:10"},"nodeType":"YulExpressionStatement","src":"10660:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10691:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10694:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10684:6:10"},"nodeType":"YulFunctionCall","src":"10684:15:10"},"nodeType":"YulExpressionStatement","src":"10684:15:10"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10525:180:10"},{"body":{"nodeType":"YulBlock","src":"10754:190:10","statements":[{"nodeType":"YulAssignment","src":"10764:33:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10791:5:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10773:17:10"},"nodeType":"YulFunctionCall","src":"10773:24:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10764:5:10"}]},{"body":{"nodeType":"YulBlock","src":"10887:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10889:16:10"},"nodeType":"YulFunctionCall","src":"10889:18:10"},"nodeType":"YulExpressionStatement","src":"10889:18:10"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10812:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"10819:66:10","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10809:2:10"},"nodeType":"YulFunctionCall","src":"10809:77:10"},"nodeType":"YulIf","src":"10806:103:10"},{"nodeType":"YulAssignment","src":"10918:20:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10929:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"10936:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10925:3:10"},"nodeType":"YulFunctionCall","src":"10925:13:10"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10918:3:10"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10740:5:10","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"10750:3:10","type":""}],"src":"10711:233:10"},{"body":{"nodeType":"YulBlock","src":"11056:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11078:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"11086:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11074:3:10"},"nodeType":"YulFunctionCall","src":"11074:14:10"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"11090:34:10","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11067:6:10"},"nodeType":"YulFunctionCall","src":"11067:58:10"},"nodeType":"YulExpressionStatement","src":"11067:58:10"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11048:6:10","type":""}],"src":"10950:182:10"},{"body":{"nodeType":"YulBlock","src":"11284:220:10","statements":[{"nodeType":"YulAssignment","src":"11294:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11360:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"11365:2:10","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11301:58:10"},"nodeType":"YulFunctionCall","src":"11301:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11294:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11466:3:10"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"11377:88:10"},"nodeType":"YulFunctionCall","src":"11377:93:10"},"nodeType":"YulExpressionStatement","src":"11377:93:10"},{"nodeType":"YulAssignment","src":"11479:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11490:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"11495:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11486:3:10"},"nodeType":"YulFunctionCall","src":"11486:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11479:3:10"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11272:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11280:3:10","type":""}],"src":"11138:366:10"},{"body":{"nodeType":"YulBlock","src":"11681:248:10","statements":[{"nodeType":"YulAssignment","src":"11691:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11703:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"11714:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11699:3:10"},"nodeType":"YulFunctionCall","src":"11699:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11691:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11738:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"11749:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11734:3:10"},"nodeType":"YulFunctionCall","src":"11734:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11757:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"11763:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11753:3:10"},"nodeType":"YulFunctionCall","src":"11753:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11727:6:10"},"nodeType":"YulFunctionCall","src":"11727:47:10"},"nodeType":"YulExpressionStatement","src":"11727:47:10"},{"nodeType":"YulAssignment","src":"11783:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11917:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11791:124:10"},"nodeType":"YulFunctionCall","src":"11791:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11783:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11661:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11676:4:10","type":""}],"src":"11510:419:10"},{"body":{"nodeType":"YulBlock","src":"12041:129:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12063:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"12071:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12059:3:10"},"nodeType":"YulFunctionCall","src":"12059:14:10"},{"hexValue":"416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e","kind":"string","nodeType":"YulLiteral","src":"12075:34:10","type":"","value":"AccessControl: sender must be an"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12052:6:10"},"nodeType":"YulFunctionCall","src":"12052:58:10"},"nodeType":"YulExpressionStatement","src":"12052:58:10"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12131:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"12139:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12127:3:10"},"nodeType":"YulFunctionCall","src":"12127:15:10"},{"hexValue":"2061646d696e20746f207265766f6b65","kind":"string","nodeType":"YulLiteral","src":"12144:18:10","type":"","value":" admin to revoke"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12120:6:10"},"nodeType":"YulFunctionCall","src":"12120:43:10"},"nodeType":"YulExpressionStatement","src":"12120:43:10"}]},"name":"store_literal_in_memory_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12033:6:10","type":""}],"src":"11935:235:10"},{"body":{"nodeType":"YulBlock","src":"12322:220:10","statements":[{"nodeType":"YulAssignment","src":"12332:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12398:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"12403:2:10","type":"","value":"48"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12339:58:10"},"nodeType":"YulFunctionCall","src":"12339:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12332:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12504:3:10"}],"functionName":{"name":"store_literal_in_memory_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3","nodeType":"YulIdentifier","src":"12415:88:10"},"nodeType":"YulFunctionCall","src":"12415:93:10"},"nodeType":"YulExpressionStatement","src":"12415:93:10"},{"nodeType":"YulAssignment","src":"12517:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12528:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"12533:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12524:3:10"},"nodeType":"YulFunctionCall","src":"12524:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12517:3:10"}]}]},"name":"abi_encode_t_stringliteral_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12310:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12318:3:10","type":""}],"src":"12176:366:10"},{"body":{"nodeType":"YulBlock","src":"12719:248:10","statements":[{"nodeType":"YulAssignment","src":"12729:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12741:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"12752:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12737:3:10"},"nodeType":"YulFunctionCall","src":"12737:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12729:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12776:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"12787:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12772:3:10"},"nodeType":"YulFunctionCall","src":"12772:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12795:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"12801:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12791:3:10"},"nodeType":"YulFunctionCall","src":"12791:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12765:6:10"},"nodeType":"YulFunctionCall","src":"12765:47:10"},"nodeType":"YulExpressionStatement","src":"12765:47:10"},{"nodeType":"YulAssignment","src":"12821:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12955:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12829:124:10"},"nodeType":"YulFunctionCall","src":"12829:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12821:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12699:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12714:4:10","type":""}],"src":"12548:419:10"},{"body":{"nodeType":"YulBlock","src":"13079:119:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13101:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"13109:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13097:3:10"},"nodeType":"YulFunctionCall","src":"13097:14:10"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"13113:34:10","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13090:6:10"},"nodeType":"YulFunctionCall","src":"13090:58:10"},"nodeType":"YulExpressionStatement","src":"13090:58:10"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13169:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"13177:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13165:3:10"},"nodeType":"YulFunctionCall","src":"13165:15:10"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"13182:8:10","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13158:6:10"},"nodeType":"YulFunctionCall","src":"13158:33:10"},"nodeType":"YulExpressionStatement","src":"13158:33:10"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13071:6:10","type":""}],"src":"12973:225:10"},{"body":{"nodeType":"YulBlock","src":"13350:220:10","statements":[{"nodeType":"YulAssignment","src":"13360:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13426:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"13431:2:10","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13367:58:10"},"nodeType":"YulFunctionCall","src":"13367:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13360:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13532:3:10"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"13443:88:10"},"nodeType":"YulFunctionCall","src":"13443:93:10"},"nodeType":"YulExpressionStatement","src":"13443:93:10"},{"nodeType":"YulAssignment","src":"13545:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13556:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"13561:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13552:3:10"},"nodeType":"YulFunctionCall","src":"13552:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13545:3:10"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13338:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13346:3:10","type":""}],"src":"13204:366:10"},{"body":{"nodeType":"YulBlock","src":"13747:248:10","statements":[{"nodeType":"YulAssignment","src":"13757:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13769:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"13780:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13765:3:10"},"nodeType":"YulFunctionCall","src":"13765:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13757:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13804:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"13815:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13800:3:10"},"nodeType":"YulFunctionCall","src":"13800:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13823:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"13829:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13819:3:10"},"nodeType":"YulFunctionCall","src":"13819:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13793:6:10"},"nodeType":"YulFunctionCall","src":"13793:47:10"},"nodeType":"YulExpressionStatement","src":"13793:47:10"},{"nodeType":"YulAssignment","src":"13849:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13983:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13857:124:10"},"nodeType":"YulFunctionCall","src":"13857:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13849:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13727:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13742:4:10","type":""}],"src":"13576:419:10"},{"body":{"nodeType":"YulBlock","src":"14107:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14129:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"14137:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14125:3:10"},"nodeType":"YulFunctionCall","src":"14125:14:10"},{"hexValue":"436f6c6c61746572616c204164647265737320416c7265616479204164646564","kind":"string","nodeType":"YulLiteral","src":"14141:34:10","type":"","value":"Collateral Address Already Added"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14118:6:10"},"nodeType":"YulFunctionCall","src":"14118:58:10"},"nodeType":"YulExpressionStatement","src":"14118:58:10"}]},"name":"store_literal_in_memory_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14099:6:10","type":""}],"src":"14001:182:10"},{"body":{"nodeType":"YulBlock","src":"14335:220:10","statements":[{"nodeType":"YulAssignment","src":"14345:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14411:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"14416:2:10","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14352:58:10"},"nodeType":"YulFunctionCall","src":"14352:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14345:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14517:3:10"}],"functionName":{"name":"store_literal_in_memory_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0","nodeType":"YulIdentifier","src":"14428:88:10"},"nodeType":"YulFunctionCall","src":"14428:93:10"},"nodeType":"YulExpressionStatement","src":"14428:93:10"},{"nodeType":"YulAssignment","src":"14530:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14541:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"14546:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14537:3:10"},"nodeType":"YulFunctionCall","src":"14537:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14530:3:10"}]}]},"name":"abi_encode_t_stringliteral_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14323:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14331:3:10","type":""}],"src":"14189:366:10"},{"body":{"nodeType":"YulBlock","src":"14732:248:10","statements":[{"nodeType":"YulAssignment","src":"14742:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14754:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"14765:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14750:3:10"},"nodeType":"YulFunctionCall","src":"14750:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14742:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14789:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"14800:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14785:3:10"},"nodeType":"YulFunctionCall","src":"14785:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14808:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"14814:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14804:3:10"},"nodeType":"YulFunctionCall","src":"14804:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14778:6:10"},"nodeType":"YulFunctionCall","src":"14778:47:10"},"nodeType":"YulExpressionStatement","src":"14778:47:10"},{"nodeType":"YulAssignment","src":"14834:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14968:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14842:124:10"},"nodeType":"YulFunctionCall","src":"14842:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14834:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14712:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14727:4:10","type":""}],"src":"14561:419:10"},{"body":{"nodeType":"YulBlock","src":"15112:206:10","statements":[{"nodeType":"YulAssignment","src":"15122:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15134:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15145:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15130:3:10"},"nodeType":"YulFunctionCall","src":"15130:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15122:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15202:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15215:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15226:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15211:3:10"},"nodeType":"YulFunctionCall","src":"15211:17:10"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"15158:43:10"},"nodeType":"YulFunctionCall","src":"15158:71:10"},"nodeType":"YulExpressionStatement","src":"15158:71:10"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15283:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15296:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15307:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15292:3:10"},"nodeType":"YulFunctionCall","src":"15292:18:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"15239:43:10"},"nodeType":"YulFunctionCall","src":"15239:72:10"},"nodeType":"YulExpressionStatement","src":"15239:72:10"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15076:9:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15088:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15096:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15107:4:10","type":""}],"src":"14986:332:10"},{"body":{"nodeType":"YulBlock","src":"15430:74:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15452:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"15460:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15448:3:10"},"nodeType":"YulFunctionCall","src":"15448:14:10"},{"hexValue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","kind":"string","nodeType":"YulLiteral","src":"15464:32:10","type":"","value":"SafeMath: subtraction overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15441:6:10"},"nodeType":"YulFunctionCall","src":"15441:56:10"},"nodeType":"YulExpressionStatement","src":"15441:56:10"}]},"name":"store_literal_in_memory_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15422:6:10","type":""}],"src":"15324:180:10"},{"body":{"nodeType":"YulBlock","src":"15656:220:10","statements":[{"nodeType":"YulAssignment","src":"15666:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15732:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"15737:2:10","type":"","value":"30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15673:58:10"},"nodeType":"YulFunctionCall","src":"15673:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15666:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15838:3:10"}],"functionName":{"name":"store_literal_in_memory_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","nodeType":"YulIdentifier","src":"15749:88:10"},"nodeType":"YulFunctionCall","src":"15749:93:10"},"nodeType":"YulExpressionStatement","src":"15749:93:10"},{"nodeType":"YulAssignment","src":"15851:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15862:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"15867:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15858:3:10"},"nodeType":"YulFunctionCall","src":"15858:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15851:3:10"}]}]},"name":"abi_encode_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15644:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15652:3:10","type":""}],"src":"15510:366:10"},{"body":{"nodeType":"YulBlock","src":"16053:248:10","statements":[{"nodeType":"YulAssignment","src":"16063:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16075:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16086:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16071:3:10"},"nodeType":"YulFunctionCall","src":"16071:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16063:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16110:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16121:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16106:3:10"},"nodeType":"YulFunctionCall","src":"16106:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16129:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"16135:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16125:3:10"},"nodeType":"YulFunctionCall","src":"16125:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16099:6:10"},"nodeType":"YulFunctionCall","src":"16099:47:10"},"nodeType":"YulExpressionStatement","src":"16099:47:10"},{"nodeType":"YulAssignment","src":"16155:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16289:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16163:124:10"},"nodeType":"YulFunctionCall","src":"16163:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16155:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16033:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16048:4:10","type":""}],"src":"15882:419:10"},{"body":{"nodeType":"YulBlock","src":"16352:149:10","statements":[{"nodeType":"YulAssignment","src":"16362:25:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16385:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"16367:17:10"},"nodeType":"YulFunctionCall","src":"16367:20:10"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"16362:1:10"}]},{"nodeType":"YulAssignment","src":"16396:25:10","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"16419:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"16401:17:10"},"nodeType":"YulFunctionCall","src":"16401:20:10"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"16396:1:10"}]},{"nodeType":"YulAssignment","src":"16430:17:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16442:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"16445:1:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16438:3:10"},"nodeType":"YulFunctionCall","src":"16438:9:10"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"16430:4:10"}]},{"body":{"nodeType":"YulBlock","src":"16472:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16474:16:10"},"nodeType":"YulFunctionCall","src":"16474:18:10"},"nodeType":"YulExpressionStatement","src":"16474:18:10"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"16463:4:10"},{"name":"x","nodeType":"YulIdentifier","src":"16469:1:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16460:2:10"},"nodeType":"YulFunctionCall","src":"16460:11:10"},"nodeType":"YulIf","src":"16457:37:10"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"16338:1:10","type":""},{"name":"y","nodeType":"YulTypedName","src":"16341:1:10","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"16347:4:10","type":""}],"src":"16307:194:10"},{"body":{"nodeType":"YulBlock","src":"16661:288:10","statements":[{"nodeType":"YulAssignment","src":"16671:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16683:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16694:2:10","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16679:3:10"},"nodeType":"YulFunctionCall","src":"16679:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16671:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16751:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16764:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16775:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16760:3:10"},"nodeType":"YulFunctionCall","src":"16760:17:10"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16707:43:10"},"nodeType":"YulFunctionCall","src":"16707:71:10"},"nodeType":"YulExpressionStatement","src":"16707:71:10"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16832:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16845:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16856:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16841:3:10"},"nodeType":"YulFunctionCall","src":"16841:18:10"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16788:43:10"},"nodeType":"YulFunctionCall","src":"16788:72:10"},"nodeType":"YulExpressionStatement","src":"16788:72:10"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16914:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16927:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16938:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16923:3:10"},"nodeType":"YulFunctionCall","src":"16923:18:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16870:43:10"},"nodeType":"YulFunctionCall","src":"16870:72:10"},"nodeType":"YulExpressionStatement","src":"16870:72:10"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16617:9:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16629:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16637:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16645:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16656:4:10","type":""}],"src":"16507:442:10"},{"body":{"nodeType":"YulBlock","src":"16999:147:10","statements":[{"nodeType":"YulAssignment","src":"17009:25:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17032:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17014:17:10"},"nodeType":"YulFunctionCall","src":"17014:20:10"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"17009:1:10"}]},{"nodeType":"YulAssignment","src":"17043:25:10","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17066:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17048:17:10"},"nodeType":"YulFunctionCall","src":"17048:20:10"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"17043:1:10"}]},{"nodeType":"YulAssignment","src":"17077:16:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17088:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"17091:1:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17084:3:10"},"nodeType":"YulFunctionCall","src":"17084:9:10"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"17077:3:10"}]},{"body":{"nodeType":"YulBlock","src":"17117:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17119:16:10"},"nodeType":"YulFunctionCall","src":"17119:18:10"},"nodeType":"YulExpressionStatement","src":"17119:18:10"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17109:1:10"},{"name":"sum","nodeType":"YulIdentifier","src":"17112:3:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17106:2:10"},"nodeType":"YulFunctionCall","src":"17106:10:10"},"nodeType":"YulIf","src":"17103:36:10"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"16986:1:10","type":""},{"name":"y","nodeType":"YulTypedName","src":"16989:1:10","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"16995:3:10","type":""}],"src":"16955:191:10"},{"body":{"nodeType":"YulBlock","src":"17258:71:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17280:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"17288:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17276:3:10"},"nodeType":"YulFunctionCall","src":"17276:14:10"},{"hexValue":"536166654d6174683a206164646974696f6e206f766572666c6f77","kind":"string","nodeType":"YulLiteral","src":"17292:29:10","type":"","value":"SafeMath: addition overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17269:6:10"},"nodeType":"YulFunctionCall","src":"17269:53:10"},"nodeType":"YulExpressionStatement","src":"17269:53:10"}]},"name":"store_literal_in_memory_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17250:6:10","type":""}],"src":"17152:177:10"},{"body":{"nodeType":"YulBlock","src":"17481:220:10","statements":[{"nodeType":"YulAssignment","src":"17491:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17557:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"17562:2:10","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17498:58:10"},"nodeType":"YulFunctionCall","src":"17498:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17491:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17663:3:10"}],"functionName":{"name":"store_literal_in_memory_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","nodeType":"YulIdentifier","src":"17574:88:10"},"nodeType":"YulFunctionCall","src":"17574:93:10"},"nodeType":"YulExpressionStatement","src":"17574:93:10"},{"nodeType":"YulAssignment","src":"17676:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17687:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"17692:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17683:3:10"},"nodeType":"YulFunctionCall","src":"17683:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17676:3:10"}]}]},"name":"abi_encode_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17469:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17477:3:10","type":""}],"src":"17335:366:10"},{"body":{"nodeType":"YulBlock","src":"17878:248:10","statements":[{"nodeType":"YulAssignment","src":"17888:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17900:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"17911:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17896:3:10"},"nodeType":"YulFunctionCall","src":"17896:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17888:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17935:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"17946:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17931:3:10"},"nodeType":"YulFunctionCall","src":"17931:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17954:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"17960:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17950:3:10"},"nodeType":"YulFunctionCall","src":"17950:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17924:6:10"},"nodeType":"YulFunctionCall","src":"17924:47:10"},"nodeType":"YulExpressionStatement","src":"17924:47:10"},{"nodeType":"YulAssignment","src":"17980:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18114:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17988:124:10"},"nodeType":"YulFunctionCall","src":"17988:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17980:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17858:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17873:4:10","type":""}],"src":"17707:419:10"},{"body":{"nodeType":"YulBlock","src":"18172:76:10","statements":[{"body":{"nodeType":"YulBlock","src":"18226:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18235:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18238:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18228:6:10"},"nodeType":"YulFunctionCall","src":"18228:12:10"},"nodeType":"YulExpressionStatement","src":"18228:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18195:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18217:5:10"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"18202:14:10"},"nodeType":"YulFunctionCall","src":"18202:21:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18192:2:10"},"nodeType":"YulFunctionCall","src":"18192:32:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18185:6:10"},"nodeType":"YulFunctionCall","src":"18185:40:10"},"nodeType":"YulIf","src":"18182:60:10"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18165:5:10","type":""}],"src":"18132:116:10"},{"body":{"nodeType":"YulBlock","src":"18314:77:10","statements":[{"nodeType":"YulAssignment","src":"18324:22:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18339:6:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18333:5:10"},"nodeType":"YulFunctionCall","src":"18333:13:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18324:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18379:5:10"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"18355:23:10"},"nodeType":"YulFunctionCall","src":"18355:30:10"},"nodeType":"YulExpressionStatement","src":"18355:30:10"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"18292:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"18300:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"18308:5:10","type":""}],"src":"18254:137:10"},{"body":{"nodeType":"YulBlock","src":"18471:271:10","statements":[{"body":{"nodeType":"YulBlock","src":"18517:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"18519:77:10"},"nodeType":"YulFunctionCall","src":"18519:79:10"},"nodeType":"YulExpressionStatement","src":"18519:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18492:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"18501:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18488:3:10"},"nodeType":"YulFunctionCall","src":"18488:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"18513:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18484:3:10"},"nodeType":"YulFunctionCall","src":"18484:32:10"},"nodeType":"YulIf","src":"18481:119:10"},{"nodeType":"YulBlock","src":"18610:125:10","statements":[{"nodeType":"YulVariableDeclaration","src":"18625:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"18639:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18629:6:10","type":""}]},{"nodeType":"YulAssignment","src":"18654:71:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18697:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"18708:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18693:3:10"},"nodeType":"YulFunctionCall","src":"18693:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18717:7:10"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"18664:28:10"},"nodeType":"YulFunctionCall","src":"18664:61:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18654:6:10"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18441:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18452:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18464:6:10","type":""}],"src":"18397:345:10"},{"body":{"nodeType":"YulBlock","src":"18854:123:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18876:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"18884:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18872:3:10"},"nodeType":"YulFunctionCall","src":"18872:14:10"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"18888:34:10","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18865:6:10"},"nodeType":"YulFunctionCall","src":"18865:58:10"},"nodeType":"YulExpressionStatement","src":"18865:58:10"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18944:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"18952:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18940:3:10"},"nodeType":"YulFunctionCall","src":"18940:15:10"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"18957:12:10","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18933:6:10"},"nodeType":"YulFunctionCall","src":"18933:37:10"},"nodeType":"YulExpressionStatement","src":"18933:37:10"}]},"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18846:6:10","type":""}],"src":"18748:229:10"},{"body":{"nodeType":"YulBlock","src":"19129:220:10","statements":[{"nodeType":"YulAssignment","src":"19139:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19205:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"19210:2:10","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19146:58:10"},"nodeType":"YulFunctionCall","src":"19146:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19139:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19311:3:10"}],"functionName":{"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulIdentifier","src":"19222:88:10"},"nodeType":"YulFunctionCall","src":"19222:93:10"},"nodeType":"YulExpressionStatement","src":"19222:93:10"},{"nodeType":"YulAssignment","src":"19324:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19335:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"19340:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19331:3:10"},"nodeType":"YulFunctionCall","src":"19331:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19324:3:10"}]}]},"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19117:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19125:3:10","type":""}],"src":"18983:366:10"},{"body":{"nodeType":"YulBlock","src":"19526:248:10","statements":[{"nodeType":"YulAssignment","src":"19536:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19548:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"19559:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19544:3:10"},"nodeType":"YulFunctionCall","src":"19544:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19536:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19583:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"19594:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19579:3:10"},"nodeType":"YulFunctionCall","src":"19579:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19602:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"19608:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19598:3:10"},"nodeType":"YulFunctionCall","src":"19598:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19572:6:10"},"nodeType":"YulFunctionCall","src":"19572:47:10"},"nodeType":"YulExpressionStatement","src":"19572:47:10"},{"nodeType":"YulAssignment","src":"19628:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19762:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19636:124:10"},"nodeType":"YulFunctionCall","src":"19636:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19628:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19506:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19521:4:10","type":""}],"src":"19355:419:10"},{"body":{"nodeType":"YulBlock","src":"19886:115:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19908:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"19916:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19904:3:10"},"nodeType":"YulFunctionCall","src":"19904:14:10"},{"hexValue":"456e756d657261626c655365743a20696e646578206f7574206f6620626f756e","kind":"string","nodeType":"YulLiteral","src":"19920:34:10","type":"","value":"EnumerableSet: index out of boun"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19897:6:10"},"nodeType":"YulFunctionCall","src":"19897:58:10"},"nodeType":"YulExpressionStatement","src":"19897:58:10"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19976:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"19984:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19972:3:10"},"nodeType":"YulFunctionCall","src":"19972:15:10"},{"hexValue":"6473","kind":"string","nodeType":"YulLiteral","src":"19989:4:10","type":"","value":"ds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19965:6:10"},"nodeType":"YulFunctionCall","src":"19965:29:10"},"nodeType":"YulExpressionStatement","src":"19965:29:10"}]},"name":"store_literal_in_memory_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19878:6:10","type":""}],"src":"19780:221:10"},{"body":{"nodeType":"YulBlock","src":"20153:220:10","statements":[{"nodeType":"YulAssignment","src":"20163:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20229:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"20234:2:10","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20170:58:10"},"nodeType":"YulFunctionCall","src":"20170:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20163:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20335:3:10"}],"functionName":{"name":"store_literal_in_memory_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb","nodeType":"YulIdentifier","src":"20246:88:10"},"nodeType":"YulFunctionCall","src":"20246:93:10"},"nodeType":"YulExpressionStatement","src":"20246:93:10"},{"nodeType":"YulAssignment","src":"20348:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20359:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"20364:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20355:3:10"},"nodeType":"YulFunctionCall","src":"20355:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20348:3:10"}]}]},"name":"abi_encode_t_stringliteral_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20141:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20149:3:10","type":""}],"src":"20007:366:10"},{"body":{"nodeType":"YulBlock","src":"20550:248:10","statements":[{"nodeType":"YulAssignment","src":"20560:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20572:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"20583:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20568:3:10"},"nodeType":"YulFunctionCall","src":"20568:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20560:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20607:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"20618:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20603:3:10"},"nodeType":"YulFunctionCall","src":"20603:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20626:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"20632:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20622:3:10"},"nodeType":"YulFunctionCall","src":"20622:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20596:6:10"},"nodeType":"YulFunctionCall","src":"20596:47:10"},"nodeType":"YulExpressionStatement","src":"20596:47:10"},{"nodeType":"YulAssignment","src":"20652:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20786:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20660:124:10"},"nodeType":"YulFunctionCall","src":"20660:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20652:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20530:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20545:4:10","type":""}],"src":"20379:419:10"},{"body":{"nodeType":"YulBlock","src":"20832:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20849:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20852:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20842:6:10"},"nodeType":"YulFunctionCall","src":"20842:88:10"},"nodeType":"YulExpressionStatement","src":"20842:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20946:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20949:4:10","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20939:6:10"},"nodeType":"YulFunctionCall","src":"20939:15:10"},"nodeType":"YulExpressionStatement","src":"20939:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20970:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20973:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20963:6:10"},"nodeType":"YulFunctionCall","src":"20963:15:10"},"nodeType":"YulExpressionStatement","src":"20963:15:10"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"20804:180:10"},{"body":{"nodeType":"YulBlock","src":"21018:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21035:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21038:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21028:6:10"},"nodeType":"YulFunctionCall","src":"21028:88:10"},"nodeType":"YulExpressionStatement","src":"21028:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21132:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21135:4:10","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21125:6:10"},"nodeType":"YulFunctionCall","src":"21125:15:10"},"nodeType":"YulExpressionStatement","src":"21125:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21156:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21159:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21149:6:10"},"nodeType":"YulFunctionCall","src":"21149:15:10"},"nodeType":"YulExpressionStatement","src":"21149:15:10"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"20990:180:10"},{"body":{"nodeType":"YulBlock","src":"21282:119:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21304:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"21312:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21300:3:10"},"nodeType":"YulFunctionCall","src":"21300:14:10"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"21316:34:10","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21293:6:10"},"nodeType":"YulFunctionCall","src":"21293:58:10"},"nodeType":"YulExpressionStatement","src":"21293:58:10"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21372:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"21380:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21368:3:10"},"nodeType":"YulFunctionCall","src":"21368:15:10"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"21385:8:10","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21361:6:10"},"nodeType":"YulFunctionCall","src":"21361:33:10"},"nodeType":"YulExpressionStatement","src":"21361:33:10"}]},"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21274:6:10","type":""}],"src":"21176:225:10"},{"body":{"nodeType":"YulBlock","src":"21553:220:10","statements":[{"nodeType":"YulAssignment","src":"21563:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21629:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"21634:2:10","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21570:58:10"},"nodeType":"YulFunctionCall","src":"21570:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21563:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21735:3:10"}],"functionName":{"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulIdentifier","src":"21646:88:10"},"nodeType":"YulFunctionCall","src":"21646:93:10"},"nodeType":"YulExpressionStatement","src":"21646:93:10"},{"nodeType":"YulAssignment","src":"21748:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21759:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"21764:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21755:3:10"},"nodeType":"YulFunctionCall","src":"21755:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21748:3:10"}]}]},"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21541:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21549:3:10","type":""}],"src":"21407:366:10"},{"body":{"nodeType":"YulBlock","src":"21950:248:10","statements":[{"nodeType":"YulAssignment","src":"21960:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21972:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"21983:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21968:3:10"},"nodeType":"YulFunctionCall","src":"21968:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21960:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22007:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"22018:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22003:3:10"},"nodeType":"YulFunctionCall","src":"22003:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22026:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"22032:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22022:3:10"},"nodeType":"YulFunctionCall","src":"22022:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21996:6:10"},"nodeType":"YulFunctionCall","src":"21996:47:10"},"nodeType":"YulExpressionStatement","src":"21996:47:10"},{"nodeType":"YulAssignment","src":"22052:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22186:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22060:124:10"},"nodeType":"YulFunctionCall","src":"22060:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22052:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21930:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21945:4:10","type":""}],"src":"21779:419:10"},{"body":{"nodeType":"YulBlock","src":"22310:73:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22332:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"22340:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22328:3:10"},"nodeType":"YulFunctionCall","src":"22328:14:10"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"22344:31:10","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22321:6:10"},"nodeType":"YulFunctionCall","src":"22321:55:10"},"nodeType":"YulExpressionStatement","src":"22321:55:10"}]},"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22302:6:10","type":""}],"src":"22204:179:10"},{"body":{"nodeType":"YulBlock","src":"22535:220:10","statements":[{"nodeType":"YulAssignment","src":"22545:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22611:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"22616:2:10","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22552:58:10"},"nodeType":"YulFunctionCall","src":"22552:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22545:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22717:3:10"}],"functionName":{"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulIdentifier","src":"22628:88:10"},"nodeType":"YulFunctionCall","src":"22628:93:10"},"nodeType":"YulExpressionStatement","src":"22628:93:10"},{"nodeType":"YulAssignment","src":"22730:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22741:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"22746:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22737:3:10"},"nodeType":"YulFunctionCall","src":"22737:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22730:3:10"}]}]},"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22523:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22531:3:10","type":""}],"src":"22389:366:10"},{"body":{"nodeType":"YulBlock","src":"22932:248:10","statements":[{"nodeType":"YulAssignment","src":"22942:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22954:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"22965:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22950:3:10"},"nodeType":"YulFunctionCall","src":"22950:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22942:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22989:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"23000:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22985:3:10"},"nodeType":"YulFunctionCall","src":"22985:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23008:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"23014:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23004:3:10"},"nodeType":"YulFunctionCall","src":"23004:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22978:6:10"},"nodeType":"YulFunctionCall","src":"22978:47:10"},"nodeType":"YulExpressionStatement","src":"22978:47:10"},{"nodeType":"YulAssignment","src":"23034:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23168:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23042:124:10"},"nodeType":"YulFunctionCall","src":"23042:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23034:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22912:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22927:4:10","type":""}],"src":"22761:419:10"},{"body":{"nodeType":"YulBlock","src":"23244:40:10","statements":[{"nodeType":"YulAssignment","src":"23255:22:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23271:5:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23265:5:10"},"nodeType":"YulFunctionCall","src":"23265:12:10"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"23255:6:10"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23227:5:10","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"23237:6:10","type":""}],"src":"23186:98:10"},{"body":{"nodeType":"YulBlock","src":"23403:34:10","statements":[{"nodeType":"YulAssignment","src":"23413:18:10","value":{"name":"pos","nodeType":"YulIdentifier","src":"23428:3:10"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"23413:11:10"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23375:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"23380:6:10","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"23391:11:10","type":""}],"src":"23290:147:10"},{"body":{"nodeType":"YulBlock","src":"23505:184:10","statements":[{"nodeType":"YulVariableDeclaration","src":"23515:10:10","value":{"kind":"number","nodeType":"YulLiteral","src":"23524:1:10","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"23519:1:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"23584:63:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23609:3:10"},{"name":"i","nodeType":"YulIdentifier","src":"23614:1:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23605:3:10"},"nodeType":"YulFunctionCall","src":"23605:11:10"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23628:3:10"},{"name":"i","nodeType":"YulIdentifier","src":"23633:1:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23624:3:10"},"nodeType":"YulFunctionCall","src":"23624:11:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23618:5:10"},"nodeType":"YulFunctionCall","src":"23618:18:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23598:6:10"},"nodeType":"YulFunctionCall","src":"23598:39:10"},"nodeType":"YulExpressionStatement","src":"23598:39:10"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23545:1:10"},{"name":"length","nodeType":"YulIdentifier","src":"23548:6:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23542:2:10"},"nodeType":"YulFunctionCall","src":"23542:13:10"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"23556:19:10","statements":[{"nodeType":"YulAssignment","src":"23558:15:10","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23567:1:10"},{"kind":"number","nodeType":"YulLiteral","src":"23570:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23563:3:10"},"nodeType":"YulFunctionCall","src":"23563:10:10"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"23558:1:10"}]}]},"pre":{"nodeType":"YulBlock","src":"23538:3:10","statements":[]},"src":"23534:113:10"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23667:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"23672:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23663:3:10"},"nodeType":"YulFunctionCall","src":"23663:16:10"},{"kind":"number","nodeType":"YulLiteral","src":"23681:1:10","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23656:6:10"},"nodeType":"YulFunctionCall","src":"23656:27:10"},"nodeType":"YulExpressionStatement","src":"23656:27:10"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"23487:3:10","type":""},{"name":"dst","nodeType":"YulTypedName","src":"23492:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"23497:6:10","type":""}],"src":"23443:246:10"},{"body":{"nodeType":"YulBlock","src":"23803:278:10","statements":[{"nodeType":"YulVariableDeclaration","src":"23813:52:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23859:5:10"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"23827:31:10"},"nodeType":"YulFunctionCall","src":"23827:38:10"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"23817:6:10","type":""}]},{"nodeType":"YulAssignment","src":"23874:95:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23957:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"23962:6:10"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23881:75:10"},"nodeType":"YulFunctionCall","src":"23881:88:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23874:3:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24017:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"24024:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24013:3:10"},"nodeType":"YulFunctionCall","src":"24013:16:10"},{"name":"pos","nodeType":"YulIdentifier","src":"24031:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"24036:6:10"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"23978:34:10"},"nodeType":"YulFunctionCall","src":"23978:65:10"},"nodeType":"YulExpressionStatement","src":"23978:65:10"},{"nodeType":"YulAssignment","src":"24052:23:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24063:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"24068:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24059:3:10"},"nodeType":"YulFunctionCall","src":"24059:16:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24052:3:10"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23784:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"23791:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23799:3:10","type":""}],"src":"23695:386:10"},{"body":{"nodeType":"YulBlock","src":"24221:137:10","statements":[{"nodeType":"YulAssignment","src":"24232:100:10","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24319:6:10"},{"name":"pos","nodeType":"YulIdentifier","src":"24328:3:10"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24239:79:10"},"nodeType":"YulFunctionCall","src":"24239:93:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24232:3:10"}]},{"nodeType":"YulAssignment","src":"24342:10:10","value":{"name":"pos","nodeType":"YulIdentifier","src":"24349:3:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24342:3:10"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24200:3:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24206:6:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24217:3:10","type":""}],"src":"24087:271:10"},{"body":{"nodeType":"YulBlock","src":"24423:40:10","statements":[{"nodeType":"YulAssignment","src":"24434:22:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24450:5:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24444:5:10"},"nodeType":"YulFunctionCall","src":"24444:12:10"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"24434:6:10"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24406:5:10","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"24416:6:10","type":""}],"src":"24364:99:10"},{"body":{"nodeType":"YulBlock","src":"24517:54:10","statements":[{"nodeType":"YulAssignment","src":"24527:38:10","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24545:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"24552:2:10","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24541:3:10"},"nodeType":"YulFunctionCall","src":"24541:14:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24561:2:10","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24557:3:10"},"nodeType":"YulFunctionCall","src":"24557:7:10"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24537:3:10"},"nodeType":"YulFunctionCall","src":"24537:28:10"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"24527:6:10"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24500:5:10","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"24510:6:10","type":""}],"src":"24469:102:10"},{"body":{"nodeType":"YulBlock","src":"24669:285:10","statements":[{"nodeType":"YulVariableDeclaration","src":"24679:53:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24726:5:10"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"24693:32:10"},"nodeType":"YulFunctionCall","src":"24693:39:10"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"24683:6:10","type":""}]},{"nodeType":"YulAssignment","src":"24741:78:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24807:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"24812:6:10"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24748:58:10"},"nodeType":"YulFunctionCall","src":"24748:71:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24741:3:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24867:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"24874:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24863:3:10"},"nodeType":"YulFunctionCall","src":"24863:16:10"},{"name":"pos","nodeType":"YulIdentifier","src":"24881:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"24886:6:10"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"24828:34:10"},"nodeType":"YulFunctionCall","src":"24828:65:10"},"nodeType":"YulExpressionStatement","src":"24828:65:10"},{"nodeType":"YulAssignment","src":"24902:46:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24913:3:10"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"24940:6:10"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"24918:21:10"},"nodeType":"YulFunctionCall","src":"24918:29:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24909:3:10"},"nodeType":"YulFunctionCall","src":"24909:39:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24902:3:10"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24650:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24657:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24665:3:10","type":""}],"src":"24577:377:10"},{"body":{"nodeType":"YulBlock","src":"25078:195:10","statements":[{"nodeType":"YulAssignment","src":"25088:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25100:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"25111:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25096:3:10"},"nodeType":"YulFunctionCall","src":"25096:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25088:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25135:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"25146:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25131:3:10"},"nodeType":"YulFunctionCall","src":"25131:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25154:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"25160:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25150:3:10"},"nodeType":"YulFunctionCall","src":"25150:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25124:6:10"},"nodeType":"YulFunctionCall","src":"25124:47:10"},"nodeType":"YulExpressionStatement","src":"25124:47:10"},{"nodeType":"YulAssignment","src":"25180:86:10","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25252:6:10"},{"name":"tail","nodeType":"YulIdentifier","src":"25261:4:10"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25188:63:10"},"nodeType":"YulFunctionCall","src":"25188:78:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25180:4:10"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25050:9:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25062:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25073:4:10","type":""}],"src":"24960:313:10"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IERC20_$828_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IERC20_$828_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC20_$828_to_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IERC20_$828_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_contract$_IERC20_$828_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_contract$_IERC20_$828(value) -> cleaned {\n        cleaned := cleanup_t_address(value)\n    }\n\n    function validator_revert_t_contract$_IERC20_$828(value) {\n        if iszero(eq(value, cleanup_t_contract$_IERC20_$828(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_contract$_IERC20_$828(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_contract$_IERC20_$828(value)\n    }\n\n    function abi_decode_tuple_t_contract$_IERC20_$828(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_contract$_IERC20_$828(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: sender must be an\")\n\n        mstore(add(memPtr, 32), \" admin to grant\")\n\n    }\n\n    function abi_encode_t_stringliteral_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0ba7116025f1ef6b158a2bd2238e617f30e17c9e456917d901086ca4f8ad2811_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd(memPtr) {\n\n        mstore(add(memPtr, 0), \"Not allowed\")\n\n    }\n\n    function abi_encode_t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 11)\n        store_literal_in_memory_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: sender must be an\")\n\n        mstore(add(memPtr, 32), \" admin to revoke\")\n\n    }\n\n    function abi_encode_t_stringliteral_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 48)\n        store_literal_in_memory_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_64344570eab7406ca49d34d38bf2b2496dfda914405390c5057c8b0aabf798a3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0(memPtr) {\n\n        mstore(add(memPtr, 0), \"Collateral Address Already Added\")\n\n    }\n\n    function abi_encode_t_stringliteral_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b93291308e9f1dd4e6702681e5411a281051c59439ab7ff66533111821917ac0_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeMath: subtraction overflow\")\n\n    }\n\n    function abi_encode_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeMath: addition overflow\")\n\n    }\n\n    function abi_encode_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb(memPtr) {\n\n        mstore(add(memPtr, 0), \"EnumerableSet: index out of boun\")\n\n        mstore(add(memPtr, 32), \"ds\")\n\n    }\n\n    function abi_encode_t_stringliteral_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_045d6834e6193a687012a3ad777f612279e549b6945364d9d2324f48610d3cbb_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x31() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n","id":10,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063ca15c87311610071578063ca15c873146102a5578063d547741f146102d5578063ec87621c146102f1578063ece137321461030f578063f2fde38b1461032b5761010b565b80638da5cb5b146102095780639010d07c1461022757806391d1485414610257578063a217fddf146102875761010b565b80633b61f098116100de5780633b61f098146101a95780635306f102146101c5578063715018a6146101e3578063767a7b05146101ed5761010b565b8063248a9ca314610110578063279ba28d146101405780632f2ff15d1461017157806336568abe1461018d575b600080fd5b61012a600480360381019061012591906115df565b610347565b604051610137919061161b565b60405180910390f35b61015a6004803603810190610155919061166c565b610367565b604051610168929190611727565b60405180910390f35b61018b6004803603810190610186919061178e565b6103ab565b005b6101a760048036038101906101a2919061178e565b61041f565b005b6101c360048036038101906101be919061180c565b6104a2565b005b6101cd61058d565b6040516101da9190611839565b60405180910390f35b6101eb610593565b005b61020760048036038101906102029190611854565b6106cd565b005b610211610831565b60405161021e91906118a3565b60405180910390f35b610241600480360381019061023c91906118be565b61085a565b60405161024e91906118a3565b60405180910390f35b610271600480360381019061026c919061178e565b61088c565b60405161027e9190611919565b60405180910390f35b61028f6108be565b60405161029c919061161b565b60405180910390f35b6102bf60048036038101906102ba91906115df565b6108c5565b6040516102cc9190611839565b60405180910390f35b6102ef60048036038101906102ea919061178e565b6108ec565b005b6102f9610960565b604051610306919061161b565b60405180910390f35b61032960048036038101906103249190611854565b610984565b005b61034560048036038101906103409190611934565b610ae2565b005b600060026000838152602001908152602001600020600201549050919050565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b6103d260026000848152602001908152602001600020600201546103cd610c8a565b61088c565b610411576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610408906119e4565b60405180910390fd5b61041b8282610c92565b5050565b610427610c8a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90611a76565b60405180910390fd5b61049e8282610d26565b5050565b6104d37f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086104ce610c8a565b61088c565b610512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050990611ae2565b60405180910390fd5b61051b81610dba565b8060046000600354815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003600081548092919061058590611b31565b919050555050565b60035481565b61059b610c8a565b73ffffffffffffffffffffffffffffffffffffffff166105b9610831565b73ffffffffffffffffffffffffffffffffffffffff161461060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690611bc5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6106fe7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086106f9610c8a565b61088c565b61073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490611ae2565b60405180910390fd5b60006004600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006004600085815260200190815260200160002060010154905082811061082b576107c533848473ffffffffffffffffffffffffffffffffffffffff16610e829092919063ffffffff16565b6107d88382610f0890919063ffffffff16565b6004600086815260200190815260200160002060010181905550837f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8846040516108229190611839565b60405180910390a25b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006108848260026000868152602001908152602001600020600001610f6190919063ffffffff16565b905092915050565b60006108b68260026000868152602001908152602001600020600001610f7b90919063ffffffff16565b905092915050565b6000801b81565b60006108e560026000848152602001908152602001600020600001610fab565b9050919050565b610913600260008481526020019081526020016000206002015461090e610c8a565b61088c565b610952576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094990611c57565b60405180910390fd5b61095c8282610d26565b5050565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b6109b57f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086109b0610c8a565b61088c565b6109f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109eb90611ae2565b60405180910390fd5b60006004600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a5c3330848473ffffffffffffffffffffffffffffffffffffffff16610fc0909392919063ffffffff16565b600060046000858152602001908152602001600020600101549050610a8a838261104990919063ffffffff16565b6004600086815260200190815260200160002060010181905550837fe2bbb158ea830e9efa91fa2a38c9708f9f6109a6c571d6a762b53a83776a3d6784604051610ad49190611839565b60405180910390a250505050565b610aea610c8a565b73ffffffffffffffffffffffffffffffffffffffff16610b08610831565b73ffffffffffffffffffffffffffffffffffffffff1614610b5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5590611bc5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc490611ce9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b610cba81600260008581526020019081526020016000206000016110a790919063ffffffff16565b15610d2257610cc7610c8a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b610d4e81600260008581526020019081526020016000206000016110d790919063ffffffff16565b15610db657610d5b610c8a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60005b600354811015610e7e578173ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6290611d55565b60405180910390fd5b8080610e7690611b31565b915050610dbd565b5050565b610f038363a9059cbb60e01b8484604051602401610ea1929190611d75565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611107565b505050565b600082821115610f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4490611dea565b60405180910390fd5b8183610f599190611e0a565b905092915050565b6000610f7083600001836111ce565b60001c905092915050565b6000610fa3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611242565b905092915050565b6000610fb982600001611265565b9050919050565b611043846323b872dd60e01b858585604051602401610fe193929190611e3e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611107565b50505050565b60008082846110589190611e75565b90508381101561109d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109490611ef5565b60405180910390fd5b8091505092915050565b60006110cf836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611276565b905092915050565b60006110ff836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6112e6565b905092915050565b6000611169826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166113fe9092919063ffffffff16565b90506000815111156111c957808060200190518101906111899190611f41565b6111c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bf90611fe0565b60405180910390fd5b5b505050565b600081836000018054905011611219576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121090612072565b60405180910390fd5b82600001828154811061122f5761122e612092565b5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b60006112828383611242565b6112db5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506112e0565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081146113f25760006001826113189190611e0a565b90506000600186600001805490506113309190611e0a565b9050600086600001828154811061134a57611349612092565b5b906000526020600020015490508087600001848154811061136e5761136d612092565b5b90600052602060002001819055506001836113899190611e75565b87600101600083815260200190815260200160002081905550866000018054806113b6576113b56120c1565b5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506113f8565b60009150505b92915050565b606061140d8484600085611416565b90509392505050565b60608247101561145b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145290612162565b60405180910390fd5b6114648561152a565b6114a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149a906121ce565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114cc919061225f565b60006040518083038185875af1925050503d8060008114611509576040519150601f19603f3d011682016040523d82523d6000602084013e61150e565b606091505b509150915061151e82828661153d565b92505050949350505050565b600080823b905060008111915050919050565b6060831561154d5782905061159d565b6000835111156115605782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159491906122cb565b60405180910390fd5b9392505050565b600080fd5b6000819050919050565b6115bc816115a9565b81146115c757600080fd5b50565b6000813590506115d9816115b3565b92915050565b6000602082840312156115f5576115f46115a4565b5b6000611603848285016115ca565b91505092915050565b611615816115a9565b82525050565b6000602082019050611630600083018461160c565b92915050565b6000819050919050565b61164981611636565b811461165457600080fd5b50565b60008135905061166681611640565b92915050565b600060208284031215611682576116816115a4565b5b600061169084828501611657565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006116de6116d96116d484611699565b6116b9565b611699565b9050919050565b60006116f0826116c3565b9050919050565b6000611702826116e5565b9050919050565b611712816116f7565b82525050565b61172181611636565b82525050565b600060408201905061173c6000830185611709565b6117496020830184611718565b9392505050565b600061175b82611699565b9050919050565b61176b81611750565b811461177657600080fd5b50565b60008135905061178881611762565b92915050565b600080604083850312156117a5576117a46115a4565b5b60006117b3858286016115ca565b92505060206117c485828601611779565b9150509250929050565b60006117d982611750565b9050919050565b6117e9816117ce565b81146117f457600080fd5b50565b600081359050611806816117e0565b92915050565b600060208284031215611822576118216115a4565b5b6000611830848285016117f7565b91505092915050565b600060208201905061184e6000830184611718565b92915050565b6000806040838503121561186b5761186a6115a4565b5b600061187985828601611657565b925050602061188a85828601611657565b9150509250929050565b61189d81611750565b82525050565b60006020820190506118b86000830184611894565b92915050565b600080604083850312156118d5576118d46115a4565b5b60006118e3858286016115ca565b92505060206118f485828601611657565b9150509250929050565b60008115159050919050565b611913816118fe565b82525050565b600060208201905061192e600083018461190a565b92915050565b60006020828403121561194a576119496115a4565b5b600061195884828501611779565b91505092915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008201527f2061646d696e20746f206772616e740000000000000000000000000000000000602082015250565b60006119ce602f83611961565b91506119d982611972565b604082019050919050565b600060208201905081810360008301526119fd816119c1565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000611a60602f83611961565b9150611a6b82611a04565b604082019050919050565b60006020820190508181036000830152611a8f81611a53565b9050919050565b7f4e6f7420616c6c6f776564000000000000000000000000000000000000000000600082015250565b6000611acc600b83611961565b9150611ad782611a96565b602082019050919050565b60006020820190508181036000830152611afb81611abf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b3c82611636565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b6e57611b6d611b02565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611baf602083611961565b9150611bba82611b79565b602082019050919050565b60006020820190508181036000830152611bde81611ba2565b9050919050565b7f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000602082015250565b6000611c41603083611961565b9150611c4c82611be5565b604082019050919050565b60006020820190508181036000830152611c7081611c34565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611cd3602683611961565b9150611cde82611c77565b604082019050919050565b60006020820190508181036000830152611d0281611cc6565b9050919050565b7f436f6c6c61746572616c204164647265737320416c7265616479204164646564600082015250565b6000611d3f602083611961565b9150611d4a82611d09565b602082019050919050565b60006020820190508181036000830152611d6e81611d32565b9050919050565b6000604082019050611d8a6000830185611894565b611d976020830184611718565b9392505050565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000600082015250565b6000611dd4601e83611961565b9150611ddf82611d9e565b602082019050919050565b60006020820190508181036000830152611e0381611dc7565b9050919050565b6000611e1582611636565b9150611e2083611636565b9250828203905081811115611e3857611e37611b02565b5b92915050565b6000606082019050611e536000830186611894565b611e606020830185611894565b611e6d6040830184611718565b949350505050565b6000611e8082611636565b9150611e8b83611636565b9250828201905080821115611ea357611ea2611b02565b5b92915050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b6000611edf601b83611961565b9150611eea82611ea9565b602082019050919050565b60006020820190508181036000830152611f0e81611ed2565b9050919050565b611f1e816118fe565b8114611f2957600080fd5b50565b600081519050611f3b81611f15565b92915050565b600060208284031215611f5757611f566115a4565b5b6000611f6584828501611f2c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611fca602a83611961565b9150611fd582611f6e565b604082019050919050565b60006020820190508181036000830152611ff981611fbd565b9050919050565b7f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008201527f6473000000000000000000000000000000000000000000000000000000000000602082015250565b600061205c602283611961565b915061206782612000565b604082019050919050565b6000602082019050818103600083015261208b8161204f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061214c602683611961565b9150612157826120f0565b604082019050919050565b6000602082019050818103600083015261217b8161213f565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006121b8601d83611961565b91506121c382612182565b602082019050919050565b600060208201905081810360008301526121e7816121ab565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612222578082015181840152602081019050612207565b60008484015250505050565b6000612239826121ee565b61224381856121f9565b9350612253818560208601612204565b80840191505092915050565b600061226b828461222e565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061229d82612276565b6122a78185611961565b93506122b7818560208601612204565b6122c081612281565b840191505092915050565b600060208201905081810360008301526122e58184612292565b90509291505056fea26469706673582212206b7cffd7f340139679a8239b1708537ecd2430f1ef85a6e582c76468f8fca80564736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xCA15C873 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0xEC87621C EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0xECE13732 EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x32B JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x287 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x3B61F098 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x3B61F098 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x5306F102 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x767A7B05 EQ PUSH2 0x1ED JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x279BA28D EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x18D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x15DF JUMP JUMPDEST PUSH2 0x347 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x161B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x155 SWAP2 SWAP1 PUSH2 0x166C JUMP JUMPDEST PUSH2 0x367 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x168 SWAP3 SWAP2 SWAP1 PUSH2 0x1727 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x186 SWAP2 SWAP1 PUSH2 0x178E JUMP JUMPDEST PUSH2 0x3AB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A2 SWAP2 SWAP1 PUSH2 0x178E JUMP JUMPDEST PUSH2 0x41F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0x180C JUMP JUMPDEST PUSH2 0x4A2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CD PUSH2 0x58D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1EB PUSH2 0x593 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x207 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x202 SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x6CD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x211 PUSH2 0x831 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x18A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x241 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23C SWAP2 SWAP1 PUSH2 0x18BE JUMP JUMPDEST PUSH2 0x85A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24E SWAP2 SWAP1 PUSH2 0x18A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x271 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26C SWAP2 SWAP1 PUSH2 0x178E JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27E SWAP2 SWAP1 PUSH2 0x1919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28F PUSH2 0x8BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29C SWAP2 SWAP1 PUSH2 0x161B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0x15DF JUMP JUMPDEST PUSH2 0x8C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2CC SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2EF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2EA SWAP2 SWAP1 PUSH2 0x178E JUMP JUMPDEST PUSH2 0x8EC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F9 PUSH2 0x960 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x306 SWAP2 SWAP1 PUSH2 0x161B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x329 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x324 SWAP2 SWAP1 PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x984 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x345 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x340 SWAP2 SWAP1 PUSH2 0x1934 JUMP JUMPDEST PUSH2 0xAE2 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 JUMP JUMPDEST PUSH2 0x3D2 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x3CD PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH2 0x411 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x408 SWAP1 PUSH2 0x19E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x41B DUP3 DUP3 PUSH2 0xC92 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x427 PUSH2 0xC8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x494 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48B SWAP1 PUSH2 0x1A76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x49E DUP3 DUP3 PUSH2 0xD26 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4D3 PUSH32 0x241ECF16D79D0F8DBFB92CBC07FE17840425976CF0667F022FE9877CAA831B08 PUSH2 0x4CE PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH2 0x512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x509 SWAP1 PUSH2 0x1AE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x51B DUP2 PUSH2 0xDBA JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 PUSH1 0x3 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x585 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x59B PUSH2 0xC8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5B9 PUSH2 0x831 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x606 SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x6FE PUSH32 0x241ECF16D79D0F8DBFB92CBC07FE17840425976CF0667F022FE9877CAA831B08 PUSH2 0x6F9 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH2 0x73D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x734 SWAP1 PUSH2 0x1AE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 DUP2 LT PUSH2 0x82B JUMPI PUSH2 0x7C5 CALLER DUP5 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE82 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x7D8 DUP4 DUP3 PUSH2 0xF08 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP4 PUSH32 0x56CA301A9219608C91E7BCEE90E083C19671D2CDCC96752C7AF291CEE5F9C8C8 DUP5 PUSH1 0x40 MLOAD PUSH2 0x822 SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x884 DUP3 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH2 0xF61 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8B6 DUP3 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH2 0xF7B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E5 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH2 0xFAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x913 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x90E PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH2 0x952 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x949 SWAP1 PUSH2 0x1C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x95C DUP3 DUP3 PUSH2 0xD26 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x241ECF16D79D0F8DBFB92CBC07FE17840425976CF0667F022FE9877CAA831B08 DUP2 JUMP JUMPDEST PUSH2 0x9B5 PUSH32 0x241ECF16D79D0F8DBFB92CBC07FE17840425976CF0667F022FE9877CAA831B08 PUSH2 0x9B0 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST PUSH2 0x9F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9EB SWAP1 PUSH2 0x1AE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0xA5C CALLER ADDRESS DUP5 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xFC0 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH2 0xA8A DUP4 DUP3 PUSH2 0x1049 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP4 PUSH32 0xE2BBB158EA830E9EFA91FA2A38C9708F9F6109A6C571D6A762B53A83776A3D67 DUP5 PUSH1 0x40 MLOAD PUSH2 0xAD4 SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0xAEA PUSH2 0xC8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB08 PUSH2 0x831 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB55 SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBCD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC4 SWAP1 PUSH2 0x1CE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xCBA DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH2 0x10A7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0xD22 JUMPI PUSH2 0xCC7 PUSH2 0xC8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD4E DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH2 0x10D7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0xDB6 JUMPI PUSH2 0xD5B PUSH2 0xC8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0xE7E JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE62 SWAP1 PUSH2 0x1D55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH2 0xE76 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xDBD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xF03 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xEA1 SWAP3 SWAP2 SWAP1 PUSH2 0x1D75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1107 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xF4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF44 SWAP1 PUSH2 0x1DEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 PUSH2 0xF59 SWAP2 SWAP1 PUSH2 0x1E0A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF70 DUP4 PUSH1 0x0 ADD DUP4 PUSH2 0x11CE JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA3 DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x1242 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB9 DUP3 PUSH1 0x0 ADD PUSH2 0x1265 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1043 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFE1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E3E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1107 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 PUSH2 0x1058 SWAP2 SWAP1 PUSH2 0x1E75 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x109D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1094 SWAP1 PUSH2 0x1EF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10CF DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x1276 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FF DUP4 PUSH1 0x0 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH2 0x12E6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1169 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13FE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x11C9 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1189 SWAP2 SWAP1 PUSH2 0x1F41 JUMP JUMPDEST PUSH2 0x11C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11BF SWAP1 PUSH2 0x1FE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP GT PUSH2 0x1219 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1210 SWAP1 PUSH2 0x2072 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x122F JUMPI PUSH2 0x122E PUSH2 0x2092 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1282 DUP4 DUP4 PUSH2 0x1242 JUMP JUMPDEST PUSH2 0x12DB JUMPI DUP3 PUSH1 0x0 ADD DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP3 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ PUSH2 0x13F2 JUMPI PUSH1 0x0 PUSH1 0x1 DUP3 PUSH2 0x1318 SWAP2 SWAP1 PUSH2 0x1E0A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP7 PUSH1 0x0 ADD DUP1 SLOAD SWAP1 POP PUSH2 0x1330 SWAP2 SWAP1 PUSH2 0x1E0A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x134A JUMPI PUSH2 0x1349 PUSH2 0x2092 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x136E JUMPI PUSH2 0x136D PUSH2 0x2092 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP4 PUSH2 0x1389 SWAP2 SWAP1 PUSH2 0x1E75 JUMP JUMPDEST DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP7 PUSH1 0x0 ADD DUP1 SLOAD DUP1 PUSH2 0x13B6 JUMPI PUSH2 0x13B5 PUSH2 0x20C1 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP7 PUSH1 0x1 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP5 POP POP POP POP POP PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x140D DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1416 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x145B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1452 SWAP1 PUSH2 0x2162 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1464 DUP6 PUSH2 0x152A JUMP JUMPDEST PUSH2 0x14A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x149A SWAP1 PUSH2 0x21CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x14CC SWAP2 SWAP1 PUSH2 0x225F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1509 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x150E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x151E DUP3 DUP3 DUP7 PUSH2 0x153D JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x154D JUMPI DUP3 SWAP1 POP PUSH2 0x159D JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x1560 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1594 SWAP2 SWAP1 PUSH2 0x22CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15BC DUP2 PUSH2 0x15A9 JUMP JUMPDEST DUP2 EQ PUSH2 0x15C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x15D9 DUP2 PUSH2 0x15B3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15F5 JUMPI PUSH2 0x15F4 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1603 DUP5 DUP3 DUP6 ADD PUSH2 0x15CA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1615 DUP2 PUSH2 0x15A9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1630 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x160C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1649 DUP2 PUSH2 0x1636 JUMP JUMPDEST DUP2 EQ PUSH2 0x1654 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1666 DUP2 PUSH2 0x1640 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1682 JUMPI PUSH2 0x1681 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1690 DUP5 DUP3 DUP6 ADD PUSH2 0x1657 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16DE PUSH2 0x16D9 PUSH2 0x16D4 DUP5 PUSH2 0x1699 JUMP JUMPDEST PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x1699 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16F0 DUP3 PUSH2 0x16C3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1702 DUP3 PUSH2 0x16E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1712 DUP2 PUSH2 0x16F7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1721 DUP2 PUSH2 0x1636 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x173C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1709 JUMP JUMPDEST PUSH2 0x1749 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1718 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x175B DUP3 PUSH2 0x1699 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x176B DUP2 PUSH2 0x1750 JUMP JUMPDEST DUP2 EQ PUSH2 0x1776 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1788 DUP2 PUSH2 0x1762 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17A5 JUMPI PUSH2 0x17A4 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17B3 DUP6 DUP3 DUP7 ADD PUSH2 0x15CA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x17C4 DUP6 DUP3 DUP7 ADD PUSH2 0x1779 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17D9 DUP3 PUSH2 0x1750 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17E9 DUP2 PUSH2 0x17CE JUMP JUMPDEST DUP2 EQ PUSH2 0x17F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1806 DUP2 PUSH2 0x17E0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1822 JUMPI PUSH2 0x1821 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1830 DUP5 DUP3 DUP6 ADD PUSH2 0x17F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x184E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1718 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x186B JUMPI PUSH2 0x186A PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1879 DUP6 DUP3 DUP7 ADD PUSH2 0x1657 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x188A DUP6 DUP3 DUP7 ADD PUSH2 0x1657 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x189D DUP2 PUSH2 0x1750 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18B8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1894 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18D5 JUMPI PUSH2 0x18D4 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18E3 DUP6 DUP3 DUP7 ADD PUSH2 0x15CA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x18F4 DUP6 DUP3 DUP7 ADD PUSH2 0x1657 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1913 DUP2 PUSH2 0x18FE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x192E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x190A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x194A JUMPI PUSH2 0x1949 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1958 DUP5 DUP3 DUP6 ADD PUSH2 0x1779 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2073656E646572206D75737420626520616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2061646D696E20746F206772616E740000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19CE PUSH1 0x2F DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x19D9 DUP3 PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19FD DUP2 PUSH2 0x19C1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A60 PUSH1 0x2F DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A6B DUP3 PUSH2 0x1A04 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A8F DUP2 PUSH2 0x1A53 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E6F7420616C6C6F776564000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ACC PUSH1 0xB DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AD7 DUP3 PUSH2 0x1A96 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1AFB DUP2 PUSH2 0x1ABF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B3C DUP3 PUSH2 0x1636 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1B6E JUMPI PUSH2 0x1B6D PUSH2 0x1B02 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BAF PUSH1 0x20 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BBA DUP3 PUSH2 0x1B79 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BDE DUP2 PUSH2 0x1BA2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2073656E646572206D75737420626520616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2061646D696E20746F207265766F6B6500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C41 PUSH1 0x30 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C4C DUP3 PUSH2 0x1BE5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C70 DUP2 PUSH2 0x1C34 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CD3 PUSH1 0x26 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CDE DUP3 PUSH2 0x1C77 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D02 DUP2 PUSH2 0x1CC6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F6C6C61746572616C204164647265737320416C7265616479204164646564 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D3F PUSH1 0x20 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D4A DUP3 PUSH2 0x1D09 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D6E DUP2 PUSH2 0x1D32 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1D8A PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1894 JUMP JUMPDEST PUSH2 0x1D97 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1718 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD4 PUSH1 0x1E DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DDF DUP3 PUSH2 0x1D9E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E03 DUP2 PUSH2 0x1DC7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E15 DUP3 PUSH2 0x1636 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E20 DUP4 PUSH2 0x1636 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1E38 JUMPI PUSH2 0x1E37 PUSH2 0x1B02 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1E53 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1894 JUMP JUMPDEST PUSH2 0x1E60 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1894 JUMP JUMPDEST PUSH2 0x1E6D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1718 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E80 DUP3 PUSH2 0x1636 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E8B DUP4 PUSH2 0x1636 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1EA3 JUMPI PUSH2 0x1EA2 PUSH2 0x1B02 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EDF PUSH1 0x1B DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EEA DUP3 PUSH2 0x1EA9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F0E DUP2 PUSH2 0x1ED2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F1E DUP2 PUSH2 0x18FE JUMP JUMPDEST DUP2 EQ PUSH2 0x1F29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1F3B DUP2 PUSH2 0x1F15 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F57 JUMPI PUSH2 0x1F56 PUSH2 0x15A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F65 DUP5 DUP3 DUP6 ADD PUSH2 0x1F2C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FCA PUSH1 0x2A DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FD5 DUP3 PUSH2 0x1F6E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FF9 DUP2 PUSH2 0x1FBD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x456E756D657261626C655365743A20696E646578206F7574206F6620626F756E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6473000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x205C PUSH1 0x22 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x2067 DUP3 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x208B DUP2 PUSH2 0x204F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x214C PUSH1 0x26 DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x2157 DUP3 PUSH2 0x20F0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x217B DUP2 PUSH2 0x213F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21B8 PUSH1 0x1D DUP4 PUSH2 0x1961 JUMP JUMPDEST SWAP2 POP PUSH2 0x21C3 DUP3 PUSH2 0x2182 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21E7 DUP2 PUSH2 0x21AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2222 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2207 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2239 DUP3 PUSH2 0x21EE JUMP JUMPDEST PUSH2 0x2243 DUP2 DUP6 PUSH2 0x21F9 JUMP JUMPDEST SWAP4 POP PUSH2 0x2253 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2204 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x226B DUP3 DUP5 PUSH2 0x222E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x229D DUP3 PUSH2 0x2276 JUMP JUMPDEST PUSH2 0x22A7 DUP2 DUP6 PUSH2 0x1961 JUMP JUMPDEST SWAP4 POP PUSH2 0x22B7 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2204 JUMP JUMPDEST PUSH2 0x22C0 DUP2 PUSH2 0x2281 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x22E5 DUP2 DUP5 PUSH2 0x2292 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x7CFFD7F340139679A8239B17 ADDMOD MSTORE8 PUSH31 0xCD2430F1EF85A6E582C76468F8FCA80564736F6C6343000814003300000000 ","sourceMap":"420:2167:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4274:112:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;692:49:9;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;4636:223:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5810:205;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1366:268:9;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;563:31;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1700:145:1;;;:::i;:::-;;2091:493:9;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1068:85:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3957:136:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2942:137;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1719:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3247:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5093:226;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;867:64:9;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1642:441;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1994:240:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4274:112:0;4331:7;4357:6;:12;4364:4;4357:12;;;;;;;;;;;:22;;;4350:29;;4274:112;;;:::o;692:49:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4636:223:0:-;4719:45;4727:6;:12;4734:4;4727:12;;;;;;;;;;;:22;;;4751:12;:10;:12::i;:::-;4719:7;:45::i;:::-;4711:105;;;;;;;;;;;;:::i;:::-;;;;;;;;;4827:25;4838:4;4844:7;4827:10;:25::i;:::-;4636:223;;:::o;5810:205::-;5907:12;:10;:12::i;:::-;5896:23;;:7;:23;;;5888:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;5982:26;5994:4;6000:7;5982:11;:26::i;:::-;5810:205;;:::o;1366:268:9:-;1439:35;906:25;1461:12;:10;:12::i;:::-;1439:7;:35::i;:::-;1431:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;1501:33;1522:11;1501:20;:33::i;:::-;1586:11;1545:9;:27;1555:16;;1545:27;;;;;;;;;;;:38;;;:52;;;;;;;;;;;;;;;;;;1608:16;;:18;;;;;;;;;:::i;:::-;;;;;;1366:268;:::o;563:31::-;;;;:::o;1700:145:1:-;1291:12;:10;:12::i;:::-;1280:23;;:7;:5;:7::i;:::-;:23;;;1272:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1806:1:::1;1769:40;;1790:6;::::0;::::1;;;;;;;;1769:40;;;;;;;;;;;;1836:1;1819:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1700:145::o:0;2091:493:9:-;2176:35;906:25;2198:12;:10;:12::i;:::-;2176:7;:35::i;:::-;2168:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;2238:15;2256:9;:14;2266:3;2256:14;;;;;;;;;;;:25;;;;;;;;;;;;2238:43;;2292:27;2322:9;:14;2332:3;2322:14;;;;;;;;;;;:21;;;2292:51;;2381:6;2358:19;:29;2354:223;;2404:50;2434:10;2447:6;2404:8;:21;;;;:50;;;;;:::i;:::-;2493:31;2517:6;2493:19;:23;;:31;;;;:::i;:::-;2469:9;:14;2479:3;2469:14;;;;;;;;;;;:21;;:55;;;;2553:3;2544:21;2558:6;2544:21;;;;;;:::i;:::-;;;;;;;;2354:223;2157:427;;2091:493;;:::o;1068:85:1:-;1114:7;1140:6;;;;;;;;;;;1133:13;;1068:85;:::o;3957:136:0:-;4030:7;4056:30;4080:5;4056:6;:12;4063:4;4056:12;;;;;;;;;;;:20;;:23;;:30;;;;:::i;:::-;4049:37;;3957:136;;;;:::o;2942:137::-;3011:4;3034:38;3064:7;3034:6;:12;3041:4;3034:12;;;;;;;;;;;:20;;:29;;:38;;;;:::i;:::-;3027:45;;2942:137;;;;:::o;1719:49::-;1764:4;1719:49;;;:::o;3247:125::-;3310:7;3336:29;:6;:12;3343:4;3336:12;;;;;;;;;;;:20;;:27;:29::i;:::-;3329:36;;3247:125;;;:::o;5093:226::-;5177:45;5185:6;:12;5192:4;5185:12;;;;;;;;;;;:22;;;5209:12;:10;:12::i;:::-;5177:7;:45::i;:::-;5169:106;;;;;;;;;;;;:::i;:::-;;;;;;;;;5286:26;5298:4;5304:7;5286:11;:26::i;:::-;5093:226;;:::o;867:64:9:-;906:25;867:64;:::o;1642:441::-;1726:35;906:25;1748:12;:10;:12::i;:::-;1726:7;:35::i;:::-;1718:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;1788:15;1806:9;:14;1816:3;1806:14;;;;;;;;;;;:25;;;;;;;;;;;;1788:43;;1842:69;1876:10;1897:4;1904:6;1842:8;:25;;;;:69;;;;;;:::i;:::-;1922:27;1952:9;:14;1962:3;1952:14;;;;;;;;;;;:21;;;1922:51;;2008:31;2032:6;2008:19;:23;;:31;;;;:::i;:::-;1984:9;:14;1994:3;1984:14;;;;;;;;;;;:21;;:55;;;;2063:3;2055:20;2068:6;2055:20;;;;;;:::i;:::-;;;;;;;;1707:376;;1642:441;;:::o;1994:240:1:-;1291:12;:10;:12::i;:::-;1280:23;;:7;:5;:7::i;:::-;:23;;;1272:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;2102:1:::1;2082:22;;:8;:22;;::::0;2074:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2191:8;2162:38;;2183:6;::::0;::::1;;;;;;;;2162:38;;;;;;;;;;;;2219:8;2210:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;1994:240:::0;:::o;590:96:6:-;643:7;669:10;662:17;;590:96;:::o;7017:184:0:-;7090:33;7115:7;7090:6;:12;7097:4;7090:12;;;;;;;;;;;:20;;:24;;:33;;;;:::i;:::-;7086:109;;;7171:12;:10;:12::i;:::-;7144:40;;7162:7;7144:40;;7156:4;7144:40;;;;;;;;;;7086:109;7017:184;;:::o;7207:188::-;7281:36;7309:7;7281:6;:12;7288:4;7281:12;;;;;;;;;;;:20;;:27;;:36;;;;:::i;:::-;7277:112;;;7365:12;:10;:12::i;:::-;7338:40;;7356:7;7338:40;;7350:4;7338:40;;;;;;;;;;7277:112;7207:188;;:::o;1074:284:9:-;1154:9;1149:202;1169:16;;1165:1;:20;1149:202;;;1260:11;1233:38;;:9;:12;1243:1;1233:12;;;;;;;;;;;:23;;;;;;;;;;;;:38;;;1207:132;;;;;;;;;;;;:::i;:::-;;;;;;;;;1187:3;;;;;:::i;:::-;;;;1149:202;;;;1074:284;:::o;696:175:4:-;778:86;798:5;828:23;;;853:2;857:5;805:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;778:19;:86::i;:::-;696:175;;;:::o;3128:155:2:-;3186:7;3218:1;3213;:6;;3205:49;;;;;;;;;;;;:::i;:::-;;;;;;;;;3275:1;3271;:5;;;;:::i;:::-;3264:12;;3128:155;;;;:::o;7669:156:7:-;7743:7;7793:22;7797:3;:10;;7809:5;7793:3;:22::i;:::-;7785:31;;7762:56;;7669:156;;;;:::o;6976:165::-;7056:4;7079:55;7089:3;:10;;7125:5;7109:23;;7101:32;;7079:9;:55::i;:::-;7072:62;;6976:165;;;;:::o;7222:115::-;7285:7;7311:19;7319:3;:10;;7311:7;:19::i;:::-;7304:26;;7222:115;;;:::o;877:203:4:-;977:96;997:5;1027:27;;;1056:4;1062:2;1066:5;1004:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;977:19;:96::i;:::-;877:203;;;;:::o;2682:175:2:-;2740:7;2759:9;2775:1;2771;:5;;;;:::i;:::-;2759:17;;2799:1;2794;:6;;2786:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;2849:1;2842:8;;;2682:175;;;;:::o;6421:150:7:-;6491:4;6514:50;6519:3;:10;;6555:5;6539:23;;6531:32;;6514:4;:50::i;:::-;6507:57;;6421:150;;;;:::o;6739:156::-;6812:4;6835:53;6843:3;:10;;6879:5;6863:23;;6855:32;;6835:7;:53::i;:::-;6828:60;;6739:156;;;;:::o;2959:751:4:-;3378:23;3404:69;3432:4;3404:69;;;;;;;;;;;;;;;;;3412:5;3404:27;;;;:69;;;;;:::i;:::-;3378:95;;3507:1;3487:10;:17;:21;3483:221;;;3627:10;3616:30;;;;;;;;;;;;:::i;:::-;3608:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;3483:221;3029:681;2959:751;;:::o;4444:201:7:-;4511:7;4559:5;4538:3;:11;;:18;;;;:26;4530:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;4620:3;:11;;4632:5;4620:18;;;;;;;;:::i;:::-;;;;;;;;;;4613:25;;4444:201;;;;:::o;3797:127::-;3870:4;3916:1;3893:3;:12;;:19;3906:5;3893:19;;;;;;;;;;;;:24;;3886:31;;3797:127;;;;:::o;4005:107::-;4061:7;4087:3;:11;;:18;;;;4080:25;;4005:107;;;:::o;1632:404::-;1695:4;1716:21;1726:3;1731:5;1716:9;:21::i;:::-;1711:319;;1753:3;:11;;1770:5;1753:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1933:3;:11;;:18;;;;1911:3;:12;;:19;1924:5;1911:19;;;;;;;;;;;:40;;;;1972:4;1965:11;;;;1711:319;2014:5;2007:12;;1632:404;;;;;:::o;2204:1512::-;2270:4;2386:18;2407:3;:12;;:19;2420:5;2407:19;;;;;;;;;;;;2386:40;;2455:1;2441:10;:15;2437:1273;;2798:21;2835:1;2822:10;:14;;;;:::i;:::-;2798:38;;2850:17;2891:1;2870:3;:11;;:18;;;;:22;;;;:::i;:::-;2850:42;;3132:17;3152:3;:11;;3164:9;3152:22;;;;;;;;:::i;:::-;;;;;;;;;;3132:42;;3295:9;3266:3;:11;;3278:13;3266:26;;;;;;;;:::i;:::-;;;;;;;;;:38;;;;3412:1;3396:13;:17;;;;:::i;:::-;3370:3;:12;;:23;3383:9;3370:23;;;;;;;;;;;:43;;;;3519:3;:11;;:17;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3611:3;:12;;:19;3624:5;3611:19;;;;;;;;;;;3604:26;;;3652:4;3645:11;;;;;;;;2437:1273;3694:5;3687:12;;;2204:1512;;;;;:::o;3573:193:5:-;3676:12;3707:52;3729:6;3737:4;3743:1;3746:12;3707:21;:52::i;:::-;3700:59;;3573:193;;;;;:::o;4600:523::-;4727:12;4784:5;4759:21;:30;;4751:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;4850:18;4861:6;4850:10;:18::i;:::-;4842:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;4973:12;4987:23;5014:6;:11;;5034:5;5042:4;5014:33;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4972:75;;;;5064:52;5082:7;5091:10;5103:12;5064:17;:52::i;:::-;5057:59;;;;4600:523;;;;;;:::o;718:413::-;778:4;981:12;1090:7;1078:20;1070:28;;1123:1;1116:4;:8;1109:15;;;718:413;;;:::o;7083:725::-;7198:12;7226:7;7222:580;;;7256:10;7249:17;;;;7222:580;7387:1;7367:10;:17;:21;7363:429;;;7625:10;7619:17;7685:15;7672:10;7668:2;7664:19;7657:44;7363:429;7764:12;7757:20;;;;;;;;;;;:::i;:::-;;;;;;;;7083:725;;;;;;:::o;88:117:10:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:118::-;1112:24;1130:5;1112:24;:::i;:::-;1107:3;1100:37;1025:118;;:::o;1149:222::-;1242:4;1280:2;1269:9;1265:18;1257:26;;1293:71;1361:1;1350:9;1346:17;1337:6;1293:71;:::i;:::-;1149:222;;;;:::o;1377:77::-;1414:7;1443:5;1432:16;;1377:77;;;:::o;1460:122::-;1533:24;1551:5;1533:24;:::i;:::-;1526:5;1523:35;1513:63;;1572:1;1569;1562:12;1513:63;1460:122;:::o;1588:139::-;1634:5;1672:6;1659:20;1650:29;;1688:33;1715:5;1688:33;:::i;:::-;1588:139;;;;:::o;1733:329::-;1792:6;1841:2;1829:9;1820:7;1816:23;1812:32;1809:119;;;1847:79;;:::i;:::-;1809:119;1967:1;1992:53;2037:7;2028:6;2017:9;2013:22;1992:53;:::i;:::-;1982:63;;1938:117;1733:329;;;;:::o;2068:126::-;2105:7;2145:42;2138:5;2134:54;2123:65;;2068:126;;;:::o;2200:60::-;2228:3;2249:5;2242:12;;2200:60;;;:::o;2266:142::-;2316:9;2349:53;2367:34;2376:24;2394:5;2376:24;:::i;:::-;2367:34;:::i;:::-;2349:53;:::i;:::-;2336:66;;2266:142;;;:::o;2414:126::-;2464:9;2497:37;2528:5;2497:37;:::i;:::-;2484:50;;2414:126;;;:::o;2546:140::-;2610:9;2643:37;2674:5;2643:37;:::i;:::-;2630:50;;2546:140;;;:::o;2692:159::-;2793:51;2838:5;2793:51;:::i;:::-;2788:3;2781:64;2692:159;;:::o;2857:118::-;2944:24;2962:5;2944:24;:::i;:::-;2939:3;2932:37;2857:118;;:::o;2981:360::-;3116:4;3154:2;3143:9;3139:18;3131:26;;3167:85;3249:1;3238:9;3234:17;3225:6;3167:85;:::i;:::-;3262:72;3330:2;3319:9;3315:18;3306:6;3262:72;:::i;:::-;2981:360;;;;;:::o;3347:96::-;3384:7;3413:24;3431:5;3413:24;:::i;:::-;3402:35;;3347:96;;;:::o;3449:122::-;3522:24;3540:5;3522:24;:::i;:::-;3515:5;3512:35;3502:63;;3561:1;3558;3551:12;3502:63;3449:122;:::o;3577:139::-;3623:5;3661:6;3648:20;3639:29;;3677:33;3704:5;3677:33;:::i;:::-;3577:139;;;;:::o;3722:474::-;3790:6;3798;3847:2;3835:9;3826:7;3822:23;3818:32;3815:119;;;3853:79;;:::i;:::-;3815:119;3973:1;3998:53;4043:7;4034:6;4023:9;4019:22;3998:53;:::i;:::-;3988:63;;3944:117;4100:2;4126:53;4171:7;4162:6;4151:9;4147:22;4126:53;:::i;:::-;4116:63;;4071:118;3722:474;;;;;:::o;4202:110::-;4253:7;4282:24;4300:5;4282:24;:::i;:::-;4271:35;;4202:110;;;:::o;4318:150::-;4405:38;4437:5;4405:38;:::i;:::-;4398:5;4395:49;4385:77;;4458:1;4455;4448:12;4385:77;4318:150;:::o;4474:167::-;4534:5;4572:6;4559:20;4550:29;;4588:47;4629:5;4588:47;:::i;:::-;4474:167;;;;:::o;4647:357::-;4720:6;4769:2;4757:9;4748:7;4744:23;4740:32;4737:119;;;4775:79;;:::i;:::-;4737:119;4895:1;4920:67;4979:7;4970:6;4959:9;4955:22;4920:67;:::i;:::-;4910:77;;4866:131;4647:357;;;;:::o;5010:222::-;5103:4;5141:2;5130:9;5126:18;5118:26;;5154:71;5222:1;5211:9;5207:17;5198:6;5154:71;:::i;:::-;5010:222;;;;:::o;5238:474::-;5306:6;5314;5363:2;5351:9;5342:7;5338:23;5334:32;5331:119;;;5369:79;;:::i;:::-;5331:119;5489:1;5514:53;5559:7;5550:6;5539:9;5535:22;5514:53;:::i;:::-;5504:63;;5460:117;5616:2;5642:53;5687:7;5678:6;5667:9;5663:22;5642:53;:::i;:::-;5632:63;;5587:118;5238:474;;;;;:::o;5718:118::-;5805:24;5823:5;5805:24;:::i;:::-;5800:3;5793:37;5718:118;;:::o;5842:222::-;5935:4;5973:2;5962:9;5958:18;5950:26;;5986:71;6054:1;6043:9;6039:17;6030:6;5986:71;:::i;:::-;5842:222;;;;:::o;6070:474::-;6138:6;6146;6195:2;6183:9;6174:7;6170:23;6166:32;6163:119;;;6201:79;;:::i;:::-;6163:119;6321:1;6346:53;6391:7;6382:6;6371:9;6367:22;6346:53;:::i;:::-;6336:63;;6292:117;6448:2;6474:53;6519:7;6510:6;6499:9;6495:22;6474:53;:::i;:::-;6464:63;;6419:118;6070:474;;;;;:::o;6550:90::-;6584:7;6627:5;6620:13;6613:21;6602:32;;6550:90;;;:::o;6646:109::-;6727:21;6742:5;6727:21;:::i;:::-;6722:3;6715:34;6646:109;;:::o;6761:210::-;6848:4;6886:2;6875:9;6871:18;6863:26;;6899:65;6961:1;6950:9;6946:17;6937:6;6899:65;:::i;:::-;6761:210;;;;:::o;6977:329::-;7036:6;7085:2;7073:9;7064:7;7060:23;7056:32;7053:119;;;7091:79;;:::i;:::-;7053:119;7211:1;7236:53;7281:7;7272:6;7261:9;7257:22;7236:53;:::i;:::-;7226:63;;7182:117;6977:329;;;;:::o;7312:169::-;7396:11;7430:6;7425:3;7418:19;7470:4;7465:3;7461:14;7446:29;;7312:169;;;;:::o;7487:234::-;7627:34;7623:1;7615:6;7611:14;7604:58;7696:17;7691:2;7683:6;7679:15;7672:42;7487:234;:::o;7727:366::-;7869:3;7890:67;7954:2;7949:3;7890:67;:::i;:::-;7883:74;;7966:93;8055:3;7966:93;:::i;:::-;8084:2;8079:3;8075:12;8068:19;;7727:366;;;:::o;8099:419::-;8265:4;8303:2;8292:9;8288:18;8280:26;;8352:9;8346:4;8342:20;8338:1;8327:9;8323:17;8316:47;8380:131;8506:4;8380:131;:::i;:::-;8372:139;;8099:419;;;:::o;8524:234::-;8664:34;8660:1;8652:6;8648:14;8641:58;8733:17;8728:2;8720:6;8716:15;8709:42;8524:234;:::o;8764:366::-;8906:3;8927:67;8991:2;8986:3;8927:67;:::i;:::-;8920:74;;9003:93;9092:3;9003:93;:::i;:::-;9121:2;9116:3;9112:12;9105:19;;8764:366;;;:::o;9136:419::-;9302:4;9340:2;9329:9;9325:18;9317:26;;9389:9;9383:4;9379:20;9375:1;9364:9;9360:17;9353:47;9417:131;9543:4;9417:131;:::i;:::-;9409:139;;9136:419;;;:::o;9561:161::-;9701:13;9697:1;9689:6;9685:14;9678:37;9561:161;:::o;9728:366::-;9870:3;9891:67;9955:2;9950:3;9891:67;:::i;:::-;9884:74;;9967:93;10056:3;9967:93;:::i;:::-;10085:2;10080:3;10076:12;10069:19;;9728:366;;;:::o;10100:419::-;10266:4;10304:2;10293:9;10289:18;10281:26;;10353:9;10347:4;10343:20;10339:1;10328:9;10324:17;10317:47;10381:131;10507:4;10381:131;:::i;:::-;10373:139;;10100:419;;;:::o;10525:180::-;10573:77;10570:1;10563:88;10670:4;10667:1;10660:15;10694:4;10691:1;10684:15;10711:233;10750:3;10773:24;10791:5;10773:24;:::i;:::-;10764:33;;10819:66;10812:5;10809:77;10806:103;;10889:18;;:::i;:::-;10806:103;10936:1;10929:5;10925:13;10918:20;;10711:233;;;:::o;10950:182::-;11090:34;11086:1;11078:6;11074:14;11067:58;10950:182;:::o;11138:366::-;11280:3;11301:67;11365:2;11360:3;11301:67;:::i;:::-;11294:74;;11377:93;11466:3;11377:93;:::i;:::-;11495:2;11490:3;11486:12;11479:19;;11138:366;;;:::o;11510:419::-;11676:4;11714:2;11703:9;11699:18;11691:26;;11763:9;11757:4;11753:20;11749:1;11738:9;11734:17;11727:47;11791:131;11917:4;11791:131;:::i;:::-;11783:139;;11510:419;;;:::o;11935:235::-;12075:34;12071:1;12063:6;12059:14;12052:58;12144:18;12139:2;12131:6;12127:15;12120:43;11935:235;:::o;12176:366::-;12318:3;12339:67;12403:2;12398:3;12339:67;:::i;:::-;12332:74;;12415:93;12504:3;12415:93;:::i;:::-;12533:2;12528:3;12524:12;12517:19;;12176:366;;;:::o;12548:419::-;12714:4;12752:2;12741:9;12737:18;12729:26;;12801:9;12795:4;12791:20;12787:1;12776:9;12772:17;12765:47;12829:131;12955:4;12829:131;:::i;:::-;12821:139;;12548:419;;;:::o;12973:225::-;13113:34;13109:1;13101:6;13097:14;13090:58;13182:8;13177:2;13169:6;13165:15;13158:33;12973:225;:::o;13204:366::-;13346:3;13367:67;13431:2;13426:3;13367:67;:::i;:::-;13360:74;;13443:93;13532:3;13443:93;:::i;:::-;13561:2;13556:3;13552:12;13545:19;;13204:366;;;:::o;13576:419::-;13742:4;13780:2;13769:9;13765:18;13757:26;;13829:9;13823:4;13819:20;13815:1;13804:9;13800:17;13793:47;13857:131;13983:4;13857:131;:::i;:::-;13849:139;;13576:419;;;:::o;14001:182::-;14141:34;14137:1;14129:6;14125:14;14118:58;14001:182;:::o;14189:366::-;14331:3;14352:67;14416:2;14411:3;14352:67;:::i;:::-;14345:74;;14428:93;14517:3;14428:93;:::i;:::-;14546:2;14541:3;14537:12;14530:19;;14189:366;;;:::o;14561:419::-;14727:4;14765:2;14754:9;14750:18;14742:26;;14814:9;14808:4;14804:20;14800:1;14789:9;14785:17;14778:47;14842:131;14968:4;14842:131;:::i;:::-;14834:139;;14561:419;;;:::o;14986:332::-;15107:4;15145:2;15134:9;15130:18;15122:26;;15158:71;15226:1;15215:9;15211:17;15202:6;15158:71;:::i;:::-;15239:72;15307:2;15296:9;15292:18;15283:6;15239:72;:::i;:::-;14986:332;;;;;:::o;15324:180::-;15464:32;15460:1;15452:6;15448:14;15441:56;15324:180;:::o;15510:366::-;15652:3;15673:67;15737:2;15732:3;15673:67;:::i;:::-;15666:74;;15749:93;15838:3;15749:93;:::i;:::-;15867:2;15862:3;15858:12;15851:19;;15510:366;;;:::o;15882:419::-;16048:4;16086:2;16075:9;16071:18;16063:26;;16135:9;16129:4;16125:20;16121:1;16110:9;16106:17;16099:47;16163:131;16289:4;16163:131;:::i;:::-;16155:139;;15882:419;;;:::o;16307:194::-;16347:4;16367:20;16385:1;16367:20;:::i;:::-;16362:25;;16401:20;16419:1;16401:20;:::i;:::-;16396:25;;16445:1;16442;16438:9;16430:17;;16469:1;16463:4;16460:11;16457:37;;;16474:18;;:::i;:::-;16457:37;16307:194;;;;:::o;16507:442::-;16656:4;16694:2;16683:9;16679:18;16671:26;;16707:71;16775:1;16764:9;16760:17;16751:6;16707:71;:::i;:::-;16788:72;16856:2;16845:9;16841:18;16832:6;16788:72;:::i;:::-;16870;16938:2;16927:9;16923:18;16914:6;16870:72;:::i;:::-;16507:442;;;;;;:::o;16955:191::-;16995:3;17014:20;17032:1;17014:20;:::i;:::-;17009:25;;17048:20;17066:1;17048:20;:::i;:::-;17043:25;;17091:1;17088;17084:9;17077:16;;17112:3;17109:1;17106:10;17103:36;;;17119:18;;:::i;:::-;17103:36;16955:191;;;;:::o;17152:177::-;17292:29;17288:1;17280:6;17276:14;17269:53;17152:177;:::o;17335:366::-;17477:3;17498:67;17562:2;17557:3;17498:67;:::i;:::-;17491:74;;17574:93;17663:3;17574:93;:::i;:::-;17692:2;17687:3;17683:12;17676:19;;17335:366;;;:::o;17707:419::-;17873:4;17911:2;17900:9;17896:18;17888:26;;17960:9;17954:4;17950:20;17946:1;17935:9;17931:17;17924:47;17988:131;18114:4;17988:131;:::i;:::-;17980:139;;17707:419;;;:::o;18132:116::-;18202:21;18217:5;18202:21;:::i;:::-;18195:5;18192:32;18182:60;;18238:1;18235;18228:12;18182:60;18132:116;:::o;18254:137::-;18308:5;18339:6;18333:13;18324:22;;18355:30;18379:5;18355:30;:::i;:::-;18254:137;;;;:::o;18397:345::-;18464:6;18513:2;18501:9;18492:7;18488:23;18484:32;18481:119;;;18519:79;;:::i;:::-;18481:119;18639:1;18664:61;18717:7;18708:6;18697:9;18693:22;18664:61;:::i;:::-;18654:71;;18610:125;18397:345;;;;:::o;18748:229::-;18888:34;18884:1;18876:6;18872:14;18865:58;18957:12;18952:2;18944:6;18940:15;18933:37;18748:229;:::o;18983:366::-;19125:3;19146:67;19210:2;19205:3;19146:67;:::i;:::-;19139:74;;19222:93;19311:3;19222:93;:::i;:::-;19340:2;19335:3;19331:12;19324:19;;18983:366;;;:::o;19355:419::-;19521:4;19559:2;19548:9;19544:18;19536:26;;19608:9;19602:4;19598:20;19594:1;19583:9;19579:17;19572:47;19636:131;19762:4;19636:131;:::i;:::-;19628:139;;19355:419;;;:::o;19780:221::-;19920:34;19916:1;19908:6;19904:14;19897:58;19989:4;19984:2;19976:6;19972:15;19965:29;19780:221;:::o;20007:366::-;20149:3;20170:67;20234:2;20229:3;20170:67;:::i;:::-;20163:74;;20246:93;20335:3;20246:93;:::i;:::-;20364:2;20359:3;20355:12;20348:19;;20007:366;;;:::o;20379:419::-;20545:4;20583:2;20572:9;20568:18;20560:26;;20632:9;20626:4;20622:20;20618:1;20607:9;20603:17;20596:47;20660:131;20786:4;20660:131;:::i;:::-;20652:139;;20379:419;;;:::o;20804:180::-;20852:77;20849:1;20842:88;20949:4;20946:1;20939:15;20973:4;20970:1;20963:15;20990:180;21038:77;21035:1;21028:88;21135:4;21132:1;21125:15;21159:4;21156:1;21149:15;21176:225;21316:34;21312:1;21304:6;21300:14;21293:58;21385:8;21380:2;21372:6;21368:15;21361:33;21176:225;:::o;21407:366::-;21549:3;21570:67;21634:2;21629:3;21570:67;:::i;:::-;21563:74;;21646:93;21735:3;21646:93;:::i;:::-;21764:2;21759:3;21755:12;21748:19;;21407:366;;;:::o;21779:419::-;21945:4;21983:2;21972:9;21968:18;21960:26;;22032:9;22026:4;22022:20;22018:1;22007:9;22003:17;21996:47;22060:131;22186:4;22060:131;:::i;:::-;22052:139;;21779:419;;;:::o;22204:179::-;22344:31;22340:1;22332:6;22328:14;22321:55;22204:179;:::o;22389:366::-;22531:3;22552:67;22616:2;22611:3;22552:67;:::i;:::-;22545:74;;22628:93;22717:3;22628:93;:::i;:::-;22746:2;22741:3;22737:12;22730:19;;22389:366;;;:::o;22761:419::-;22927:4;22965:2;22954:9;22950:18;22942:26;;23014:9;23008:4;23004:20;23000:1;22989:9;22985:17;22978:47;23042:131;23168:4;23042:131;:::i;:::-;23034:139;;22761:419;;;:::o;23186:98::-;23237:6;23271:5;23265:12;23255:22;;23186:98;;;:::o;23290:147::-;23391:11;23428:3;23413:18;;23290:147;;;;:::o;23443:246::-;23524:1;23534:113;23548:6;23545:1;23542:13;23534:113;;;23633:1;23628:3;23624:11;23618:18;23614:1;23609:3;23605:11;23598:39;23570:2;23567:1;23563:10;23558:15;;23534:113;;;23681:1;23672:6;23667:3;23663:16;23656:27;23505:184;23443:246;;;:::o;23695:386::-;23799:3;23827:38;23859:5;23827:38;:::i;:::-;23881:88;23962:6;23957:3;23881:88;:::i;:::-;23874:95;;23978:65;24036:6;24031:3;24024:4;24017:5;24013:16;23978:65;:::i;:::-;24068:6;24063:3;24059:16;24052:23;;23803:278;23695:386;;;;:::o;24087:271::-;24217:3;24239:93;24328:3;24319:6;24239:93;:::i;:::-;24232:100;;24349:3;24342:10;;24087:271;;;;:::o;24364:99::-;24416:6;24450:5;24444:12;24434:22;;24364:99;;;:::o;24469:102::-;24510:6;24561:2;24557:7;24552:2;24545:5;24541:14;24537:28;24527:38;;24469:102;;;:::o;24577:377::-;24665:3;24693:39;24726:5;24693:39;:::i;:::-;24748:71;24812:6;24807:3;24748:71;:::i;:::-;24741:78;;24828:65;24886:6;24881:3;24874:4;24867:5;24863:16;24828:65;:::i;:::-;24918:29;24940:6;24918:29;:::i;:::-;24913:3;24909:39;24902:46;;24669:285;24577:377;;;;:::o;24960:313::-;25073:4;25111:2;25100:9;25096:18;25088:26;;25160:9;25154:4;25150:20;25146:1;25135:9;25131:17;25124:47;25188:78;25261:4;25252:6;25188:78;:::i;:::-;25180:86;;24960:313;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1799000","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"424","MANAGER_ROLE()":"395","_rsvVault(uint256)":"infinite","addReserveVault(address)":"infinite","currentReserveId()":"2474","depositCollateral(uint256,uint256)":"infinite","getRoleAdmin(bytes32)":"infinite","getRoleMember(bytes32,uint256)":"infinite","getRoleMemberCount(bytes32)":"2914","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","owner()":"2545","renounceOwnership()":"30396","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","transferOwnership(address)":"30785","withdrawCollateral(uint256,uint256)":"infinite"},"internal":{"checkReserveContract(contract IERC20)":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","MANAGER_ROLE()":"ec87621c","_rsvVault(uint256)":"279ba28d","addReserveVault(address)":"3b61f098","currentReserveId()":"5306f102","depositCollateral(uint256,uint256)":"ece13732","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","owner()":"8da5cb5b","renounceOwnership()":"715018a6","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","transferOwnership(address)":"f2fde38b","withdrawCollateral(uint256,uint256)":"767a7b05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rsvVault\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"addReserveVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentReserveId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReserveContract.sol\":\"ReserveContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e98c0d315f562a98d915414f948e041531138284dd633b4cdb0361a7172cd97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xeeffca030e47ae166c981ca8726784781ea5fc5835aa27d7006783194a7ed18c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x171a9b614bed004394c8c004271abae184a961c0c3d4c345b5e24823e836c524\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9c5342beaabc260ed2a9c31357dd1860d0957c8604fc1fdd638444d8f2d5e1fd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x71e0d1cc75b67306382e055b789b6d3ffe34a9e2e55380d3c9895a36a42229e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"contracts/ReserveContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ncontract ReserveContract is Ownable, ReentrancyGuard, AccessControl {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public currentReserveId;\\r\\n\\r\\n    struct ReserveVault {\\r\\n        IERC20 collateral;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => ReserveVault) public _rsvVault;\\r\\n\\r\\n    event Withdraw(uint256 indexed vid, uint256 amount);\\r\\n    event deposit(uint256 indexed vid, uint256 amount);\\r\\n\\r\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\r\\n\\r\\n    constructor() {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        _setupRole(MANAGER_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    function checkReserveContract(IERC20 _collateral) internal view {\\r\\n        for (uint256 i; i < currentReserveId; i++) {\\r\\n            require(\\r\\n                _rsvVault[i].collateral != _collateral,\\r\\n                \\\"Collateral Address Already Added\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addReserveVault(IERC20 _collateral) external {\\r\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"Not allowed\\\");\\r\\n        checkReserveContract(_collateral);\\r\\n        _rsvVault[currentReserveId].collateral = _collateral;\\r\\n        currentReserveId++;\\r\\n    }\\r\\n\\r\\n    function depositCollateral(uint256 vid, uint256 amount) external {\\r\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"Not allowed\\\");\\r\\n        IERC20 reserves = _rsvVault[vid].collateral;\\r\\n        reserves.safeTransferFrom(address(msg.sender), address(this), amount);\\r\\n        uint256 currentVaultBalance = _rsvVault[vid].amount;\\r\\n        _rsvVault[vid].amount = currentVaultBalance.add(amount);\\r\\n        emit deposit(vid, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawCollateral(uint256 vid, uint256 amount) external {\\r\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"Not allowed\\\");\\r\\n        IERC20 reserves = _rsvVault[vid].collateral;\\r\\n        uint256 currentVaultBalance = _rsvVault[vid].amount;\\r\\n        if (currentVaultBalance >= amount) {\\r\\n            reserves.safeTransfer(address(msg.sender), amount);\\r\\n            _rsvVault[vid].amount = currentVaultBalance.sub(amount);\\r\\n            emit Withdraw(vid, amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7fec07038d7f2e76a5f7399d848dff11e7c4491bb05e5cfc0be529a3ec3d6d84\",\"license\":\"MIT LICENSE\"}},\"version\":1}","storageLayout":{"storage":[{"astId":293,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1892,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":25,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"_roles","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_struct(RoleData)20_storage)"},{"astId":1944,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"currentReserveId","offset":0,"slot":"3","type":"t_uint256"},{"astId":1955,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"_rsvVault","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_struct(ReserveVault)1950_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IERC20)828":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_mapping(t_bytes32,t_struct(RoleData)20_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)20_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_struct(ReserveVault)1950_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ReserveContract.ReserveVault)","numberOfBytes":"32","value":"t_struct(ReserveVault)1950_storage"},"t_struct(AddressSet)1654_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":1653,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)1377_storage"}],"numberOfBytes":"64"},"t_struct(ReserveVault)1950_storage":{"encoding":"inplace","label":"struct ReserveContract.ReserveVault","members":[{"astId":1947,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"collateral","offset":0,"slot":"0","type":"t_contract(IERC20)828"},{"astId":1949,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"amount","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_struct(RoleData)20_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":17,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"members","offset":0,"slot":"0","type":"t_struct(AddressSet)1654_storage"},{"astId":19,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"adminRole","offset":0,"slot":"2","type":"t_bytes32"}],"numberOfBytes":"96"},"t_struct(Set)1377_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":1372,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":1376,"contract":"contracts/ReserveContract.sol:ReserveContract","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}